WEBVTT

NOTE duration:"01:23:12"

NOTE recognizability:0.769

NOTE language:en-us

NOTE Confidence: 0.762553175

588967dc-85a7-4935-a6ec-8f1b4082ed5a
00:00:00.000 --> 00:00:03.498
I back to forget about that. Oh my goodness.

NOTE Confidence: 0.6688088

0ad6cf17-55c4-4b16-b705-252dbfaf7c02
00:00:23.860 --> 00:00:27.920
When to leave? Stop.

NOTE Confidence: 0.52656475

45979ffb-6df9-4784-b8a5-c3afaaa89749
00:00:30.810 --> 00:00:31.500
One shot.

NOTE Confidence: 0.43888852

d6ed0e17-ac06-4e70-ba55-2b62401cd9cf
00:00:34.870 --> 00:00:35.550
From above.

NOTE Confidence: 0.67444056

f9a96df6-7aac-42c4-b62b-c6d4891cff62
00:00:37.640 --> 00:00:41.340
Calm down the PC. She did.

NOTE Confidence: 0.4930553

57a0c85f-e2cb-44cd-a090-3ed25fdc0409
00:01:00.070 --> 00:01:00.850
Shield.

NOTE Confidence: 0.793819324666667

13d47f5c-c1af-4818-81cf-01f9bd25168a
00:01:55.040 --> 00:01:57.175
So basically I just wanted to show

NOTE Confidence: 0.793819324666667

fd474482-68da-418d-b58c-b5b1eb2883c3
00:01:57.175 --> 00:01:59.786
you and in brief part of the movie.

NOTE Confidence: 0.793819324666667

d676ce17-878c-4543-8211-d52368f0704c
00:01:59.790 --> 00:02:01.956
So this is a great movie.

NOTE Confidence: 0.793819324666667

6c7908a8-cbbb-419a-8a42-f4e9e4b07a0e
00:02:01.960 --> 00:02:05.038
Actually it has a I mean had a great

NOTE Confidence: 0.793819324666667

bf6f770d-9918-4e36-8dbb-3a34587f5444
00:02:05.038 --> 00:02:07.324
influence on my lifestyle and I highly

NOTE Confidence: 0.793819324666667

95932931-32a5-40ef-89d3-bc9327ecc8e2
00:02:07.324 --> 00:02:08.812
suggest you to watch this movie.

NOTE Confidence: 0.793819324666667

8ce37922-31b1-45f1-916e-9439f3b0921c
00:02:08.820 --> 00:02:12.918
But why we chose this movie?

NOTE Confidence: 0.793819324666667

20825a7e-0bd6-48fa-b442-7e0adf7355e0
00:02:12.920 --> 00:02:17.033
The theme of the movie was about a undergrad

NOTE Confidence: 0.793819324666667

2ba9ed08-7062-4a45-9a3e-9a341f4f815a
00:02:17.033 --> 00:02:20.378
undergrad student who graduated and simply.

NOTE Confidence: 0.793819324666667

6568d406-3304-4b55-86fd-de441db2482e
00:02:20.380 --> 00:02:22.556
Uh, just destroy any.

NOTE Confidence: 0.793819324666667

1cddb0c7-6db5-49e8-906b-50e0030d6887
00:02:22.556 --> 00:02:25.820
I mean degrio whatever and then.

NOTE Confidence: 0.793819324666667

260a47bc-eeb4-4950-8dda-e2e78260f1e9
00:02:25.820 --> 00:02:27.952
Went into the wild.

NOTE Confidence: 0.793819324666667

1dfa3124-9df6-482f-bae6-a7c0528b28b5
00:02:27.952 --> 00:02:30.617
Just in it I mean.

NOTE Confidence: 0.793819324666667

30e3c636-0020-4f4e-b87a-8d9dcd73ba66
00:02:30.620 --> 00:02:32.450
Solo trip, uh,

NOTE Confidence: 0.793819324666667

6516383e-070f-40c6-a7fe-edd4db301a7e
00:02:32.450 --> 00:02:37.992
but here today we are going to do the same,

NOTE Confidence: 0.793819324666667

79f9675a-e968-4d5d-a760-3a69a6c215a5
00:02:37.992 --> 00:02:40.960
but for the program inside the memory.

NOTE Confidence: 0.793819324666667

a5101e96-09e4-478f-b8f8-7e71e5d349b7
00:02:40.960 --> 00:02:42.868
So we already said that how

NOTE Confidence: 0.793819324666667

82025713-c8b2-4f8e-b786-886dca90591d
00:02:42.868 --> 00:02:44.760
a program becomes a process.

NOTE Confidence: 0.793819324666667

00e0c869-a470-433f-93de-dc1eb0148c67
00:02:44.760 --> 00:02:48.522
So we are going to go deeper into the

NOTE Confidence: 0.793819324666667

1d4f7c82-1d42-4fc5-b4fb-f7d6300f31b1
00:02:48.522 --> 00:02:51.761
steps of this transformation of the

NOTE Confidence: 0.793819324666667

9df698a8-944a-4877-8afc-5b8af612ac25
00:02:51.761 --> 00:02:55.127
program to the process and running

NOTE Confidence: 0.793819324666667

a04a54af-e340-4b5b-b296-20091dee9392
00:02:55.127 --> 00:02:58.949
the process up until its termination.

NOTE Confidence: 0.793819324666667

fbe71a6e-c1fe-4c77-bb3a-40de8a5832bd
00:02:58.950 --> 00:03:02.630
So that's why I picked this movie up.

NOTE Confidence: 0.793819324666667

1f2b6557-56f0-4044-962d-58110d45e545
00:03:02.630 --> 00:03:04.505
So hopefully this weekend we

NOTE Confidence: 0.793819324666667

3c5f2729-e3d6-49c0-a227-cf3e9be030f3
00:03:04.505 --> 00:03:07.310
can have a chance to watch this.

NOTE Confidence: 0.793819324666667

72477c05-a25c-4459-ad79-bd35f89f642e
00:03:07.310 --> 00:03:10.130
So I already uploaded the lab

NOTE Confidence: 0.793819324666667

f37ddc3f-7205-41b5-a9e5-9073d9452466
00:03:10.130 --> 00:03:12.570
and lectures for this week,

NOTE Confidence: 0.793819324666667

686d6853-2dc6-4db0-8213-4f19cb76e4c1
00:03:12.570 --> 00:03:16.074
which is about how to bootstrap a program.

NOTE Confidence: 0.7700395525

c09cfa56-6278-4414-9c8f-cb1e9228b236
00:03:18.130 --> 00:03:20.328
Very similar to the way the shell

NOTE Confidence: 0.7700395525

853133d8-447d-43f1-a064-c736fddd4510
00:03:20.328 --> 00:03:22.039
with the straps up program.

NOTE Confidence: 0.7700395525

8a12c791-47c2-47a9-b131-2dd0175e79d1
00:03:22.040 --> 00:03:25.218
So it's part of the process manager.

NOTE Confidence: 0.7700395525

a8d21b1b-b182-4e8f-ad29-ef4d978e1faf
00:03:25.220 --> 00:03:26.966
And the topics that we are

NOTE Confidence: 0.7700395525

39d219e6-2393-4518-8034-f76c45639576
00:03:26.966 --> 00:03:28.500
going to discuss this week,

NOTE Confidence: 0.7700395525

9934cc09-4d24-4b92-bae6-e18f9ce6b9d9
00:03:28.500 --> 00:03:30.999
I mean today and the next lecture.

NOTE Confidence: 0.7700395525

b0dae3c3-1b65-4611-ae0a-41c8987b7169
00:03:31.000 --> 00:03:34.745
It's from the Chapter 7 process environment.

NOTE Confidence: 0.7700395525

d3d78b78-0c2f-4c2b-8c98-789cd7c3ea05
00:03:34.750 --> 00:03:37.999
That we are going to finish it today and

NOTE Confidence: 0.7700395525

4568a185-f4c0-43d1-83af-c1fd3dccd6d2
00:03:37.999 --> 00:03:41.470
some part of the Chapter 8 process control.

NOTE Confidence: 0.7700395525

9270aa40-8991-40c3-9d34-ce88fe969d6a
00:03:41.470 --> 00:03:44.145
We will complete this chapter

NOTE Confidence: 0.7700395525

1c45fdfa-5a67-434d-9cff-576aabd33c3c
00:03:44.145 --> 00:03:45.864
next lecture hopefully.

NOTE Confidence: 0.7700395525

475fcb5a-7175-44c4-8ff8-fc1331787aa0
00:03:45.864 --> 00:03:48.708
And a basically by these two

NOTE Confidence: 0.7700395525

c975571e-07c8-41e5-9357-0cb3711d691e
00:03:48.708 --> 00:03:51.624
chapters we are done with the

NOTE Confidence: 0.7700395525

463e63ce-9709-4a00-88d8-2daccedb70a4
00:03:51.624 --> 00:03:54.438
process manager part of the kernel.

NOTE Confidence: 0.7700395525

9208c435-50b7-4fcb-b36b-f0eb4a363d3d
00:03:54.440 --> 00:03:55.668
So the process manager,

NOTE Confidence: 0.7700395525

4a2de463-fc86-4d5d-819f-1747dc8e809b
00:03:55.668 --> 00:03:56.896
part of the kernel,

NOTE Confidence: 0.7700395525

0143d34e-0dcc-49e4-85ff-53181c2bb725
00:03:56.900 --> 00:03:59.964
also called process control,

NOTE Confidence: 0.7700395525

39ba9f25-8bd9-4cc6-a21d-18be6cce860e
00:03:59.964 --> 00:04:02.620
and the names actually implies why?

NOTE Confidence: 0.7700395525

480d4370-a804-4138-9d31-5a9d9bb4cac8
00:04:02.620 --> 00:04:05.800
Because this part of the kernel

NOTE Confidence: 0.7700395525

70b8d3c8-05f2-4c85-b1e4-c0a861ee82ac
00:04:05.800 --> 00:04:08.740
controls how your program becomes

NOTE Confidence: 0.7700395525

f70e4ea3-867f-44a0-8227-8abc3c0d3ced
00:04:08.740 --> 00:04:12.252
a process and controls the running

NOTE Confidence: 0.7700395525

b3a2baf9-fd9c-434d-8864-2fcef96c2b17
00:04:12.252 --> 00:04:15.542
of your OP code of your program

NOTE Confidence: 0.7700395525

251c2502-f30b-44b5-9571-d7739004945d
00:04:15.542 --> 00:04:18.447
up until its final out code.

NOTE Confidence: 0.7700395525

11c5628f-811a-4427-b47a-070a57695d31
00:04:18.450 --> 00:04:22.710
So we already covered this part.

NOTE Confidence: 0.7700395525

f4a9fb7d-8e3e-4e67-adaa-90a84c5ad287
00:04:22.710 --> 00:04:25.698
And then now we are in this part and

NOTE Confidence: 0.7700395525

4896de4b-a7e5-464b-89ea-92780a3f0e27
00:04:25.698 --> 00:04:28.799
after that we go to the network manager.

NOTE Confidence: 0.7700395525

ae317ebe-53cf-4351-a0e3-15458842867d
00:04:28.800 --> 00:04:31.290
And, uh, I think, uh,

NOTE Confidence: 0.7700395525

dcce0d83-d654-455f-ac58-b0e6b10b061f
00:04:31.290 --> 00:04:36.138
we may touch on memory managers some how.

NOTE Confidence: 0.7700395525

ef353176-f1bc-4381-b17f-8956ca6cc0c6
00:04:36.140 --> 00:04:39.038
Uhm, another part of the kernel.

NOTE Confidence: 0.7700395525

11c4149a-9edd-4c53-b20c-8975c173daeb
00:04:39.040 --> 00:04:41.808
So now we are in the process manager.

NOTE Confidence: 0.7700395525

eb2cdc92-7c03-4494-8cc5-3be6a0a25b8d
00:04:41.810 --> 00:04:44.570
Process manager is one of.

NOTE Confidence: 0.7700395525

88ed1cd8-781f-4568-a3fe-877ef9aa0200
00:04:44.570 --> 00:04:47.405
I mean if we want to prioritize

NOTE Confidence: 0.7700395525

a4cfffaf-dd58-4514-b6e3-e6582ecbf1d0
00:04:47.405 --> 00:04:49.619
different part of the kernel,

NOTE Confidence: 0.7700395525

cecb83db-9b08-498c-8e17-98233e37ca5d
00:04:49.620 --> 00:04:52.200
process manager is the first one.

NOTE Confidence: 0.7700395525

af34fd76-9b04-4b4e-b89a-eff997b50861
00:04:52.200 --> 00:04:53.042
Because, uh.

NOTE Confidence: 0.7700395525

63ebfc12-1a6b-476f-8888-a09af394ffe5
00:04:53.042 --> 00:04:55.568
The main purpose of a computer

NOTE Confidence: 0.7700395525

e57f3d01-025a-4ab0-b9ee-f86195d2271d
00:04:55.568 --> 00:04:58.440
system to run a program so to make

NOTE Confidence: 0.7700395525

1513d861-31b0-47d6-a6ab-f583c1b87b0c
00:04:58.440 --> 00:05:01.044
it a process and run our program

NOTE Confidence: 0.7700395525

918b87f5-bb01-4159-ac19-23514e47a416
00:05:01.044 --> 00:05:03.480
to solve a real world problem.

NOTE Confidence: 0.7700395525

d5f5032e-de62-4190-b0d6-a57c5ec00e1f
00:05:03.480 --> 00:05:06.894
So process manager is the most

NOTE Confidence: 0.7700395525

dd31305f-dfdd-460d-9287-950c8ef60aac
00:05:06.894 --> 00:05:10.050
important part of the kernel.

NOTE Confidence: 0.7700395525

4cf495fe-69df-465b-8e11-34b544193164
00:05:10.050 --> 00:05:12.030
And.

NOTE Confidence: 0.7700395525

841d3807-c8a6-480f-8686-9898ec8ef4d0
00:05:12.030 --> 00:05:15.334
This is the trip that the program

NOTE Confidence: 0.7700395525

96de3c8d-5536-4a71-9a9c-4da6185df321
00:05:15.334 --> 00:05:18.950
actually go through up until its termination.

NOTE Confidence: 0.7700395525

d3628f70-b3ca-45e9-b29d-5533bf025a3d
00:05:18.950 --> 00:05:20.600
Very simple path.

NOTE Confidence: 0.7700395525

84b83214-3f50-4277-8a00-be266436726d
00:05:20.600 --> 00:05:23.240
There are different exceptions

NOTE Confidence: 0.7700395525

7b5472fb-0041-4dd2-a6db-6d8a4bb9e1fa
00:05:23.240 --> 00:05:25.880
to this simple path.

NOTE Confidence: 0.7700395525

688bd00c-317b-4ffa-b893-48918949e704
00:05:25.880 --> 00:05:26.317
Uh,

NOTE Confidence: 0.7700395525

66b8903c-2aad-42cc-ae49-54d246f815fe
00:05:26.317 --> 00:05:28.939
which we will discuss next lecture,

NOTE Confidence: 0.7700395525

832b9360-c848-4444-b744-796fb195d4bd
00:05:28.940 --> 00:05:30.505
but for today we assume

NOTE Confidence: 0.7700395525

3c60d101-c3f0-4c47-b8f6-fc522d35d425
00:05:30.505 --> 00:05:32.070
that we have a program.

NOTE Confidence: 0.7700395525

26a57948-a5e8-444a-ab7c-6395d2339af4
00:05:32.070 --> 00:05:35.082
It becomes a process and then

NOTE Confidence: 0.7700395525

6d7493c5-93d0-4125-a11a-3804d670cf1f
00:05:35.082 --> 00:05:38.078
it takes the processor and it

NOTE Confidence: 0.7700395525

96491844-79a9-4bcc-9bf2-077c2b99b06e
00:05:38.078 --> 00:05:40.742
runs and then up until its

NOTE Confidence: 0.7700395525

7541d0a1-284b-46fe-a19f-21ad4935ad78
00:05:40.742 --> 00:05:43.468
final opcode and it terminates.

NOTE Confidence: 0.7700395525

86799686-e622-4d82-b033-23b7ef3d3b0c
00:05:43.470 --> 00:05:46.065
So we already discussed whatever

NOTE Confidence: 0.7700395525

fe5d84fe-7045-41b8-803a-46f9934e56ca
00:05:46.065 --> 00:05:50.429
steps it takes us to create a program.

NOTE Confidence: 0.7700395525

7cfd17b0-54cd-4acb-b61e-a3a9417d6a64
00:05:50.430 --> 00:05:53.803
So we already said that a program you

NOTE Confidence: 0.7700395525

e325e3bb-6061-4bb8-9057-0fe86ad37268
00:05:53.803 --> 00:05:57.427
write in a programming language such as C.

NOTE Confidence: 0.7700395525

68186bd9-5fc6-4c4b-a971-b4f23483e5b1
00:05:57.430 --> 00:06:00.610
As a programming language.

NOTE Confidence: 0.7700395525

ae58375d-ca00-41f4-be1d-d958d448ee5c
00:06:00.610 --> 00:06:02.388
And then you give it to the

NOTE Confidence: 0.7700395525

de715ba7-9dde-440e-8532-fe32f51319af
00:06:02.388 --> 00:06:03.730
compiler of that language,

NOTE Confidence: 0.7700395525

1b1c2070-8433-40e3-8bc7-451c6a26a312
00:06:03.730 --> 00:06:06.360
which translated to the assembly.

NOTE Confidence: 0.777479743125

69c6dc2a-80e4-4e2d-8a1b-d36c12d6599d
00:06:09.180 --> 00:06:11.664
And then you give it to the assembler of

NOTE Confidence: 0.777479743125

66e81d33-cddf-44ca-8b43-11446ef7394f
00:06:11.664 --> 00:06:14.270
the machine and you produce the opcodes.

NOTE Confidence: 0.777479743125

1cb33bc6-f58d-4309-885f-32e9332c9466
00:06:14.270 --> 00:06:17.957
In the lab, I believe in the lab, free,

NOTE Confidence: 0.777479743125

6276f2e7-0b36-427c-8209-9aecaedc7cc1
00:06:17.957 --> 00:06:22.919
uh, we fully covered this process.

NOTE Confidence: 0.777479743125

84a5ec38-856f-42e6-8194-9d0fa0fd3065
00:06:22.920 --> 00:06:25.602
After this, uh, we called the

NOTE Confidence: 0.777479743125

2fb91cca-9244-46c1-80a8-b44d462477c9
00:06:25.602 --> 00:06:28.140
whole process building a program.

NOTE Confidence: 0.84055924

31678af3-7f61-47c9-9991-f162fabff158
00:06:30.610 --> 00:06:35.619
So. At this point.

NOTE Confidence: 0.84055924

2859c1ab-c0da-4e2e-b3cd-ea171f7b2f17
00:06:35.620 --> 00:06:39.148
We already know that.

NOTE Confidence: 0.84055924

5080d74c-a711-405a-bf8f-8cee887176b5
00:06:39.150 --> 00:06:42.234
A processor should know from where

NOTE Confidence: 0.84055924

4db21d4e-bd39-44fa-9648-3c9cb90b1d11
00:06:42.234 --> 00:06:45.512
it should start your program and

NOTE Confidence: 0.84055924

caa63bcb-e4d1-48f9-8eb8-f5efffcbb466
00:06:45.512 --> 00:06:48.722
the execution of your program. This.

NOTE Confidence: 0.84055924

9daa0bac-d708-4e31-a817-437bb5a39ce6
00:06:48.722 --> 00:06:51.536
Point of your program that helps the

NOTE Confidence: 0.84055924

4794013d-b858-47ba-a16b-cc49c7e7677d
00:06:51.536 --> 00:06:54.118
processor to start the execution of

NOTE Confidence: 0.84055924

c9df6a49-70fd-40f7-b317-d313b917d616
00:06:54.118 --> 00:06:56.662
your program is called entry point.

NOTE Confidence: 0.84055924

93aa597d-f8b3-4024-9bb5-f1081f52264e
00:06:56.670 --> 00:06:59.980
Basically, the address of the

NOTE Confidence: 0.84055924

8139a5f7-b12c-40e7-877d-e6b1241ba1dd
00:06:59.980 --> 00:07:03.290
first opcode of your program.

NOTE Confidence: 0.84055924

42c248b0-258b-4fe4-b6ae-82bf077a3b67
00:07:03.290 --> 00:07:05.456
Which is called also entry point.

NOTE Confidence: 0.824491927777778

1dd0d88d-ba7e-49c3-8959-ab38205e14ee
00:07:08.600 --> 00:07:12.824
So in C program, the entry point of

NOTE Confidence: 0.824491927777778

df4ddc1d-b55c-42b6-b610-9cc534744ce8
00:07:12.824 --> 00:07:17.025
any program is identified by this

NOTE Confidence: 0.824491927777778

7178c6a2-102a-4a14-9e73-09c18a0bc86b
00:07:17.025 --> 00:07:20.057
specific function main function.

NOTE Confidence: 0.824491927777778

ccfeca07-72f8-4466-9019-b6184aa20008
00:07:20.060 --> 00:07:21.600
And this is the simplest

NOTE Confidence: 0.824491927777778

196b5712-9fd7-4e37-ad3b-ee47a6d1f189
00:07:21.600 --> 00:07:23.140
form of the main function,

NOTE Confidence: 0.824491927777778

46794751-a541-41a0-a5b4-5d943869a39c
00:07:23.140 --> 00:07:26.720
returns nothing and accepts nothing.

NOTE Confidence: 0.824491927777778

11452130-54aa-4dc4-aa86-3006f8c44a8b
00:07:26.720 --> 00:07:31.085
Void and it's the name of the function made.

NOTE Confidence: 0.824491927777778

a22dfb20-4b70-4518-94b7-b145c97444a6
00:07:31.090 --> 00:07:34.065
And when you build a program using,

NOTE Confidence: 0.824491927777778

841458ae-84c3-4dbb-bf76-5611d53908de
00:07:34.070 --> 00:07:35.900
I mean having this simplest

NOTE Confidence: 0.824491927777778

41f1e831-98f1-4a6f-af54-73bee7a31302
00:07:35.900 --> 00:07:37.730
form of the main function.

NOTE Confidence: 0.824491927777778

7135eb20-9e23-4dbd-aee0-c864c200fe94
00:07:37.730 --> 00:07:39.704
You can simply ask the shell

NOTE Confidence: 0.824491927777778

59f6b737-2c45-43c4-960f-655e39991a7d
00:07:39.704 --> 00:07:41.020
to bootstrap your program,

NOTE Confidence: 0.824491927777778

cc92ebd7-9c3a-45af-a6fc-a08a60bf5174
00:07:41.020 --> 00:07:43.356
and this is the name of your program.

NOTE Confidence: 0.824491927777778

2870c702-dc7e-447f-b260-16a434808354
00:07:43.360 --> 00:07:44.460
At the correct folder.

NOTE Confidence: 0.8737540725

7f744e93-2ebd-4e17-8341-fa32cc78a5d6
00:07:46.920 --> 00:07:50.721
So if your program doesn't have this

NOTE Confidence: 0.8737540725

1c85d4a9-c32f-47a8-b2c2-382deb6b7c68
00:07:50.721 --> 00:07:53.690
function, your program cannot be run.

NOTE Confidence: 0.8737540725

9851db64-e0ae-4c94-8d04-cffc9d0f0b21
00:07:53.690 --> 00:07:55.282
That's simple. Again, uh,

NOTE Confidence: 0.8737540725

a39474b8-d3eb-46da-9979-f6cef54f0e34
00:07:55.282 --> 00:07:57.670
there are some exceptions that you

NOTE Confidence: 0.8737540725

ab0189e7-724c-4d80-9357-d6b4d3115cfa
00:07:57.746 --> 00:08:00.161
can have some program that we that

NOTE Confidence: 0.8737540725

74247a12-bcfd-4e7e-82b3-5e38ba9818cb
00:08:00.161 --> 00:08:02.021
doesn't have main function will

NOTE Confidence: 0.8737540725

0c76ec90-3e66-4ad3-bc42-de60fc6e117a
00:08:02.021 --> 00:08:04.653
discuss it next lecture or next week.

NOTE Confidence: 0.8737540725

28c62e84-a202-4f62-88bd-16bfe774cee2
00:08:04.660 --> 00:08:08.348
But for now, or any program in order

NOTE Confidence: 0.8737540725

63eec8eb-f088-4299-ac2f-047a9eee5e9a
00:08:08.348 --> 00:08:10.590
to be executed by the processor,

NOTE Confidence: 0.8737540725

9a604ad0-408d-446d-aa40-2f925f325095
00:08:10.590 --> 00:08:12.570
should have an entry point and

NOTE Confidence: 0.8737540725

b3b0ba3c-967c-4943-9c72-b620d8ae69f8
00:08:12.633 --> 00:08:14.433
that into point is identified

NOTE Confidence: 0.8737540725

e790d7e8-bdd9-42d9-8e22-49cb03c75a4e
00:08:14.433 --> 00:08:15.873
by this specific function.

NOTE Confidence: 0.689019664545455

b91a4616-3509-43ce-ae21-86bddf7662e3
00:08:18.430 --> 00:08:22.974
The main function in its fullest form or

NOTE Confidence: 0.689019664545455

41807977-32bb-4d54-a0db-f4e261720a6f
00:08:22.974 --> 00:08:28.700
complete form has this return type integer.

NOTE Confidence: 0.689019664545455

91e6db30-0675-42cb-9653-65e5d37d313e
00:08:28.700 --> 00:08:29.820
Again, it could be work,

NOTE Confidence: 0.689019664545455

18f61761-bd3b-420d-8069-ad3a381feb2e
00:08:29.820 --> 00:08:32.676
but this is the complete form integer value

NOTE Confidence: 0.689019664545455

d2872e14-b1fa-4ed2-ae45-9832375894de
00:08:32.676 --> 00:08:35.758
and it accepts two important arguments.

NOTE Confidence: 0.689019664545455

37edf793-4404-4442-9bb3-935ffeb0e8e2
00:08:35.760 --> 00:08:38.100
Agsi or argument counter.

NOTE Confidence: 0.689019664545455

c77f0e2b-14fb-483d-a1a6-62665babf692
00:08:38.100 --> 00:08:41.610
This is the aggregation for counter

NOTE Confidence: 0.689019664545455

9e13edc0-c4fb-4a6d-9c34-b3e2f14553ca
00:08:41.706 --> 00:08:45.748
argument counter and then argument values.

NOTE Confidence: 0.831289668571429

4d707441-d91b-4e73-9c70-c8798c7b3c89
00:08:49.390 --> 00:08:52.568
So what are these two important arguments?

NOTE Confidence: 0.831289668571429

af0b9dc6-c769-4833-9c6c-5a5aa0596ae6
00:08:52.570 --> 00:08:55.060
Basically, when you ask the shelter,

NOTE Confidence: 0.831289668571429

509fc7ea-d2e9-48ed-9600-bd75aa55a1c2
00:08:55.060 --> 00:08:56.581
bootstrap your program.

NOTE Confidence: 0.831289668571429

88cc2586-56cd-406a-adc5-41e6bd1d635b
00:08:56.581 --> 00:09:00.746
You can ask the shell to pass some

NOTE Confidence: 0.831289668571429

b9acad67-0d87-46a7-9381-70174dc0a041
00:09:00.746 --> 00:09:04.344
values as an argument to your program.

NOTE Confidence: 0.831289668571429

b35881e0-7be7-4264-b3b4-8e011c3bb2cd
00:09:04.350 --> 00:09:07.402
Why, uh, we want to do that

NOTE Confidence: 0.831289668571429

5b290929-dc21-42b3-8054-2013a4f109c1
00:09:07.402 --> 00:09:10.146
because we want some flexibility

NOTE Confidence: 0.831289668571429

99604a25-3a3b-457f-9bab-824cfa28e34f
00:09:10.146 --> 00:09:13.476
for execution of our program.

NOTE Confidence: 0.831289668571429

fdd53c75-0c2b-49a3-ae42-ac61462572e7
00:09:13.480 --> 00:09:15.656
We may say that you want to run

NOTE Confidence: 0.831289668571429

d8df32d3-e8f5-4a37-8a3c-2e1689fa400d
00:09:15.656 --> 00:09:17.409
our program given some values,

NOTE Confidence: 0.831289668571429

6d84f4fc-4884-4c0f-ab5b-24d90687a2c2
00:09:17.410 --> 00:09:18.817
for instance AP.

NOTE Confidence: 0.831289668571429

87bef9f0-8489-4369-998f-95ca7a8c814b
00:09:18.817 --> 00:09:21.631
Which is different for from running

NOTE Confidence: 0.831289668571429

3f66391a-a8c0-4ff7-a1ac-30f26862d0a9
00:09:21.631 --> 00:09:24.877
a program when the arguments are,

NOTE Confidence: 0.831289668571429

2cfe9110-f630-4d70-b871-260918e34068
00:09:24.880 --> 00:09:28.270
for instance 1020.

NOTE Confidence: 0.831289668571429

3f76927e-4a09-44c2-969a-853315ab9cde
00:09:28.270 --> 00:09:30.490
So it gives us some flexibility

NOTE Confidence: 0.831289668571429

2f2a8cf5-6340-4fab-a486-9eb964154306
00:09:30.490 --> 00:09:33.532
to make it run out of our program

NOTE Confidence: 0.831289668571429

e60b39e6-c464-4471-b081-4b746562ece6
00:09:33.532 --> 00:09:38.999
based on some initial mean settings.

NOTE Confidence: 0.831289668571429

2ed86c34-4227-4981-964d-7d8a0f00bec6
00:09:39.000 --> 00:09:41.240
And the return value actually

NOTE Confidence: 0.831289668571429

04f22482-e8b6-42a0-aadf-5344bbd4dd11
00:09:41.240 --> 00:09:43.480
shows whether the program runs

NOTE Confidence: 0.831289668571429

a3f2eaea-f7f3-4603-add9-e7cd3c62f387
00:09:43.561 --> 00:09:45.196
successfully terminated successfully

NOTE Confidence: 0.831289668571429

e94ece1c-3808-4e59-ac2b-1c0b47bef6b6
00:09:45.196 --> 00:09:47.921
or there are some exceptions

NOTE Confidence: 0.831289668571429

134707a6-ef57-487d-995d-694c058da8b5
00:09:47.921 --> 00:09:50.589
or ever happened in between.

NOTE Confidence: 0.70385315

1db0f634-e222-420d-a3ee-0b2e7f6c6f65
00:09:53.370 --> 00:09:56.858
Here is an example, so I'll write a

NOTE Confidence: 0.70385315

d6760af2-baed-49ec-bd71-e276b36f2942
00:09:56.858 --> 00:09:59.827
simple program and main are I already.

NOTE Confidence: 0.70385315

f39aed16-3528-4339-bef3-33c3b34eaf95
00:09:59.830 --> 00:10:02.806
I will upload this simple program as well,

NOTE Confidence: 0.70385315

db1eb96e-e810-407b-9cbc-be2d5b8b90c5
00:10:02.810 --> 00:10:05.428
so in this simple program I just

NOTE Confidence: 0.70385315

17f24ac5-bd23-439b-b94d-5c1fdcb75dc5
00:10:05.428 --> 00:10:08.077
wanted to see how many parameters

NOTE Confidence: 0.70385315

6c747d04-b18c-4c0a-9066-4cc941c99c5f
00:10:08.077 --> 00:10:10.957
or arguments are passed through our

NOTE Confidence: 0.70385315

de121950-7cb8-421b-b99f-1346ba8ee554
00:10:10.957 --> 00:10:14.318
our main program from the command

NOTE Confidence: 0.70385315

ddcfa48a-a7c5-400b-a2a1-2a3c2849bb3b
00:10:14.318 --> 00:10:17.954
Shell Command prompt from the shell.

NOTE Confidence: 0.70385315

69708521-0e6c-4bae-b8df-72dd42528fe0
00:10:17.960 --> 00:10:21.560
So here basically I say that how many

NOTE Confidence: 0.70385315

39de69d9-e5b6-4de9-83e3-5fbfb3455431
00:10:21.560 --> 00:10:24.357
arguments is in the command line?

NOTE Confidence: 0.70385315

93fb1b29-f123-4ed6-808f-66c76d702a5e
00:10:24.360 --> 00:10:26.355
And then I go through the loop

NOTE Confidence: 0.70385315

5470dedf-83af-4825-b0e7-129d4855336d
00:10:26.355 --> 00:10:28.766
from zero up until the number of

NOTE Confidence: 0.70385315

4434221e-6ed4-423c-82c7-3e1909d3f33f
00:10:28.766 --> 00:10:30.992
parameters or argument in the shell,

NOTE Confidence: 0.70385315

310ebaa4-0ba9-4634-bb1b-c257abf2dbde
00:10:31.000 --> 00:10:34.000
and then I just simply showed them where

NOTE Confidence: 0.70385315

54d0a51a-45bf-4636-bdac-334c6935bb2a
00:10:34.000 --> 00:10:37.229
I mean the values of these arguments.

NOTE Confidence: 0.70385315

57c54713-7f6d-4dc0-a663-c6d43a5ca2ee
00:10:37.230 --> 00:10:39.878
So if you compile it and run it.

NOTE Confidence: 0.70385315

7556bf98-180e-4889-8d37-277cc52b1b17
00:10:39.880 --> 00:10:41.059
Without any parameter,

NOTE Confidence: 0.70385315

c4586ff7-8778-4c61-9675-f19bda7de578
00:10:41.059 --> 00:10:44.912
so you can see that even if you run

NOTE Confidence: 0.70385315

700367fc-0707-42cf-b294-9e22d6267585
00:10:44.912 --> 00:10:47.467
a program without any additional

NOTE Confidence: 0.70385315

f50bb563-e2bc-4d3e-84dc-ed5468415d90
00:10:47.467 --> 00:10:49.000
arguments or parameters.

NOTE Confidence: 0.70385315

03403ee6-0e7a-4d30-85ab-12dbfbbbe760
00:10:49.000 --> 00:10:52.800
The name of the program is considered as

NOTE Confidence: 0.70385315

92a41f32-07f8-4691-b2c0-c3145ece6883
00:10:52.800 --> 00:10:56.878
the first initial parameter to your program,

NOTE Confidence: 0.70385315

084f1d6d-d3a9-43ea-b453-3fb47825fb9c
00:10:56.878 --> 00:11:01.939
so all the programs in C language has

NOTE Confidence: 0.70385315

c540d9a6-a3ef-4bde-aeba-4803261bdf13
00:11:01.940 --> 00:11:05.860
at least one argument in its shell,

NOTE Confidence: 0.70385315

950af42e-e44d-4a72-b2a8-d7229210843c
00:11:05.860 --> 00:11:09.004
which is the name of the program itself.

NOTE Confidence: 0.70385315

50dcf555-9a69-4789-a752-1112276dd786
00:11:09.010 --> 00:11:12.050
And this is the value.

NOTE Confidence: 0.70385315

de9b7ae5-ad8e-4cc5-a54f-af9bc6cc2bcf
00:11:12.050 --> 00:11:15.850
So basically whatever you put.

NOTE Confidence: 0.70385315

5e6baef8-6260-4c5a-8a6a-52fa9ff04a20
00:11:15.850 --> 00:11:17.332
In the command room and asked

NOTE Confidence: 0.70385315

0ef89259-4ca2-4ee0-9114-7f9771b7bd45
00:11:17.332 --> 00:11:18.320
to shift the bootstrap,

NOTE Confidence: 0.70385315

6ca2bad7-f4bb-411f-bef2-ee57ce90ff18
00:11:18.320 --> 00:11:20.925
that program becomes the first

NOTE Confidence: 0.70385315

0219518c-6062-4b61-91fe-a94627903622
00:11:20.925 --> 00:11:23.530
argument of the program itself.

NOTE Confidence: 0.70385315

899f78e3-5ba1-4a12-a814-728b06e945ff
00:11:23.530 --> 00:11:24.156
However,

NOTE Confidence: 0.70385315

ce78139a-9270-4647-b1b9-568b2ebc1849
00:11:24.156 --> 00:11:26.660
if you pass additional

NOTE Confidence: 0.70385315

79e613c3-63e4-481a-adb7-7726ba4e8b97
00:11:26.660 --> 00:11:28.751
arguments separated by space,

NOTE Confidence: 0.70385315

757040fb-4483-450a-b987-746904c122cc
00:11:28.751 --> 00:11:30.699
so you can simply.

NOTE Confidence: 0.813717510571428

3c9f4f04-3c3b-4b62-ade4-4199fd32dc90
00:11:33.160 --> 00:11:38.868
I mean, uh, put some space or back tab space.

NOTE Confidence: 0.775774293333333

ff27cfe5-3246-4d1e-a59c-cbc9996d1df0
00:11:40.880 --> 00:11:44.880
Or any any type of space actually

NOTE Confidence: 0.775774293333333

a580c515-0e99-4459-832c-5fc38de61449
00:11:44.880 --> 00:11:48.600
separates the arguments from the shell.

NOTE Confidence: 0.775774293333333

ee9dedb8-9fe0-4735-a22c-0e2f09aa9aa0
00:11:48.600 --> 00:11:50.700
And then if you run it now,

NOTE Confidence: 0.775774293333333

3f62cb60-0846-472c-beed-5eb47ea9b058
00:11:50.700 --> 00:11:54.370
your program receives 3 arguments.

NOTE Confidence: 0.775774293333333

27e134e0-335a-413f-a21b-9f33c86745dd
00:11:54.370 --> 00:11:58.213
The first argument is the name of the pure

NOTE Confidence: 0.775774293333333

abc41f49-cf9d-4fdf-ad91-06d90d4d0fbc
00:11:58.213 --> 00:12:01.505
program itself and the other arguments are

NOTE Confidence: 0.775774293333333

05e96a09-6e18-4552-a3d4-24e7b114be45
00:12:01.505 --> 00:12:05.147
the values that you pass to the program.

NOTE Confidence: 0.775774293333333

87245a0b-365c-43c6-b9d1-bf3d40f6abbb
00:12:05.150 --> 00:12:08.552
One important thing here is that

NOTE Confidence: 0.775774293333333

e8795491-823e-4494-a783-56626535b7b4
00:12:08.552 --> 00:12:11.430
these parameters are of type.

NOTE Confidence: 0.775774293333333

49b00d48-96b0-4cfe-8780-b1ec37806762
00:12:11.430 --> 00:12:15.000
Carestar meaning that they are.

NOTE Confidence: 0.775774293333333

688c8d71-3642-4df3-93a9-5e0d4a3c4c9a
00:12:15.000 --> 00:12:20.328
Aries. They are array of chars.

NOTE Confidence: 0.775774293333333

80796fed-eae0-42d1-a73a-69e00db3e689
00:12:20.330 --> 00:12:21.930
So basically these parameters

NOTE Confidence: 0.775774293333333

37424aa3-9fb4-4270-8539-0ea7a2cba021
00:12:21.930 --> 00:12:24.330
are passing to the program based

NOTE Confidence: 0.775774293333333

c861e8a2-8691-47f5-88fd-e6b4523ae5fa
00:12:24.401 --> 00:12:26.206
on the string of characters.

NOTE Confidence: 0.775774293333333

49189d1e-070f-477a-b7ee-ad2abb2f39c9
00:12:26.210 --> 00:12:31.637
For instance, here we have P. AR. And one.

NOTE Confidence: 0.775774293333333

a0e88475-c656-44ea-9995-3f07df3536cd
00:12:31.637 --> 00:12:37.830
So these are each one is the character.

NOTE Confidence: 0.775774293333333

2809adec-3757-4f9a-95fa-661c5ff0a21f
00:12:37.830 --> 00:12:40.550
That's why the this argument

NOTE Confidence: 0.775774293333333

cc2aea4d-dbf0-4302-a29f-3cf2a0111829
00:12:40.550 --> 00:12:43.650
is a character point of list.

NOTE Confidence: 0.775774293333333

90da824c-55fc-4ef0-8a41-bc338c31be93
00:12:43.650 --> 00:12:45.490
Basically, it means that.

NOTE Confidence: 0.775774293333333

121e9efd-898a-41f5-9d77-bbb50b68ef53
00:12:45.490 --> 00:12:50.390
We have our. He has a pointer.

NOTE Confidence: 0.775774293333333

9e075424-d35e-48b7-bb59-87e5b39fc215
00:12:50.390 --> 00:12:55.079
To a place, and this place is a list.

NOTE Confidence: 0.775774293333333

dc4d3048-0245-4d66-86c1-0c56b2dc3f40
00:12:55.080 --> 00:12:58.690
Ends with a null value.

NOTE Confidence: 0.775774293333333

f49393a2-95d3-483e-ae51-ef62bde7eaea
00:12:58.690 --> 00:13:01.505
And each entry of this

NOTE Confidence: 0.775774293333333

06655234-4a21-4003-a782-d0cd3e073e68
00:13:01.505 --> 00:13:04.320
list also is a pointer.

NOTE Confidence: 0.775774293333333

edab0b85-70a8-4161-8c2b-51ba8b0fd159
00:13:04.320 --> 00:13:07.920
To a list of characters.

NOTE Confidence: 0.775774293333333

84bccfa4-8e71-4d93-a237-2e862d54a52e
00:13:07.920 --> 00:13:09.570
So for instance,

NOTE Confidence: 0.775774293333333

af83ba0c-f675-44ec-8791-1cbd28f97eb4
00:13:09.570 --> 00:13:13.420
here the zero indices is a pointer

NOTE Confidence: 0.775774293333333

a958f9a8-28cb-4a00-8b4d-0084e3ab20b2
00:13:13.531 --> 00:13:15.147
to the name of.

NOTE Confidence: 0.775774293333333

14f14c71-bab0-4ce3-8c77-8c7317a37d9c
00:13:15.150 --> 00:13:18.378
Character dot character.

NOTE Confidence: 0.8180578

d3f16c14-8c23-4ab7-96d8-d14cc7806746
00:13:21.640 --> 00:13:24.870
Sorry. Uh, outside?

NOTE Confidence: 0.552060696666667

542357e7-1115-408f-b492-d8c505dad2b1
00:13:33.880 --> 00:13:36.328
No forward slash.

NOTE Confidence: 0.65605855

b1475119-c505-4142-9fda-d17b06e3d562
00:13:40.330 --> 00:13:44.730
Yeah. Uh, forward this character forward

NOTE Confidence: 0.65605855

325869f8-3b78-44a1-8275-118534715ea2
00:13:44.730 --> 00:13:48.639
slash character and character A and etc,

NOTE Confidence: 0.65605855

d14f1633-3b77-491e-ba0e-9a269ce79dc2
00:13:48.640 --> 00:13:52.336
and then the second one is a pointer

NOTE Confidence: 0.65605855

565937a8-4244-4155-852c-56e4c45afa12
00:13:52.340 --> 00:13:58.390
to the list of characters par M1, etc.

NOTE Confidence: 0.740888983333333

9638c400-0305-4057-807d-99d2f77bb34e
00:14:02.740 --> 00:14:05.896
So here is a better example.

NOTE Confidence: 0.740888983333333

6369a656-7bdd-48af-a248-719d2a7c1c63
00:14:05.900 --> 00:14:08.700
In this example I write a program

NOTE Confidence: 0.740888983333333

50fcc817-b0fb-4406-a1a2-dc85c024e810
00:14:08.700 --> 00:14:11.419
that adds 2 integer numbers,

NOTE Confidence: 0.740888983333333

7cfd076f-3de9-4b48-9e3e-e6478e372534
00:14:11.420 --> 00:14:14.700
but the two integer numbers are passed by

NOTE Confidence: 0.740888983333333

ffa28464-bf7f-44cf-869d-846e94ad577e
00:14:14.700 --> 00:14:18.017
the shell as an argument to the program.

NOTE Confidence: 0.740888983333333

36b88b53-868a-4d2d-96d7-896d5e337418
00:14:18.020 --> 00:14:20.428
So here I say that I have very

NOTE Confidence: 0.740888983333333

3a8046f8-cc06-4f3d-b39e-1c3b11bd70cf
00:14:20.428 --> 00:14:22.647
well hey I have a real poopy,

NOTE Confidence: 0.740888983333333

04ba6dac-69df-43de-953f-f356da0d2a46
00:14:22.650 --> 00:14:26.108
but the variable A&B are initially 0.

NOTE Confidence: 0.740888983333333

48fab696-1836-4bfc-933b-cd60684c7bef
00:14:26.110 --> 00:14:29.630
The actual value of AMP or received by

NOTE Confidence: 0.740888983333333

e8a3a3bc-2426-4ece-b04c-44b91ad0efd4
00:14:29.630 --> 00:14:31.890
the first, I mean the second argument,

NOTE Confidence: 0.740888983333333

0e1f4e14-ba4b-4897-9fa5-b10882eb611e
00:14:31.890 --> 00:14:33.215
because the first argument is

NOTE Confidence: 0.740888983333333

c3f25177-e4dc-45d2-8cc8-b81ceb68672b
00:14:33.215 --> 00:14:34.950
the name of the program itself.

NOTE Confidence: 0.740888983333333

27a2b5a6-8830-4884-9093-644f99e67db5
00:14:34.950 --> 00:14:37.680
And then the third argument.

NOTE Confidence: 0.740888983333333

00a93bd2-a281-4096-8880-5cd920f1ae99
00:14:37.680 --> 00:14:39.520
Because these are characters I

NOTE Confidence: 0.740888983333333

d51b6893-1020-445c-bee6-e845e5ca717d
00:14:39.520 --> 00:14:42.199
have to transfer it to an integer,

NOTE Confidence: 0.740888983333333

85fe192b-dcdd-4d27-9967-33c4bd804287
00:14:42.200 --> 00:14:45.312
so there is a library routine as a

NOTE Confidence: 0.740888983333333

124aee97-be26-49de-abbd-b00ac64a265e
00:14:45.312 --> 00:14:48.039
helper function called ASCII to integer.

NOTE Confidence: 0.740888983333333

5879ddf4-8daa-49cb-851e-ade09002b673
00:14:48.040 --> 00:14:50.392
It is in the standard library

NOTE Confidence: 0.740888983333333

b09aa38e-7c40-4e6b-8ae3-b6de028cee5e
00:14:50.392 --> 00:14:51.960
as a library routine.

NOTE Confidence: 0.740888983333333

554b5eae-8ccc-452d-9572-5ae3da163085
00:14:51.960 --> 00:14:55.560
I use that in order to convert the.

NOTE Confidence: 0.740888983333333

136cbe30-9ea5-4b98-bfc1-5355ca88e2b1
00:14:55.560 --> 00:14:58.698
A string or list of characters

NOTE Confidence: 0.740888983333333

7b9c6b4d-29bd-4456-8d46-664a3cd83870
00:14:58.698 --> 00:15:00.790
into equal integer value,

NOTE Confidence: 0.740888983333333

fd6d736b-827c-4483-bcc8-52cc91dbab13
00:15:00.790 --> 00:15:02.980
and then I simply add them

NOTE Confidence: 0.740888983333333

70a55062-fbc5-4254-9ef7-ee0c5fa9bb11
00:15:02.980 --> 00:15:05.559
and then we print the result.

NOTE Confidence: 0.740888983333333

61e84d84-fb1e-4a92-bf85-ff458fcdd87e
00:15:05.559 --> 00:15:07.038
So for instance,

NOTE Confidence: 0.740888983333333

c4628b11-fa6e-445b-83ef-c15f9c656c95
00:15:07.040 --> 00:15:09.721
if I call this program by two

NOTE Confidence: 0.740888983333333

b46a8aed-e987-4546-83b9-94036551bfda
00:15:09.721 --> 00:15:12.668
additional argument, two and two.

NOTE Confidence: 0.740888983333333

77e67cd4-fd1d-4a76-b87f-af890c48d084
00:15:12.670 --> 00:15:14.785
To the first two goes to the variable a,

NOTE Confidence: 0.740888983333333

bd79329d-961c-4228-9f29-b368c0e74e73
00:15:14.790 --> 00:15:16.308
the second two goes to variable

NOTE Confidence: 0.740888983333333

3010087f-f013-4d9f-933e-00853d0a01e9
00:15:16.308 --> 00:15:17.760
P and then the result.

NOTE Confidence: 0.740888983333333

e86e2600-81e9-418e-aecc-d11b6df30cd2
00:15:17.760 --> 00:15:20.442
Before I can call this program

NOTE Confidence: 0.740888983333333

0ee55856-fcb0-4619-9870-baa7b43d4850
00:15:20.442 --> 00:15:23.847
again for 24 and the result is 6.

NOTE Confidence: 0.740888983333333

8f1ee63b-95f0-4538-9512-b248d71da001
00:15:23.850 --> 00:15:25.608
This is a very simple example,

NOTE Confidence: 0.740888983333333

d003d86c-ca29-45af-aa55-200fec278b5c
00:15:25.610 --> 00:15:30.410
but it shows the very powerful.

NOTE Confidence: 0.740888983333333

b5d48a54-4a00-4586-80bd-16bd59df7e27
00:15:30.410 --> 00:15:30.984
Idea?

NOTE Confidence: 0.740888983333333

838145d0-688d-4ba0-8b97-ff0100bd6d25
00:15:30.984 --> 00:15:33.854
Basically, it says that your

NOTE Confidence: 0.740888983333333

a371c89d-95d4-4be1-bfb0-29db02b4bec4
00:15:33.854 --> 00:15:37.593
program can act like a function,

NOTE Confidence: 0.740888983333333

fcb9f6cd-7cad-4855-a448-9df19a6a34ab
00:15:37.593 --> 00:15:39.606
so your program.

NOTE Confidence: 0.740888983333333

473e6e35-0433-4e33-bfd9-aba024b3947e
00:15:39.610 --> 00:15:42.670
Can acts like a function?

NOTE Confidence: 0.740888983333333

69d333a5-a59f-429f-ac2f-2d1a5058f19b
00:15:42.670 --> 00:15:46.415
So basically it can be a black

NOTE Confidence: 0.740888983333333

8ad13f04-028e-4c92-b528-2358478e77a6
00:15:46.415 --> 00:15:48.940
box that accepts inputs.

NOTE Confidence: 0.740888983333333

b73b6268-74ce-461c-ab97-c9ebfad7882e
00:15:48.940 --> 00:15:50.895
It process the input information

NOTE Confidence: 0.740888983333333

72a671ff-a797-4536-b4ec-01b77ec4110a
00:15:50.895 --> 00:15:53.869
and then ask what the final result.

NOTE Confidence: 0.822592554

eacf6401-fa0f-4735-a857-4674de6765ed
00:15:56.480 --> 00:15:58.867
So it gives a lot of flexibility

NOTE Confidence: 0.822592554

f81a54a2-2073-4d21-b5ef-3b0edddf3c23
00:15:58.867 --> 00:16:01.210
to your program, so one time I

NOTE Confidence: 0.822592554

9ffab820-820c-43b1-b8b7-6490d1517174
00:16:01.210 --> 00:16:03.190
run it for two different numbers.

NOTE Confidence: 0.822592554

703e4b39-51c6-4524-bb7a-276c81156418
00:16:03.190 --> 00:16:05.860
Another time I run the same

NOTE Confidence: 0.822592554

a9ac8ed5-b577-4d23-bda4-0a354005ed6c
00:16:05.860 --> 00:16:08.210
program for another two numbers.

NOTE Confidence: 0.6895043025

a85ef9dc-e3b0-4058-9715-92cc7ebb363b
00:16:11.310 --> 00:16:15.846
So now that we know the program becomes

NOTE Confidence: 0.6895043025

fb6275bd-5ca7-4938-bad9-1e6a201b4a20
00:16:15.846 --> 00:16:20.268
the opcode and we have the entry point.

NOTE Confidence: 0.6895043025

32a39dc7-9417-4274-9590-e742170c2a6c
00:16:20.270 --> 00:16:24.358
To the first opcode of the program.

NOTE Confidence: 0.6895043025

0babf11a-942c-423c-af19-88394efa7aaf
00:16:24.360 --> 00:16:26.080
What's the next step?

NOTE Confidence: 0.6895043025

f946bd54-c42f-43df-91d0-6fc79376192f
00:16:26.080 --> 00:16:29.032
The next step is we have.

NOTE Confidence: 0.6895043025

457757af-c37b-4a7b-82d6-2f8053592cce
00:16:29.032 --> 00:16:32.320
The shell should transfer your opcodes

NOTE Confidence: 0.6895043025

ce98df96-4505-4af6-a46d-3623fbf3f8ed
00:16:32.320 --> 00:16:35.680
to the memory and make it ready

NOTE Confidence: 0.6895043025

c562d844-8e7a-4211-b767-b173655e36cd
00:16:35.778 --> 00:16:38.676
to be executed by the processor.

NOTE Confidence: 0.6895043025

cf659763-4478-4d66-8aa4-065023dda935
00:16:38.680 --> 00:16:40.675
So it's kind of embarking

NOTE Confidence: 0.6895043025

cdd1b4ce-62cb-4853-be64-02f84a864432
00:16:40.675 --> 00:16:42.670
your program into the memory.

NOTE Confidence: 0.649552640909091

6f17bb4f-da6b-4c61-92af-5ef82f81af31
00:16:44.870 --> 00:16:48.832
Or taking the cab or taking or

NOTE Confidence: 0.649552640909091

76e98c84-2b5b-46d4-839e-0bb2212077cd
00:16:48.832 --> 00:16:51.560
hitchhiking for the program.

NOTE Confidence: 0.649552640909091

873322d7-05fb-4357-ac9c-02a1077ccf93
00:16:51.560 --> 00:16:53.738
So this is the process that we call it.

NOTE Confidence: 0.649552640909091

8abb539e-f178-4595-9e29-ad248d339b7d
00:16:53.740 --> 00:16:57.187
It's a, I mean a program becomes a process.

NOTE Confidence: 0.907615034

2bad0006-d4b1-4204-80f4-473dee745a7f
00:16:59.260 --> 00:17:03.110
So how this transformation happens?

NOTE Confidence: 0.907615034

ee91193b-6edf-46ac-8129-cf2619bb252e
00:17:03.110 --> 00:17:06.470
We call it a memory layout for a C program.

NOTE Confidence: 0.907615034

13d03248-a67d-465c-94de-d26f6d4cd9f7
00:17:06.470 --> 00:17:09.105
Basically your program becomes segmented

NOTE Confidence: 0.907615034

85e00c90-4981-45a4-92dc-f59420ade68b
00:17:09.105 --> 00:17:12.390
and its segments goes to accept,

NOTE Confidence: 0.907615034

010dbdb6-18a7-46bb-beaf-840aa0bb0870
00:17:12.390 --> 00:17:16.001
I mean a specific part of the memory. And.

NOTE Confidence: 0.907615034

12038462-7313-4924-9b1c-09d2ec2488da
00:17:16.001 --> 00:17:19.547
This separation and this segmentation is

NOTE Confidence: 0.907615034

18065496-0e88-4f5f-ab0d-cb4411509ec5
00:17:19.547 --> 00:17:23.297
called the memory layout of a program.

NOTE Confidence: 0.907615034

5fae0606-17f0-4b2f-804d-d85259b44218
00:17:23.300 --> 00:17:26.764
So from the very beginning of the semester,

NOTE Confidence: 0.907615034

8c070898-6131-4d21-bf6f-4e2939cd9a82
00:17:26.770 --> 00:17:28.358
from the week one,

NOTE Confidence: 0.907615034

b76f4622-cbd3-4776-8f29-8f23cfe931d3
00:17:28.358 --> 00:17:31.653
we said that we write programs to solve

NOTE Confidence: 0.907615034

608807b8-4584-4ba7-a8d9-5c5665b72995
00:17:31.653 --> 00:17:34.544
real problems and very few of the

NOTE Confidence: 0.907615034

e62c0f3e-6eaa-46f2-873d-a459948d6ad9
00:17:34.544 --> 00:17:37.476
problems can be solved by our programs.

NOTE Confidence: 0.907615034

083dbad7-268b-4189-89da-552d9cbbeba4
00:17:37.480 --> 00:17:39.898
But if you could solve the

NOTE Confidence: 0.907615034

cd457bf9-b44b-4585-90ce-1c25f1c49dcb
00:17:39.898 --> 00:17:41.510
real problem by program,

NOTE Confidence: 0.907615034

271ec743-d69e-41c0-aab3-3fd71e84f358
00:17:41.510 --> 00:17:43.478
any program has two main parts,

NOTE Confidence: 0.907615034

48e616a7-c7e4-4b10-8eeb-5f073a7654c7
00:17:43.480 --> 00:17:45.952
algorithm and data algorithm.

NOTE Confidence: 0.907615034

08c6d91f-4a8c-4d5d-812c-4cb4cdead250
00:17:45.952 --> 00:17:49.668
Are those up codes that we have to

NOTE Confidence: 0.907615034

de3191bc-6ee4-4a46-b147-7a8138d118df
00:17:49.670 --> 00:17:52.534
take these steps in order to reach to

NOTE Confidence: 0.907615034

a4840a5c-fd0d-42e7-82a7-0d9265267c54
00:17:52.534 --> 00:17:55.568
the solution and the data part is the

NOTE Confidence: 0.907615034

fb8df1fa-f132-4bbc-9964-5214f133c201
00:17:55.568 --> 00:17:58.011
information about the input data and

NOTE Confidence: 0.907615034

c3ca9201-0159-45da-b366-6138e248ae2b
00:17:58.011 --> 00:18:02.148
also the final solution to the problem.

NOTE Confidence: 0.907615034

1e3ba58f-466e-482f-abe8-0e9ecdfd7edc
00:18:02.150 --> 00:18:04.341
And we said that when we want

NOTE Confidence: 0.907615034

c44534a5-edd0-40f2-9d8a-49397c04fc52
00:18:04.341 --> 00:18:05.930
to execute the program,

NOTE Confidence: 0.907615034

c4b57b31-cca1-4ea5-bf4a-44ce80540989
00:18:05.930 --> 00:18:07.844
the data and the algorithm based

NOTE Confidence: 0.907615034

e31cddc2-6971-4609-946d-2c13e9faee01
00:18:07.844 --> 00:18:10.040
on the fun human architecture,

NOTE Confidence: 0.907615034

de6e5bcd-a0ee-4225-b51c-fdf768a643cd
00:18:10.040 --> 00:18:12.488
both of them should go to the memory.

NOTE Confidence: 0.907615034

8fda9f3b-9c47-4dac-9e96-0582641fcdd2
00:18:12.490 --> 00:18:15.434
And now we are going to discuss the

NOTE Confidence: 0.907615034

0fd5e227-905d-42bf-81d9-6dc6787fbd08
00:18:15.434 --> 00:18:18.258
details of this transformation this.

NOTE Confidence: 0.907615034

ff7f58a5-b102-41fd-b0cf-524b2b3659ac
00:18:18.260 --> 00:18:18.910
Transferred.

NOTE Confidence: 0.763299657272727

9191d7c1-4fa9-433b-84d1-b02e73a5a5d9
00:18:20.970 --> 00:18:23.077
So in the left side you see

NOTE Confidence: 0.763299657272727

ed729691-0d6b-4329-9a26-0db59bdb8826
00:18:23.077 --> 00:18:24.690
programmed in C language,

NOTE Confidence: 0.763299657272727

3eef5167-b8a8-44d3-ae66-5451490c03d4
00:18:24.690 --> 00:18:27.890
but we know that again just a reminder,

NOTE Confidence: 0.763299657272727

7c2056b8-3cf7-4172-8086-f7debe3b5bf3
00:18:27.890 --> 00:18:31.122
we know that these are when it goes

NOTE Confidence: 0.763299657272727

646085bb-e2f2-47af-be43-8118346a67df
00:18:31.122 --> 00:18:33.690
to memory. These are all opcodes.

NOTE Confidence: 0.763299657272727

99b59895-fc52-4c21-b871-bc46fd663514
00:18:33.690 --> 00:18:37.300
So these are all extreme of zero ones.

NOTE Confidence: 0.763299657272727

21273374-00f5-4d4c-aecb-1ea03f9b2b2e
00:18:37.300 --> 00:18:39.852
I just show it as it's C program

NOTE Confidence: 0.763299657272727

b6ec0cf1-f4d5-49d2-a93f-321206c275b3
00:18:39.852 --> 00:18:41.838
because it's easier to explain.

NOTE Confidence: 0.763299657272727

e2302a69-6cb3-4f81-9481-03524bb8c453
00:18:41.840 --> 00:18:46.371
But in the actual, uh, I mean selling,

NOTE Confidence: 0.763299657272727

151a270e-56e4-462b-b0a7-576aad6d0533
00:18:46.371 --> 00:18:48.856
these are all zero ones.

NOTE Confidence: 0.763299657272727

5814bd9b-1e85-46e8-ac59-6ad7e7a120e3
00:18:48.860 --> 00:18:51.950
So your program becomes a miss.

NOTE Confidence: 0.763299657272727

a1750419-132d-409e-b5b1-b9dec89e0113
00:18:51.950 --> 00:18:55.870
Segmented into these different components.

NOTE Confidence: 0.58391321

ceb9dab2-100f-4bd5-ae2c-7e79287987f4
00:18:58.350 --> 00:19:01.570
We have code segments.

NOTE Confidence: 0.58391321

713cb768-3669-4269-a255-8f6c632fba93
00:19:01.570 --> 00:19:03.115
Right after this code segment

NOTE Confidence: 0.58391321

8fb94863-0bc1-46c1-889d-1aaec1fc4cf2
00:19:03.115 --> 00:19:04.660
we have the data segment

NOTE Confidence: 0.58391321

4e33d806-6665-4763-95bc-d4eacb226412
00:19:04.719 --> 00:19:06.147
right after data segment.

NOTE Confidence: 0.58391321

d34d9a3d-fd4d-490f-9434-bd2b6176aeb0
00:19:06.150 --> 00:19:07.990
We have a segment called.

NOTE Confidence: 0.58391321

ac5895df-54ea-48a4-bddb-430356597273
00:19:07.990 --> 00:19:11.588
Unblock started by the symbol or VSS.

NOTE Confidence: 0.535151538333333

87b1e001-1a08-49c1-8390-70661a3c51b2
00:19:14.350 --> 00:19:17.686
Right after that we had he.

NOTE Confidence: 0.535151538333333

cf7b3a13-4223-469b-8ede-116f83312fe1
00:19:17.690 --> 00:19:20.658
We just start from here up until up.

NOTE Confidence: 0.535151538333333

4677e09f-0466-48b5-87b0-eeaf6fd4cc57
00:19:20.660 --> 00:19:23.411
We have a component segment called this

NOTE Confidence: 0.535151538333333

0348da57-0352-4b7b-84a3-84cf0a575c0f
00:19:23.411 --> 00:19:25.948
tag that instead of just starting from

NOTE Confidence: 0.535151538333333

40772b39-e172-4b42-b503-1f3ce02c3a5c
00:19:25.948 --> 00:19:28.729
low to up it starts from up to down.

NOTE Confidence: 0.535151538333333

9482637f-6edb-4329-8da7-9bae208593e6
00:19:28.730 --> 00:19:32.160
Actually it grows in the reverse side.

NOTE Confidence: 0.535151538333333

1f24fde6-5883-4abf-a9c3-71b2dde7f4c4
00:19:32.160 --> 00:19:34.488
And then we have a component which include

NOTE Confidence: 0.535151538333333

c280bdc4-6da4-4329-9201-0c69154533ed
00:19:34.488 --> 00:19:36.727
the copy of the environment variable,

NOTE Confidence: 0.535151538333333

4c978dae-ca6a-49c6-bc15-00ba97b65306
00:19:36.730 --> 00:19:39.340
shell variables in kernel variables,

NOTE Confidence: 0.535151538333333

4ca82cdc-6bce-4eb9-b813-2c301664c2ac
00:19:39.340 --> 00:19:42.142
and then the arguments that is

NOTE Confidence: 0.535151538333333

698a0036-5eac-438a-9b37-948d17637182
00:19:42.142 --> 00:19:44.820
passed by the shelter program.

NOTE Confidence: 0.535151538333333

564ee502-4f21-4c61-a966-97f6c5555e69
00:19:44.820 --> 00:19:47.580
I'm going to explain each segment in details,

NOTE Confidence: 0.535151538333333

ed715124-da8e-40d1-b735-5d48213c2222
00:19:47.580 --> 00:19:49.736
but an important thing here is this.

NOTE Confidence: 0.805425822

f0c8bc9f-02c3-49c1-a858-e569d77d8587
00:19:52.670 --> 00:19:56.054
We usually when we show the memory spaces

NOTE Confidence: 0.805425822

653f8c5e-e984-4c92-82bc-fdc288efb62d
00:19:56.054 --> 00:19:58.590
or locations, or we say that's OK,

NOTE Confidence: 0.805425822

fc583a8c-7577-472b-a524-a9abe118ee17
00:19:58.590 --> 00:20:01.936
the highest point is 000 and then

NOTE Confidence: 0.688218751904762

a03c8018-594c-4d96-87fb-a649c9ea3d2f
00:20:04.630 --> 00:20:06.256
00010002 and etc.

NOTE Confidence: 0.688218751904762

37b814b2-7db0-404e-b08b-522384727af8
00:20:06.256 --> 00:20:10.687
So some I mean in normal setting we

NOTE Confidence: 0.688218751904762

b76cc579-0b05-4135-ba10-730b9b5b9813
00:20:10.687 --> 00:20:13.813
show the memory locations from up

NOTE Confidence: 0.688218751904762

18d6ff64-0c80-4e73-b48f-8f6f83d6c5d5
00:20:13.813 --> 00:20:17.530
to down and the first address is 0

NOTE Confidence: 0.688218751904762

3de8e128-4c4d-413f-96a8-cdb4bbb1c32b
00:20:17.530 --> 00:20:20.110
and then we increment the address

NOTE Confidence: 0.688218751904762

bf61d3a5-64e4-4a30-b415-dbf7d01e03af
00:20:20.201 --> 00:20:23.520
for other locations of the memory.

NOTE Confidence: 0.688218751904762

f70816c0-0704-4bfd-8f4d-f6ea20af28b1
00:20:23.520 --> 00:20:25.750
However, in the actual setting

NOTE Confidence: 0.688218751904762

c63b9af5-0f5f-4311-b704-1b65cddbe0cd
00:20:25.750 --> 00:20:27.980
in the system level programming,

NOTE Confidence: 0.688218751904762

803355e2-6614-4daf-85cb-dbc73f922888
00:20:27.980 --> 00:20:33.108
the address of the memory is the reverse.

NOTE Confidence: 0.688218751904762

697c7f1d-941a-4c0e-bfa4-b6f036f52989
00:20:33.110 --> 00:20:35.861
So we start from the bottom of

NOTE Confidence: 0.688218751904762

c4a6f1c4-88bb-4916-bbff-7819d4819963
00:20:35.861 --> 00:20:38.739
the memory at the low addresses.

NOTE Confidence: 0.688218751904762

be43f217-9dcc-4c66-8cbe-f7335f43be0d
00:20:38.740 --> 00:20:41.456
From the address 0 and then we

NOTE Confidence: 0.688218751904762

0a4e9eae-f5df-46f3-9617-c5734d13aad4
00:20:41.456 --> 00:20:43.493
increment the address up until

NOTE Confidence: 0.688218751904762

bc9536ef-5893-4b25-af21-c45f59999947
00:20:43.493 --> 00:20:45.468
we reach the higher address.

NOTE Confidence: 0.688218751904762

79f78657-c64b-44e3-893b-9b34a454548d
00:20:45.470 --> 00:20:47.800
So this is the correct.

NOTE Confidence: 0.688218751904762

69a702c4-98b5-454f-813d-22ecc5205ae2
00:20:47.800 --> 00:20:49.800
A way of, uh,

NOTE Confidence: 0.688218751904762

f2784529-5ce0-4e38-bbe9-2cd83e38e4bc
00:20:49.800 --> 00:20:53.080
I mean showing the memory address

NOTE Confidence: 0.688218751904762

2c84caaa-eaa5-41de-86cc-47f090d37018
00:20:53.080 --> 00:20:55.360
inside the computer system.

NOTE Confidence: 0.688218751904762

f3933aaa-204e-438b-bc47-68f614a2e73d
00:20:55.360 --> 00:20:57.436
So from the low address because

NOTE Confidence: 0.688218751904762

d18c5ac8-57cb-4d26-9d08-5e6fb9f8d66b
00:20:57.436 --> 00:21:00.134
it's low part of the memory solo

NOTE Confidence: 0.688218751904762

5a2d71b1-8a61-4def-a15d-3ba84947c6f8
00:21:00.134 --> 00:21:02.105
address to high part of the

NOTE Confidence: 0.688218751904762

0fd50063-012d-4186-803e-ca0784a49c2a
00:21:02.105 --> 00:21:03.349
memory or high addresses.

NOTE Confidence: 0.769650108

d4cb018a-f36b-493c-92f4-a2887ec682de
00:21:05.600 --> 00:21:10.784
And you have to memorize this a sketch or

NOTE Confidence: 0.769650108

d79c13da-4b10-412f-87f1-c3ec03fa3515
00:21:10.784 --> 00:21:13.598
this is the location of these segments.

NOTE Confidence: 0.769650108

e41f85dd-c9c6-4b05-a88e-6f7cbd72a4cf
00:21:13.600 --> 00:21:15.712
The code segments is the lowest

NOTE Confidence: 0.769650108

7184e7da-ecc5-48b9-bfee-68cf561bc709
00:21:15.712 --> 00:21:18.400
part of the memory for your program.

NOTE Confidence: 0.769650108

4f3edbb3-4140-4792-b5dd-da7b85feada8
00:21:18.400 --> 00:21:20.285
Right after this code segment

NOTE Confidence: 0.769650108

5d5ca10a-eab4-453b-95d2-2003bd8c69e8
00:21:20.285 --> 00:21:22.170
we have the data segment,

NOTE Confidence: 0.769650108

59683c66-8342-46a0-b097-ce414a3327da
00:21:22.170 --> 00:21:25.090
the second part of the your program

NOTE Confidence: 0.769650108

72ed4ee6-5636-4c11-a99b-77c4d88b27f4
00:21:25.090 --> 00:21:28.485
dedicated to your program, and then VSS.

NOTE Confidence: 0.769650108

1f59b7ac-3959-4b02-920c-da22565fac0d
00:21:28.485 --> 00:21:30.924
We have heat from the top.

NOTE Confidence: 0.769650108

0adcec0b-9055-41e4-942a-db3f8bef948d
00:21:30.924 --> 00:21:32.822
We have a stack at the

NOTE Confidence: 0.769650108

c7e41f5a-d356-4197-ae70-b174bd2f0bf7
00:21:32.822 --> 00:21:34.677
highest part of your program.

NOTE Confidence: 0.769650108

2cb9c6a1-9726-4627-b1c1-dabcce1014bf
00:21:34.680 --> 00:21:38.607
Inside the memory we have the arguments.

NOTE Confidence: 0.769650108

e588bd33-9406-4243-842b-1f449d20cb27
00:21:38.610 --> 00:21:40.521
Passed by the shelter program and a

NOTE Confidence: 0.769650108

862e674c-4c6e-4a1b-a067-3b119ef0b062
00:21:40.521 --> 00:21:42.679
copy of the environment variables.

NOTE Confidence: 0.769650108

e95d55f4-7ce4-4edc-9a30-32183504a8ba
00:21:42.680 --> 00:21:44.702
This is important.

NOTE Confidence: 0.769650108

dcf95761-f642-483b-8a10-139ad5cb5bf3
00:21:44.702 --> 00:21:49.420
Although you may find UM other kernels

NOTE Confidence: 0.769650108

09afdcb1-f322-436f-b82d-cf67a1420bd8
00:21:49.420 --> 00:21:54.404
or other operating system that they

NOTE Confidence: 0.769650108

71708d9d-efba-40a7-9d23-0de047dbb1f4
00:21:54.404 --> 00:21:59.956
segment your program into other segments,

NOTE Confidence: 0.769650108

f1c9505d-bbc2-4421-90c7-f97d484dc9ea
00:21:59.956 --> 00:22:03.409
or they put these segments in

NOTE Confidence: 0.769650108

b6e2d91c-9d74-4020-a2d1-338bac68809e
00:22:03.409 --> 00:22:05.524
different locations of the memory.

NOTE Confidence: 0.769650108

afdffbd4-05ae-4521-b848-310252b74089
00:22:05.530 --> 00:22:07.426
But this is the standard way.

NOTE Confidence: 0.769650108

d0f4f7b8-48a8-4089-989f-58d720f7a3be
00:22:07.430 --> 00:22:09.470
I mean, since the beginning

NOTE Confidence: 0.769650108

18c6819e-d3c8-4ed8-a733-1704eda59e4c
00:22:09.470 --> 00:22:11.964
of the Unix operating system.

NOTE Confidence: 0.769650108

27a9580c-6034-4ca8-947a-6091f6c7f037
00:22:11.964 --> 00:22:15.870
So this is the standard way of

NOTE Confidence: 0.769650108

14a1de19-7136-447a-ab0c-02b07eecc93c
00:22:15.870 --> 00:22:17.635
storing your program inside the

NOTE Confidence: 0.769650108

f0ac92bc-4279-4d44-93ba-8dc45a3fc114
00:22:17.635 --> 00:22:20.020
memory and make it a process.

NOTE Confidence: 0.783436068666667

b58bed63-2f0d-49f5-91d6-378822052596
00:22:22.900 --> 00:22:25.450
So the first part of your

NOTE Confidence: 0.783436068666667

f42f2b81-0930-4fe4-b3e2-97aee426eb30
00:22:25.450 --> 00:22:27.999
program at the lowest part of

NOTE Confidence: 0.783436068666667

6a3ca386-0e52-46ad-8bfc-ca3805ed705c
00:22:27.999 --> 00:22:30.202
the memory is the code segment.

NOTE Confidence: 0.783436068666667

8e36e2be-098a-4894-ba42-7a82b0b21ae1
00:22:30.202 --> 00:22:33.648
Oh, one thing I forgot to tell you is that.

NOTE Confidence: 0.783436068666667

6a57daa7-8584-4f28-9067-e39feb899d50
00:22:33.650 --> 00:22:36.500
For now, we assume that.

NOTE Confidence: 0.783436068666667

5bfdfa47-ad2c-4c8d-ba53-38bba1adc7fe
00:22:36.500 --> 00:22:39.741
All the memory of the computer system

NOTE Confidence: 0.783436068666667

1be5ae94-a6e8-4154-ac80-e8d8c57a7513
00:22:39.741 --> 00:22:42.970
is allocated to this single program.

NOTE Confidence: 0.783436068666667

f4d42540-bec8-4119-a9d0-d8fe57e69316
00:22:42.970 --> 00:22:45.448
Besides the kernel and the shell,

NOTE Confidence: 0.783436068666667

e755ffa4-e2a6-4337-860e-bf58da6c85f8
00:22:45.450 --> 00:22:47.620
we assume that there is no other

NOTE Confidence: 0.783436068666667

76d8fe9c-91d3-42f7-b2ac-ae67abffa61c
00:22:47.620 --> 00:22:49.729
processes or other programs running at

NOTE Confidence: 0.783436068666667

c9c2109c-e6f8-417e-a1a1-3ad3bc34dca2
00:22:49.729 --> 00:22:52.326
the same time inside the computer system.

NOTE Confidence: 0.783436068666667

fd6f3967-1934-4ee8-b076-5a6bdb5fa755
00:22:52.330 --> 00:22:55.578
As a result, the whole memory space is

NOTE Confidence: 0.783436068666667

092fcb66-6c6c-4468-a3fb-426ecd73ac2b
00:22:55.578 --> 00:22:58.869
for our own program from the lowest

NOTE Confidence: 0.783436068666667

15b8acdd-a39f-43d3-82ad-03d30c219b7a
00:22:58.870 --> 00:23:01.858
address up until the highest address.

NOTE Confidence: 0.783436068666667

20916242-7ed4-4e49-b4f2-f0dad42ec98d
00:23:01.860 --> 00:23:03.946
All the more memory is for us.

NOTE Confidence: 0.875663382857143

45b266e6-c385-4fe6-a400-3a5dc5ac316b
00:23:06.180 --> 00:23:09.705
At the lowest part of the memory they

NOTE Confidence: 0.875663382857143

6dc66859-7616-4cd9-85d5-e6ee2480e938
00:23:09.705 --> 00:23:15.185
shall puts the up code of your program.

NOTE Confidence: 0.875663382857143

f40467ae-d319-441b-9c36-958002c992d1
00:23:15.190 --> 00:23:18.053
As we said, these are just zero and ones, so

NOTE Confidence: 0.875663382857143

bf4d591e-f9dc-4dd4-9a4b-deb666be3316
00:23:18.053 --> 00:23:20.957
these are not characters of your C program,

NOTE Confidence: 0.875663382857143

465a5a54-8136-45d5-9f5d-7c5250c80f44
00:23:20.960 --> 00:23:23.792
but the OP code of your program. Also,

NOTE Confidence: 0.875663382857143

6ea3f18b-e7b4-4a8f-960f-b0043d23b41a
00:23:23.792 --> 00:23:27.168
it's called this text part of your program.

NOTE Confidence: 0.875663382857143

956a6271-808c-4cda-93ea-cbd6c92f1616
00:23:27.170 --> 00:23:30.170
Uh, inside the code section.

NOTE Confidence: 0.875663382857143

532f0a7f-881e-4c78-885e-ffc816ea0315
00:23:30.170 --> 00:23:31.890
So it starts from the,

NOTE Confidence: 0.875663382857143

d973e621-1547-4004-b837-bd5dc22d71b5
00:23:31.890 --> 00:23:35.430
so these are the sequences from.

NOTE Confidence: 0.875663382857143

80e75122-9dc1-4a13-a7f4-6506ad72ac9d
00:23:35.430 --> 00:23:37.170
I mean no number two,

NOTE Confidence: 0.875663382857143

05627baa-be0b-4bd8-8233-e06846c85a76
00:23:37.170 --> 00:23:38.928
so these are the line numbers,

NOTE Confidence: 0.875663382857143

3d30f4d1-5fec-4719-9d68-72cedc1cabd2
00:23:38.930 --> 00:23:43.250
so 0123 up until for instance 100.

NOTE Confidence: 0.875663382857143

b499c6d7-b278-4019-bc67-6565ed23eeae
00:23:43.250 --> 00:23:45.728
But if when it goes to the

NOTE Confidence: 0.875663382857143

b8868023-b542-4c2f-ad85-1ebaf88ebba3
00:23:45.728 --> 00:23:48.349
memory it goes to the rivers so.

NOTE Confidence: 0.875663382857143

810b197e-e187-42e6-bc88-c1cd05656673
00:23:48.350 --> 00:23:50.054
It becomes the first.

NOTE Confidence: 0.875663382857143

9beb592a-593c-483c-8eac-746da4352a00
00:23:50.054 --> 00:23:53.779
Part of the memory at the address 0000,

NOTE Confidence: 0.875663382857143

662460f8-d74a-42f1-adfa-1a19675ea2c4
00:23:53.779 --> 00:23:56.413
and then it goes to the

NOTE Confidence: 0.875663382857143

97174f83-a861-4526-8b83-3e4533b73ec7
00:23:56.413 --> 00:23:58.930
second part of the memory.

NOTE Confidence: 0.875663382857143

a06d9db0-6b08-49c2-865c-08e35039e8d8
00:23:58.930 --> 00:24:01.290
0001 and then the second

NOTE Confidence: 0.875663382857143

19460e34-7a5c-4494-8cdd-50f0a9327e9d
00:24:01.290 --> 00:24:04.160
third of protocols in 3rd.

NOTE Confidence: 0.875663382857143

7678891e-dcaa-46f8-ad68-37a880c8b7aa
00:24:04.160 --> 00:24:07.720
Part of the memory 0002 and etc.

NOTE Confidence: 0.875663382857143

a374cccd-99be-4245-b3ef-37911a59cce7
00:24:07.720 --> 00:24:11.150
So the last opcode goes to the

NOTE Confidence: 0.875663382857143

b1862db4-7d65-469c-b262-b0efa2785d97
00:24:11.266 --> 00:24:14.608
last part of the code segment.

NOTE Confidence: 0.875663382857143

db044397-744f-47d6-9d59-46bfca8b5abb
00:24:14.610 --> 00:24:17.438
For instance, 00 FF.

NOTE Confidence: 0.842981154285714

c2a779c3-a0da-4a51-a9fd-b15c783beda2
00:24:25.680 --> 00:24:28.879
The next segment is the data segment.

NOTE Confidence: 0.842981154285714

9836f7f7-2e12-48a4-87ab-d51bf27ba1f0
00:24:28.880 --> 00:24:31.046
The data segment is part of

NOTE Confidence: 0.842981154285714

f1cc51e3-c786-4604-a485-db219d6d4e27
00:24:31.046 --> 00:24:33.321
the memory right after the code

NOTE Confidence: 0.842981154285714

1996ca0c-a88d-472a-b79e-3a43e9767750
00:24:33.321 --> 00:24:36.219
segment that stores the variables.

NOTE Confidence: 0.842981154285714

e6356519-e6fb-4152-8c3c-944440a087eb
00:24:36.219 --> 00:24:39.784
But what type of variables?

NOTE Confidence: 0.842981154285714

444455c3-a466-4893-b072-7d8d44e36e97
00:24:39.790 --> 00:24:41.978
All the global variables.

NOTE Confidence: 0.769396449

008f9ed4-0aa2-42ea-a27d-2a58310a41b9
00:24:44.970 --> 00:24:48.834
And local variables to the main function

NOTE Confidence: 0.769396449

827d6137-9134-4aaa-a489-af9128e6b6ac
00:24:48.834 --> 00:24:52.598
only main function local variables to the

NOTE Confidence: 0.769396449

1ecfdd40-60d2-4cb9-a9a6-fbed6a55cf48
00:24:52.598 --> 00:24:56.820
main function only or the global variables.

NOTE Confidence: 0.769396449

7577744a-7ffa-4575-b067-fbd13af9d559
00:24:56.820 --> 00:25:01.184
But with this condition they has to be.

NOTE Confidence: 0.769396449

e9720545-993a-4cee-a685-a6cda9ef11f1
00:25:01.184 --> 00:25:04.256
They have to be initialized by

NOTE Confidence: 0.769396449

7ed1f197-cb95-4d4d-ac07-a06695976e29
00:25:04.256 --> 00:25:07.788
a defined value at compile time.

NOTE Confidence: 0.769396449

22478411-847b-4a75-b4c4-e7b7c1c4d3a0
00:25:07.790 --> 00:25:11.192
So for instance, in this program we

NOTE Confidence: 0.769396449

d1f1e5b6-0e7f-4764-b954-c285eba633a4
00:25:11.192 --> 00:25:14.296
have two variable 3 variables results,

NOTE Confidence: 0.769396449

94ca432a-900b-4ffb-8d75-b05ff2f2dc38
00:25:14.296 --> 00:25:18.641
which is a global variable, a local variable,

NOTE Confidence: 0.769396449

4a6a650e-14d7-495f-be77-85e7f6982bd1
00:25:18.641 --> 00:25:22.893
but inside the main function P a local

NOTE Confidence: 0.769396449

d15275d6-fa9a-44e3-a712-80bfca934f57
00:25:22.893 --> 00:25:25.498
variable inside the main function.

NOTE Confidence: 0.769396449

e9e86db1-92d2-490d-b154-c8323de62a31
00:25:25.500 --> 00:25:28.564
Because A and B are inside the main

NOTE Confidence: 0.769396449

edefef95-193a-43a7-aea7-60cb64cb9e98
00:25:28.564 --> 00:25:31.091
function and they are initialized to

NOTE Confidence: 0.769396449

83f91bb1-136d-43bc-a6c8-5f15d8c9a8ff
00:25:31.091 --> 00:25:36.610
a default value 0, then the shell.

NOTE Confidence: 0.769396449

12374ca5-43be-4e26-a606-b79aa803c8cf
00:25:36.610 --> 00:25:40.738
Creates a, I mean a space inside the

NOTE Confidence: 0.769396449

d2e55173-2593-477a-a651-ba9a1e7365ea
00:25:40.738 --> 00:25:44.408
data segment for these two variables.

NOTE Confidence: 0.769396449

9821dfa2-4d84-4aef-9f4a-7f7cf93935c4
00:25:44.410 --> 00:25:46.769
A goes for instance at the first

NOTE Confidence: 0.769396449

76df0449-253b-4836-bc26-4a0bc0d6b8fd
00:25:46.769 --> 00:25:49.470
position of the memory because into MP,

NOTE Confidence: 0.769396449

b434b46c-33f6-45f7-99a6-a53b63ce66fc
00:25:49.470 --> 00:25:51.978
assume that integer is 2 bytes,

NOTE Confidence: 0.769396449

85e3bfb3-cfc9-4922-a02c-386fbfdd044a
00:25:51.980 --> 00:25:55.427
so and the memory is an area of points.

NOTE Confidence: 0.769396449

5ef2b47d-7150-4f4c-83e5-3067b1e8c12c
00:25:55.430 --> 00:25:58.724
So the Avery bill becomes two

NOTE Confidence: 0.769396449

7ab1e9cf-2339-41f6-b5f6-cce00afdeec2
00:25:58.724 --> 00:26:01.890
bytes inside the data segment.

NOTE Confidence: 0.769396449

022f7376-9ede-4f38-ae2b-2024e9ad3eb5
00:26:01.890 --> 00:26:04.512
Right after that we have the

NOTE Confidence: 0.769396449

f5146da5-8c25-4700-be82-97df33324e87
00:26:04.512 --> 00:26:06.260
space for be variable,

NOTE Confidence: 0.769396449

90d7b884-fe34-4381-aefd-f740144cea06
00:26:06.260 --> 00:26:10.576
so this is the variable and then these names.

NOTE Confidence: 0.769396449

07c4e312-1316-4034-ab7c-c6906da94040
00:26:10.576 --> 00:26:13.780
In the opcode is replaced with

NOTE Confidence: 0.769396449

5e380001-e904-4cce-8419-c2e50a7ddf7a
00:26:13.889 --> 00:26:17.700
the address of the variables.

NOTE Confidence: 0.769396449

656685fa-5c07-4aa1-ac81-4b5864820427
00:26:17.700 --> 00:26:18.522
So basically,

NOTE Confidence: 0.769396449

51a0004b-09a6-4870-b0ff-96d400dfe0c4
00:26:18.522 --> 00:26:20.577
although inside the code we

NOTE Confidence: 0.769396449

1b56e99f-58b2-4afd-94a6-233e24b88375
00:26:20.577 --> 00:26:23.460
say A is equal to something,

NOTE Confidence: 0.769396449

5fefd8cf-d535-4a8e-85f9-d7e28d44e229
00:26:23.460 --> 00:26:25.584
but inside the outdoor a becomes

NOTE Confidence: 0.769396449

fbbfcb37-6a3f-48b8-8b9f-d68d2cecd7e8
00:26:25.584 --> 00:26:27.528
the address of that variable

NOTE Confidence: 0.769396449

236eb300-10ce-4939-b5bd-bc083d32c137
00:26:27.528 --> 00:26:29.328
inside the data segment.

NOTE Confidence: 0.935270416666667

7530fe60-0963-4665-a090-007b1a04be31
00:26:35.580 --> 00:26:38.258
But as you can see here, for the result,

NOTE Confidence: 0.935270416666667

f0941be4-4571-4c49-a2e0-82a6e20c9d75
00:26:38.258 --> 00:26:42.036
which is a global variable, but it is not

NOTE Confidence: 0.935270416666667

0231c48c-c3ea-42c5-b5c8-c5f271bee594
00:26:42.036 --> 00:26:44.580
initialized to any variable any value,

NOTE Confidence: 0.935270416666667

3e2e6943-2e10-4de0-87f2-cdf204062a0b
00:26:44.580 --> 00:26:47.588
so there is no space or memory location

NOTE Confidence: 0.935270416666667

6938e41c-a725-49b1-a265-836a9a5ffecb
00:26:47.588 --> 00:26:50.900
for the result variable inside outside.

NOTE Confidence: 0.736195512142857

edaf515d-293b-470a-a366-08d2ebb1b21c
00:26:54.170 --> 00:26:57.964
So the next segment is the UM,

NOTE Confidence: 0.736195512142857

b3da99dc-4a5d-48fa-a3ed-28e0c846110c
00:26:57.970 --> 00:27:00.685
DSS segment or block started

NOTE Confidence: 0.736195512142857

6411f7cc-d357-4385-9b86-8020fd412a2b
00:27:00.685 --> 00:27:02.314
by assemble segment.

NOTE Confidence: 0.736195512142857

02fde302-0223-4098-840f-6f406b0ffeb0
00:27:02.320 --> 00:27:04.784
So there is a history behind this name.

NOTE Confidence: 0.736195512142857

9d312849-afc0-4598-8db3-985381b726d3
00:27:04.790 --> 00:27:06.190
Why they chose this name?

NOTE Confidence: 0.736195512142857

c0759932-3cd6-4e02-b95c-4e8a253c3f01
00:27:06.190 --> 00:27:08.170
For that you can read the

NOTE Confidence: 0.736195512142857

62a4ac31-61b7-4275-952b-71c79c10bed2
00:27:08.170 --> 00:27:09.490
battle in the Wikipedia,

NOTE Confidence: 0.736195512142857

adde31c0-68c7-45f2-9205-84d06d4dfe09
00:27:09.490 --> 00:27:12.024
but the idea here is that all

NOTE Confidence: 0.736195512142857

ce05b456-6734-410a-b1ff-cb1a47c57290
00:27:12.024 --> 00:27:14.907
the other variables that are not

NOTE Confidence: 0.736195512142857

11980c94-9346-4dc9-9e7c-73df7212360f
00:27:14.907 --> 00:27:17.303
initialized or uninitialized in

NOTE Confidence: 0.736195512142857

2c48ff55-48a2-4916-9dca-82aaff9909af
00:27:17.303 --> 00:27:20.460
compile time goes to this area.

NOTE Confidence: 0.736195512142857

41f6a4ed-a477-46b4-802c-899839e0350f
00:27:20.460 --> 00:27:21.144
For instance,

NOTE Confidence: 0.736195512142857

4f20c912-23d5-4a34-910b-24bda6321edd
00:27:21.144 --> 00:27:22.854
the E result global variable

NOTE Confidence: 0.736195512142857

d4e58603-8b64-450d-a1ac-4841d7186bb9
00:27:22.854 --> 00:27:24.930
because it is not initialized.

NOTE Confidence: 0.736195512142857

f81842ae-0697-4c2e-bac9-5c9fe92390df
00:27:24.930 --> 00:27:28.050
It goes to this segment.

NOTE Confidence: 0.736195512142857

19701e20-6834-44cb-b57a-c4485853f16e
00:27:28.050 --> 00:27:29.478
Because it's an integer,

NOTE Confidence: 0.736195512142857

59375c34-bfad-403f-9c71-6ce40160e683
00:27:29.478 --> 00:27:31.263
so it takes two bytes,

NOTE Confidence: 0.736195512142857

04478870-f5cb-4f8f-9842-b07ca381fba4
00:27:31.270 --> 00:27:33.364
assuming that each integer in our

NOTE Confidence: 0.736195512142857

3249526d-4207-4651-ab17-97db804b072e
00:27:33.364 --> 00:27:36.036
system is 2 bytes and there is no,

NOTE Confidence: 0.736195512142857

33f96c20-7272-4162-8855-893c598af61a
00:27:36.036 --> 00:27:38.350
I mean defined initial value for that,

NOTE Confidence: 0.736195512142857

91f7b65c-34b3-4413-bedb-a24155ff18f2
00:27:38.350 --> 00:27:41.255
so we don't know what's the value.

NOTE Confidence: 0.736195512142857

3c2202c5-cd42-49f6-97e8-afa3bf00d5f6
00:27:41.260 --> 00:27:44.018
It could be any value or whatever

NOTE Confidence: 0.736195512142857

f572dade-0c11-4b9e-b0d3-24912d869608
00:27:44.018 --> 00:27:47.161
a resource in the memory from the

NOTE Confidence: 0.736195512142857

6e66018c-4de0-4811-91f7-705005689a2b
00:27:47.161 --> 00:27:49.975
previous run off any other programs.

NOTE Confidence: 0.736195512142857

83afea0b-7003-4627-b757-48d1548bf73c
00:27:49.980 --> 00:27:52.780
One thing is that it's this area is

NOTE Confidence: 0.736195512142857

c1830824-53cf-4ca1-bdf7-56345cae06e3
00:27:52.780 --> 00:27:57.708
very common for, for instance, the arrays.

NOTE Confidence: 0.736195512142857

02ce9182-a722-41da-88b0-71d515b8b24a
00:27:57.710 --> 00:27:59.330
Usually in our program we have,

NOTE Confidence: 0.736195512142857

74b61d2b-9234-4d80-8d31-a92eb9d75d27
00:27:59.330 --> 00:28:02.069
for instance, Karen.

NOTE Confidence: 0.736195512142857

4c5d3ac9-6e31-40a6-98ac-408c86448b71
00:28:02.070 --> 00:28:04.638
So you remember when we did

NOTE Confidence: 0.736195512142857

f0d1d7cf-709b-4e20-bd00-5ea343554fd4
00:28:04.638 --> 00:28:07.189
reading or writing from the file?

NOTE Confidence: 0.736195512142857

733c411d-df44-44a2-bbbe-c9db20e0c736
00:28:07.190 --> 00:28:09.790
We usually had a buffer.

NOTE Confidence: 0.736195512142857

e7230a3e-f306-4123-b2e3-d15b4448075f
00:28:09.790 --> 00:28:10.546
Of size,

NOTE Confidence: 0.736195512142857

80d55b31-846e-473c-b3dc-dc499a3066ec
00:28:10.546 --> 00:28:12.814
for instance 20 which is not

NOTE Confidence: 0.736195512142857

961f66e9-e669-4139-9a6e-105f74680c2c
00:28:12.814 --> 00:28:14.369
initialized to any value.

NOTE Confidence: 0.736195512142857

ac4ebe25-f907-4c8b-a805-f6c46c35df95
00:28:14.370 --> 00:28:15.316
So again,

NOTE Confidence: 0.736195512142857

287e008d-f649-46e9-9783-e90547577589
00:28:15.316 --> 00:28:17.681
I mean these uninitialized variable

NOTE Confidence: 0.736195512142857

e4cf800c-8be2-4268-83d1-274ea355eccb
00:28:17.681 --> 00:28:21.120
inside the main goes to the this segment.

NOTE Confidence: 0.69729427625

024a6ed3-36a3-4f13-a798-50f446fde0c3
00:28:26.630 --> 00:28:29.870
And then we have the heap and stack.

NOTE Confidence: 0.69729427625

44b128a3-7e22-479d-b6e1-0617ebcf49b4
00:28:29.870 --> 00:28:32.510
Those segments are kind of complex,

NOTE Confidence: 0.69729427625

c45c395b-c2dd-4bcd-90e3-c757933bd1e1
00:28:32.510 --> 00:28:35.084
so I I just wanted to get rid of

NOTE Confidence: 0.69729427625

6c1d6d96-506a-4a21-b93c-26e2dab8acc9
00:28:35.084 --> 00:28:37.942
the simplest segments and then go to

NOTE Confidence: 0.69729427625

c490aa5c-15d0-4066-bf66-93f975e8aa8a
00:28:37.942 --> 00:28:40.983
the stack and heap. So the shell.

NOTE Confidence: 0.69729427625

febda5fe-305b-4578-b4be-53d2eeb8b2f7
00:28:40.983 --> 00:28:45.456
Argument a part of the memory and then the

NOTE Confidence: 0.69729427625

4b394f51-c12a-4f7d-bacd-a29f6cac0a92
00:28:45.456 --> 00:28:48.869
environment variable part of the program.

NOTE Confidence: 0.69729427625

4ec7acb8-f390-424e-acb0-e0a1a61dc737
00:28:48.869 --> 00:28:52.103
Are located at the highest part

NOTE Confidence: 0.69729427625

60a20623-9813-4067-8500-e0cd9c7eb24f
00:28:52.103 --> 00:28:55.748
of the memory for the program.

NOTE Confidence: 0.69729427625

52eea9aa-adf1-4040-b022-1b5cdf121df0
00:28:55.750 --> 00:28:58.970
So for the shell argument, whatever the

NOTE Confidence: 0.69729427625

c8ed3011-00c9-4216-a862-12482d247e6e
00:28:58.970 --> 00:29:02.060
shell actually passes to your program.

NOTE Confidence: 0.69729427625

5e48ff72-7684-4433-9c3c-2703811dbe75
00:29:02.060 --> 00:29:04.812
A goes to this area at the highest

NOTE Confidence: 0.69729427625

b86fc1b2-8667-4fd9-b367-87aa61aba681
00:29:04.812 --> 00:29:06.420
confidence for our program.

NOTE Confidence: 0.69729427625

90d0ee83-eb3d-483f-b0c2-b4f59f7061fb
00:29:06.420 --> 00:29:09.010
We said that we can call this

NOTE Confidence: 0.69729427625

b95b5409-73b6-400b-9428-2e5687a5e64b
00:29:09.010 --> 00:29:11.144
program for two integer values.

NOTE Confidence: 0.69729427625

1fc8f7d6-8bfb-4df3-abb6-f0af58f7c003
00:29:11.144 --> 00:29:14.216
Plus the name of the program.

NOTE Confidence: 0.69729427625

6bcd410e-68e2-435a-a5db-699044378a51
00:29:14.220 --> 00:29:16.920
So we have three arguments.

NOTE Confidence: 0.69729427625

8556a4c3-e915-420c-8fd1-6c12b3d003aa
00:29:16.920 --> 00:29:21.575
So because these are pointers to the

NOTE Confidence: 0.69729427625

ad9be19c-b300-4072-a1ef-0e72c544d5ad
00:29:21.575 --> 00:29:24.690
list of characters, so here's the way.

NOTE Confidence: 0.69729427625

c57658cc-d567-482d-94a2-1f9855b08ab8
00:29:24.690 --> 00:29:26.910
Actually, the data for the arguments

NOTE Confidence: 0.69729427625

32ccc7b9-ff7d-4f00-ba0c-bb23a0b448a5
00:29:26.910 --> 00:29:29.599
going to be stored in the memory.

NOTE Confidence: 0.69729427625

648837bd-3b88-4b7a-9e57-ebe331a85368
00:29:29.600 --> 00:29:32.260
So the first a argument,

NOTE Confidence: 0.69729427625

11e2d757-cb52-4fba-a6ff-c007855ba668
00:29:32.260 --> 00:29:34.094
which is the name of the program,

NOTE Confidence: 0.69729427625

a0e94a03-d707-4d00-bebd-1f90e8bab2fe
00:29:34.100 --> 00:29:36.828
is the address to the list of characters.

NOTE Confidence: 0.69729427625

5769dbb5-cfe9-431b-8e27-8afb204786fa
00:29:36.830 --> 00:29:40.160
So this goes to the list of characters here.

NOTE Confidence: 0.69729427625

eeaccfd3-fc1b-4744-9944-e88f0018f0e8
00:29:40.160 --> 00:29:42.116
Dot forward slash main.

NOTE Confidence: 0.69729427625

630f37f6-1134-4c38-a158-27d25b092f36
00:29:42.116 --> 00:29:46.139
And then the last character of my program,

NOTE Confidence: 0.69729427625

9d45406b-012a-4ee2-8a5c-05aea0a806e7
00:29:46.140 --> 00:29:47.394
which is the,

NOTE Confidence: 0.69729427625

65d1d495-f9c1-40e4-bc56-5a570e69867c
00:29:47.394 --> 00:29:51.879
so the name of the program is main underline.

NOTE Confidence: 0.69729427625

8d710b3d-f73d-4598-aa93-43558b04f4f8
00:29:51.880 --> 00:29:55.130
At. So as a result,

NOTE Confidence: 0.69729427625

25888f0b-09be-4786-83be-e8d3e7693fd1
00:29:55.130 --> 00:29:59.600
at the correct folder so that.

NOTE Confidence: 0.69729427625

3c62daea-f766-4277-9107-1e0d3f56a6dc
00:29:59.600 --> 00:30:01.880
Forward slash and etc.

NOTE Confidence: 0.69729427625

7a876757-74ae-4762-a637-0f089240518d
00:30:01.880 --> 00:30:04.730
Up until the last character.

NOTE Confidence: 0.69729427625

882a7b85-ac41-4467-b9d9-831d7bfb9ac3
00:30:04.730 --> 00:30:08.514
This is the first argument to the program.

NOTE Confidence: 0.69729427625

87da3fe5-de9c-47f4-9ed6-a97890d91464
00:30:08.520 --> 00:30:12.027
The second argument is the second parameter,

NOTE Confidence: 0.69729427625

08e012fd-c9d1-46d4-bf61-0953b5d26aec
00:30:12.030 --> 00:30:14.067
so the address to the second parameter.

NOTE Confidence: 0.69729427625

556b1757-ecc1-4073-b51c-b75e32d3bb07
00:30:14.070 --> 00:30:14.898
Whatever you pass.

NOTE Confidence: 0.69729427625

4fda93f2-4371-4d3a-93ee-f10aed1818b3
00:30:14.898 --> 00:30:16.862
For instance, if you run this

NOTE Confidence: 0.69729427625

5875e6df-1d38-45db-bcf1-bdeccd738c08
00:30:16.862 --> 00:30:18.980
program for the 1st parameter 2.

NOTE Confidence: 0.69729427625

e48eb8fb-f458-4621-8396-8503c67be99c
00:30:18.980 --> 00:30:20.908
This location stores 2.

NOTE Confidence: 0.69729427625

5c561636-c929-48c2-8f91-579b0c573cc7
00:30:20.908 --> 00:30:23.800
And the second part of the

NOTE Confidence: 0.69729427625

4171754d-244e-4082-a69f-6b7713663dae
00:30:23.901 --> 00:30:26.117
third parameter is the.

NOTE Confidence: 0.69729427625

f9c69595-8429-4ce6-8762-639d065720e5
00:30:26.120 --> 00:30:27.960
Uh, for instance here,

NOTE Confidence: 0.69729427625

79c7d391-8d31-4114-a763-ff7f5af280f1
00:30:27.960 --> 00:30:28.420
fine.

NOTE Confidence: 0.69729427625

22d0077b-d258-49be-a5a3-422ce6bf6feb
00:30:28.420 --> 00:30:31.020
So basically at this memory

NOTE Confidence: 0.69729427625

491c0201-106d-4f98-b5e7-d424ad29eb96
00:30:31.020 --> 00:30:33.620
layout we call the program

NOTE Confidence: 0.69729427625

ecb1cff4-9a0a-4d03-a527-b3d0cffd61e5
00:30:33.717 --> 00:30:36.507
like this main underlying ad.

NOTE Confidence: 0.537900188

ab5c3df8-afdf-4552-b15d-0f5015a8e7af
00:30:39.700 --> 00:30:44.600
Space. At two space 5.

NOTE Confidence: 0.537900188

bdcabf42-929d-4183-81d9-ca0990bc86a0
00:30:44.600 --> 00:30:47.552
So when you run bootstrap your

NOTE Confidence: 0.537900188

e86cc225-a919-4e20-9dea-b3f2e2086c70
00:30:47.552 --> 00:30:49.520
program by this arguments.

NOTE Confidence: 0.537900188

c922877a-e228-4d51-9b15-50c61b489461
00:30:49.520 --> 00:30:52.936
This is the memory layout in the highest

NOTE Confidence: 0.537900188

a6dc0e58-f692-4bbf-b3f1-524894f30091
00:30:52.936 --> 00:30:56.380
part of the memory for your program.

NOTE Confidence: 0.537900188

b5ee935c-c252-4cc3-82ff-a82476dda504
00:30:56.380 --> 00:31:00.930
Plus I copy a copy of the

NOTE Confidence: 0.537900188

eb75baa7-a839-40d8-bc21-cfdd7422f435
00:31:00.930 --> 00:31:02.270
environment variables.

NOTE Confidence: 0.537900188

7c780adc-e0c4-442b-a815-84a082d23493
00:31:02.270 --> 00:31:04.950
We already said that.

NOTE Confidence: 0.537900188

02fe1a37-0028-4b8b-8114-e5be3a82a7ad
00:31:04.950 --> 00:31:07.360
We have a system called.

NOTE Confidence: 0.537900188

0aa3eb60-9495-43ff-a904-276dfb9b4433
00:31:07.360 --> 00:31:10.528
Environment variable, uh?

NOTE Confidence: 0.537900188

348d292c-cea7-4635-ae57-746f78cdfc52
00:31:10.528 --> 00:31:13.696
Which is it?

NOTE Confidence: 0.537900188

6e993cda-200b-4815-bffe-67e443ee5096
00:31:13.700 --> 00:31:15.836
Char star pointer.

NOTE Confidence: 0.537900188

d47fa859-91ed-4474-88d5-35be65f0befa
00:31:15.836 --> 00:31:20.402
It has a table storing all the camera

NOTE Confidence: 0.537900188

48dbbc61-dd51-415d-b65c-73accd351a9d
00:31:20.402 --> 00:31:22.970
variables and the shared value variables.

NOTE Confidence: 0.537900188

24390eec-b730-45e3-acbd-c7f299e52838
00:31:22.970 --> 00:31:25.490
The shell, when it bootstraps or program,

NOTE Confidence: 0.537900188

41312ffa-a714-4b16-bd93-efba8f499763
00:31:25.490 --> 00:31:27.527
make a copy of all those values

NOTE Confidence: 0.537900188

d305ef25-f82e-46a8-bab2-d619a11b61f9
00:31:27.527 --> 00:31:29.998
and put it inside the highest part

NOTE Confidence: 0.537900188

403a6d69-265a-4404-aad8-f575d95f9e2a
00:31:29.998 --> 00:31:32.284
of the memory for your program.

NOTE Confidence: 0.537900188

93e2b9aa-b0f9-47df-92cb-97e464b25917
00:31:32.290 --> 00:31:35.100
Again, it's just a copy.

NOTE Confidence: 0.537900188

d94934a2-b8b9-403d-b171-894c15e3c52f
00:31:35.100 --> 00:31:36.264
As a result,

NOTE Confidence: 0.537900188

5f8276ee-a778-4968-a2d9-e5194b0eb1f2
00:31:36.264 --> 00:31:38.592
if your program changes any value

NOTE Confidence: 0.537900188

ed75f43b-1d7e-4a59-8182-8a040fb5b175
00:31:38.592 --> 00:31:40.888
inside the environment variable,

NOTE Confidence: 0.537900188

e41ad369-ca28-4fd6-8497-8e80fb2826b7
00:31:40.890 --> 00:31:43.668
the impact just within your program,

NOTE Confidence: 0.537900188

ecfa03e8-aa02-4d39-a5af-0385a8167e0d
00:31:43.670 --> 00:31:46.930
it doesn't have any systemwide impact.

NOTE Confidence: 0.691764254933333

b37cd826-d751-482a-af81-6b2e9b247e1f
00:31:50.580 --> 00:31:54.596
And then, uh, we have two main part

NOTE Confidence: 0.691764254933333

a7895710-7000-4727-8e63-a6df4b325016
00:31:54.596 --> 00:31:58.838
of the memory stack and the heap.

NOTE Confidence: 0.691764254933333

baff28a3-d3dd-4dcf-ae77-de49b1901c8e
00:31:58.840 --> 00:32:01.606
So before I start this tag, any question

NOTE Confidence: 0.691764254933333

8ebb80ff-7a27-4f40-a4c1-f0de1b343395
00:32:01.606 --> 00:32:04.144
I'm ready to take your questions.

NOTE Confidence: 0.62697965

8e25589c-9cb5-49d3-ba10-7416f83de210
00:32:14.700 --> 00:32:18.907
So we have one question from Mesa.

NOTE Confidence: 0.62697965

6687e894-e054-405f-ba6b-95fd9407c7ad
00:32:18.910 --> 00:32:21.580
Basically she said what is the

NOTE Confidence: 0.62697965

60c40491-b6c4-4bf4-a13f-ea31107db434
00:32:21.580 --> 00:32:24.500
benefit of using the occean argv?

NOTE Confidence: 0.62697965

e224abc7-ed55-4db8-a3ac-0dbebc43e9f0
00:32:24.500 --> 00:32:27.860
Why we previously used to keep it empty?

NOTE Confidence: 0.62697965

53f3608e-263e-4092-9406-c0508499f6b5
00:32:27.860 --> 00:32:29.996
As I explained it gives you

NOTE Confidence: 0.62697965

052ec4ea-44de-4d3c-8e9e-f512997d34e4
00:32:29.996 --> 00:32:32.088
flexibility to run your program

NOTE Confidence: 0.62697965

fe53c84f-8481-4b6e-bcc6-e495d6aeca6d
00:32:32.088 --> 00:32:33.870
with different conditions.

NOTE Confidence: 0.63427569875

aa3dd02c-b5f8-4845-b1ea-5773c31374e9
00:32:36.030 --> 00:32:38.638
For instance, here I run my program boy,

NOTE Confidence: 0.63427569875

c4fe72fc-4621-4936-bd68-44086986de08
00:32:38.640 --> 00:32:42.440
a two input variables AMB.

NOTE Confidence: 0.63427569875

16e6b4fb-f35b-4308-9ab8-37acb5eed3c7
00:32:42.440 --> 00:32:45.185
So if you change amp the result is different.

NOTE Confidence: 0.63427569875

60953478-f22f-4b20-bf55-4ff81c6f4ef3
00:32:45.190 --> 00:32:50.329
So you are treating or uh I mean.

NOTE Confidence: 0.63427569875

da81787e-87ad-4a8a-928d-b424135ac808
00:32:50.329 --> 00:32:55.530
Uh, using your program as a function?

NOTE Confidence: 0.63427569875

460e780b-ea79-4c8d-aecc-c45fdae2de23
00:32:55.530 --> 00:32:57.482
For instance, one one,

NOTE Confidence: 0.63427569875

4ad25d96-7f0a-4d7c-8bc7-f233382746fa
00:32:57.482 --> 00:33:00.930
another very good example would be this.

NOTE Confidence: 0.63427569875

8f54ccb6-c1b3-46d7-bd36-ddf3c1bbef70
00:33:00.930 --> 00:33:03.818
What if I tell you to write a

NOTE Confidence: 0.63427569875

09cf2e86-0113-4452-968d-b23877b65cf1
00:33:03.818 --> 00:33:05.919
program that creates a file?

NOTE Confidence: 0.63427569875

0edbf0b8-e8b7-421f-8432-5d50aa392d40
00:33:05.920 --> 00:33:09.448
With a name that is given by the user.

NOTE Confidence: 0.63427569875

9402645f-6660-4d16-a2c2-69378fa533ff
00:33:09.450 --> 00:33:12.394
So then you can write a program such

NOTE Confidence: 0.63427569875

67cedfaf-c220-4d67-bdbc-4b78377ce48c
00:33:12.394 --> 00:33:15.959
As for instance main underlying create.

NOTE Confidence: 0.63427569875

1272640d-a6be-4596-ad12-41b7e76ac56a
00:33:15.960 --> 00:33:18.193
And then are the user passed the

NOTE Confidence: 0.63427569875

eac76223-8673-469c-8f71-54174ebbd79c
00:33:18.193 --> 00:33:20.529
name of the file for instance?

NOTE Confidence: 0.533707478

f48b4a22-c277-4335-92bf-c91b5f1915cb
00:33:22.740 --> 00:33:28.364
Hossein Diet dot T XT then your

NOTE Confidence: 0.533707478

e6d3e130-8b23-48d7-a6ca-f25a3daf81bd
00:33:28.364 --> 00:33:30.933
program creates a file that the name

NOTE Confidence: 0.533707478

a5c86531-7300-4f33-b910-a4791f133619
00:33:30.933 --> 00:33:33.707
of that file is given by the user.

NOTE Confidence: 0.533707478

d594f7f3-5bd5-4458-97c9-8ac192ee9a6b
00:33:33.710 --> 00:33:35.882
Instead of just hardcoding the name

NOTE Confidence: 0.533707478

2179c4f0-9439-4a39-97e9-251295d45449
00:33:35.882 --> 00:33:38.280
of the file inside your program,

NOTE Confidence: 0.533707478

a4837b62-eed6-48d3-9e9f-0588b086d1b8
00:33:38.280 --> 00:33:40.026
you're excepting the name of the

NOTE Confidence: 0.533707478

c13d724d-591b-4779-8b7c-2186a217cf4e
00:33:40.026 --> 00:33:42.090
program by the user as an argument.

NOTE Confidence: 0.533707478

65e656ff-281c-447d-8315-f65b11ec53f7
00:33:42.090 --> 00:33:44.976
This is one very good example.

NOTE Confidence: 0.58712624

69155cde-f955-4192-a43e-46ac64f6860a
00:33:49.220 --> 00:33:50.260
Lexus Mesa.

NOTE Confidence: 0.718566697391304

6e7ce73b-3df7-4b6b-9dd6-246e8bdddcda
00:33:56.130 --> 00:33:58.811
Yes, Ernest asks when you say program

NOTE Confidence: 0.718566697391304

1e8d144b-2ac0-4c96-8d0b-4fa637565b6e
00:33:58.811 --> 00:34:01.684
assumes that the whole memory is available

NOTE Confidence: 0.718566697391304

7ec0cdae-1314-4caa-96a6-4ae89564a985
00:34:01.684 --> 00:34:04.841
and shell arguments are saved on top of

NOTE Confidence: 0.718566697391304

d3d42ab4-d3f9-41c3-8917-40b4d74fcdc2
00:34:04.841 --> 00:34:08.778
memory controlled the memory management.

NOTE Confidence: 0.718566697391304

602b6249-83c2-4daa-8f9e-18737c17f772
00:34:08.780 --> 00:34:10.955
Basically, you don't have any

NOTE Confidence: 0.718566697391304

904f98c9-19b2-44c8-88b8-a582036e3b51
00:34:10.955 --> 00:34:12.695
control on memory management.

NOTE Confidence: 0.718566697391304

7cb688d3-780b-4d17-99ab-a41566a4c28e
00:34:12.700 --> 00:34:15.490
This is the way that the.

NOTE Confidence: 0.718566697391304

19e1bd3a-76f8-4dcd-beb8-05fd388bf823
00:34:15.490 --> 00:34:18.196
Uh, when they shell asked Colonel

NOTE Confidence: 0.718566697391304

6ff62a0d-e60e-4d50-a9c9-a29c20b3ce23
00:34:18.196 --> 00:34:20.000
to bootstrap your program.

NOTE Confidence: 0.718566697391304

25cd0033-140f-4b93-9e3a-22f4c17a627a
00:34:20.000 --> 00:34:22.022
This is the way that your

NOTE Confidence: 0.718566697391304

7db2d00d-d768-4596-9847-3f3b65acfe03
00:34:22.022 --> 00:34:23.256
programs become segmented.

NOTE Confidence: 0.718566697391304

34302f48-dd45-48b4-8bf4-0f912f2a4e77
00:34:23.256 --> 00:34:27.704
And because I mean goes into the memory.

NOTE Confidence: 0.718566697391304

6d764a66-a32d-4b49-930d-26fbca4612e6
00:34:27.710 --> 00:34:31.712
This information this memory layout helps

NOTE Confidence: 0.718566697391304

929a68b2-7c19-4428-b9a6-3f511b31e771
00:34:31.712 --> 00:34:35.876
you to do some trick inside your program.

NOTE Confidence: 0.718566697391304

c6f7e52b-727b-4268-bb8f-369322e54c91
00:34:35.880 --> 00:34:36.766
For instance,

NOTE Confidence: 0.718566697391304

77edb8b8-ec64-4b4b-a601-2d6db14bc1e5
00:34:36.766 --> 00:34:42.170
you can find what is the address of the,

NOTE Confidence: 0.718566697391304

47164a1b-e42c-4b9c-af85-5f80f9c8475b
00:34:42.170 --> 00:34:44.390
for instance the first part

NOTE Confidence: 0.718566697391304

9e402eed-d761-47fa-bf2c-da0e94fae925
00:34:44.390 --> 00:34:46.166
of the shell arguments.

NOTE Confidence: 0.718566697391304

cff633fa-c020-4150-af2d-e74922d8f697
00:34:46.170 --> 00:34:48.954
What is the address of some

NOTE Confidence: 0.718566697391304

cc1b56bc-6c64-4efd-817a-5aff58d4bda1
00:34:48.954 --> 00:34:50.810
variables inside this stack?

NOTE Confidence: 0.718566697391304

a33d372d-a928-4435-9971-0d44e17b4a09
00:34:50.810 --> 00:34:55.090
So this memory layout is helpful to

NOTE Confidence: 0.718566697391304

3ba599c8-27a0-4a05-a6fd-15cf48cdea33
00:34:55.090 --> 00:34:59.306
work with your program by addresses

NOTE Confidence: 0.718566697391304

3d3360ec-2d60-4d80-995b-c2b0b5bb15c6
00:34:59.306 --> 00:35:03.674
of your opcodes or your variables.

NOTE Confidence: 0.718566697391304

2d12d926-81bc-49f2-88c3-ac3bed77c975
00:35:03.680 --> 00:35:07.380
Uh. I will touch on that.

NOTE Confidence: 0.718566697391304

65b021dd-9bb0-491a-b592-7105fd39baaf
00:35:07.380 --> 00:35:09.220
I mean maybe next week,

NOTE Confidence: 0.718566697391304

5074c94c-b793-4f81-9a05-b4be652b0307
00:35:09.220 --> 00:35:13.402
but it's I mean this knowledge is

NOTE Confidence: 0.718566697391304

4444f49b-01cf-4360-8297-00f3222a034c
00:35:13.402 --> 00:35:16.306
helpful and you'll find some use

NOTE Confidence: 0.718566697391304

070734ba-e782-4716-af18-9f3104e5c613
00:35:16.306 --> 00:35:19.892
cases for knowing why we have to know

NOTE Confidence: 0.718566697391304

c0c545b2-de1d-429b-86be-da32fcf7fdba
00:35:19.892 --> 00:35:22.460
this memory layout of the program.

NOTE Confidence: 0.718566697391304

2d76e637-3ebe-43bf-9af4-ed47ab4b34f5
00:35:22.460 --> 00:35:25.044
Actually, right now you'll see one of them.

NOTE Confidence: 0.718566697391304

f5572299-99dc-406a-8a6a-5238edea82a8
00:35:25.050 --> 00:35:26.387
I mean, one of the use cases.

NOTE Confidence: 0.718566697391304

7d29ad81-b29d-4ff8-b27f-491fdc52bdd3
00:35:26.390 --> 00:35:27.002
I mean,

NOTE Confidence: 0.718566697391304

fe5053e0-6f8d-40ee-9008-97d6c7d861f1
00:35:27.002 --> 00:35:29.144
knowing what's the benefit of this knowledge?

NOTE Confidence: 0.776800641111111

36e70cbe-33b4-45bd-a1d9-e9dd8e587b90
00:35:33.580 --> 00:35:34.513
Makes sense harnish.

NOTE Confidence: 0.776800641111111

f76360e9-9da0-43b5-9f82-21ce70fbd26c
00:35:34.513 --> 00:35:36.379
So basically to answer your question,

NOTE Confidence: 0.776800641111111

32013690-abbd-4793-9e9a-e25ecd1e8855
00:35:36.380 --> 00:35:39.130
we don't have any control

NOTE Confidence: 0.776800641111111

57c7f6e3-3830-4f1a-8620-61f894585df0
00:35:39.130 --> 00:35:40.780
on this segmentation,

NOTE Confidence: 0.776800641111111

5e23b1e0-7a6f-4923-894f-a5f59442adb8
00:35:40.780 --> 00:35:43.108
but at least we know how

NOTE Confidence: 0.776800641111111

03929560-3970-4f99-af49-41911750c430
00:35:43.108 --> 00:35:44.272
this segmentation happens.

NOTE Confidence: 0.776800641111111

07bdf3ab-e734-4510-8b54-84b324c1e7bb
00:35:44.280 --> 00:35:47.940
And we can manipulate some of

NOTE Confidence: 0.776800641111111

ac060898-2fe9-43e3-a851-a9af80e853fc
00:35:47.940 --> 00:35:50.460
the variables by address of the

NOTE Confidence: 0.776800641111111

d45400a5-1970-4e40-a693-b3c46edda0eb
00:35:50.460 --> 00:35:52.140
variables inside the memory.

NOTE Confidence: 0.9151199

b2178991-ce5b-4f91-b17e-4b53d8e93121
00:35:54.610 --> 00:35:59.980
Yeah. So now let's go to this stack.

NOTE Confidence: 0.9151199

86c4355f-6674-49ec-9d73-f1a4c93c66b3
00:35:59.980 --> 00:36:04.474
So. The idea here is this is the

NOTE Confidence: 0.9151199

92b2ccf6-9b90-4977-9c75-f7115c60dcfc
00:36:04.474 --> 00:36:07.718
brilliant a I mean a feature of C

NOTE Confidence: 0.9151199

836bbd7a-ca2c-4034-9b6b-3c61cea757d3
00:36:07.718 --> 00:36:10.493
program that after the C program

NOTE Confidence: 0.9151199

eeba1541-3b72-447b-8040-b8211bb2a520
00:36:10.493 --> 00:36:13.189
other programs followed that.

NOTE Confidence: 0.9151199

6aab5473-9929-4f57-b760-65b2764f9569
00:36:13.190 --> 00:36:16.411
So the idea is that when you want

NOTE Confidence: 0.9151199

812157a9-df7d-470c-990b-3c64c1ccfd74
00:36:16.411 --> 00:36:20.680
to do a task. Which is very big.

NOTE Confidence: 0.9151199

fa09d127-30cb-46fd-89ec-645ec8ddf404
00:36:20.680 --> 00:36:23.242
It's better to break it into

NOTE Confidence: 0.9151199

1ac01b5a-c866-4208-a614-2847f60c0984
00:36:23.242 --> 00:36:27.530
some smaller tasks or subtasks.

NOTE Confidence: 0.9151199

98e9713c-bfd9-4c8a-aa74-d944e726df64
00:36:27.530 --> 00:36:31.142
And then you isolate the beauties or

NOTE Confidence: 0.9151199

12d47b6a-b7f5-4e6d-b362-7dd7a56ad820
00:36:31.142 --> 00:36:34.730
whatever is related to specific subtasks.

NOTE Confidence: 0.9151199

25d3098f-ecc3-4b71-bf0a-b96d39794476
00:36:34.730 --> 00:36:35.684
For instance,

NOTE Confidence: 0.9151199

7f7133a8-f02e-4792-b6a9-2a94f725f99c
00:36:35.684 --> 00:36:40.420
if you want to do addition of two numbers.

NOTE Confidence: 0.9151199

e06c70b7-bb87-416c-a07a-674b29532d67
00:36:40.420 --> 00:36:43.700
You have to first accept AMD and then

NOTE Confidence: 0.9151199

6c6463cd-8ccb-494f-9d0d-8049515c7a1e
00:36:43.700 --> 00:36:47.289
you have to convert it to because these

NOTE Confidence: 0.9151199

9d3048a1-f673-4dcc-93b2-972b71d65820
00:36:47.290 --> 00:36:49.600
are characters you have to convert

NOTE Confidence: 0.9151199

eda50056-a6cb-4bee-9944-23115a511bf8
00:36:49.600 --> 00:36:52.828
it from the CAD to integers and then

NOTE Confidence: 0.9151199

507c0317-7763-42f6-8d76-5d8e801d4ca1
00:36:52.828 --> 00:36:56.343
you have to do the actual edition and

NOTE Confidence: 0.9151199

2820f3a9-f56d-473f-8246-7c7f9d3a1037
00:36:56.343 --> 00:37:00.610
then you have to do the printing and attach.

NOTE Confidence: 0.9151199

08346809-64f8-4837-912a-7e63e630dc60
00:37:00.610 --> 00:37:02.086
So you see that I mean,

NOTE Confidence: 0.9151199

f203514b-c48b-4de6-a529-a0f589ad1a50
00:37:02.090 --> 00:37:04.634
these tasks are kind of separate

NOTE Confidence: 0.9151199

dee595b9-14e0-449a-9055-f79ccf613edc
00:37:04.634 --> 00:37:05.906
from each other,

NOTE Confidence: 0.9151199

b4286d8e-4ddd-4574-9ac0-1562c70950c8
00:37:05.910 --> 00:37:08.100
so you can say that.

NOTE Confidence: 0.9151199

b9bc4d3b-fe4b-4fcf-809f-bf5ca7544da8
00:37:08.100 --> 00:37:09.820
The task of converting integer

NOTE Confidence: 0.9151199

e070d9d3-b504-441d-bdfe-4b1ff6f4c895
00:37:09.820 --> 00:37:12.284
to a character to an integer can

NOTE Confidence: 0.9151199

acab852c-6f2c-4ab6-9d56-7871872caec2
00:37:12.284 --> 00:37:14.306
be considered as a sub task,

NOTE Confidence: 0.9151199

f8599b11-aaa0-40d0-9641-1c075ec63e84
00:37:14.310 --> 00:37:15.573
for instance, uh,

NOTE Confidence: 0.9151199

f7db9f1e-f16c-4ade-a900-edaadc792c31
00:37:15.573 --> 00:37:18.940
and you write a function for that one.

NOTE Confidence: 0.9151199

e8c6649d-3adf-4217-994d-f6138468b806
00:37:18.940 --> 00:37:21.180
And then the task of addition can be

NOTE Confidence: 0.9151199

c47b5c7d-fa1c-46f3-be73-1cf95821551b
00:37:21.180 --> 00:37:23.648
done by another sub task and you can

NOTE Confidence: 0.9151199

9fe6a8f9-a8ad-47f4-85c4-68a0760e5ac5
00:37:23.648 --> 00:37:25.959
write a function to do the addition,

NOTE Confidence: 0.9151199

dc3d41c3-481a-4ed4-9cf1-60dbb2e0302e
00:37:25.960 --> 00:37:28.439
just the addition of two and

NOTE Confidence: 0.9151199

e8038ec9-2d19-4798-9898-f580925a962d
00:37:28.439 --> 00:37:29.456
then they printing.

NOTE Confidence: 0.9151199

3c61f78c-6a81-4ee1-b466-f2f573c7bb43
00:37:29.456 --> 00:37:31.870
The result would be another sub task.

NOTE Confidence: 0.9151199

c78eafbf-d5b7-4c2f-8a64-222c4533ab50
00:37:31.870 --> 00:37:33.760
We can create a function that prints

NOTE Confidence: 0.9151199

32c09918-8a61-4746-8cc8-a4b11eade816
00:37:33.760 --> 00:37:35.980
the result to the terminal or whatever.

NOTE Confidence: 0.9151199

391f3c99-933b-4fe4-abab-a64b6eb72770
00:37:35.980 --> 00:37:38.020
You already know how to do that by

NOTE Confidence: 0.9151199

5c2a5829-6b60-43f6-b11b-166b021c49d2
00:37:38.020 --> 00:37:39.613
opening the terminal and writing

NOTE Confidence: 0.9151199

2c7ea631-f71e-4bfc-a548-8dd2ee224e4e
00:37:39.613 --> 00:37:40.639
to the terminal.

NOTE Confidence: 0.9151199

31847ab5-c475-48ca-b946-e5b3a83f485a
00:37:40.640 --> 00:37:42.642
So you can write another function to

NOTE Confidence: 0.9151199

d6521b76-9156-467f-8bf4-fb6a73fc347b
00:37:42.642 --> 00:37:45.342
do that for you. What's the benefit?

NOTE Confidence: 0.9151199

6ee24617-caea-49ba-91bf-ab95b2ddd6a4
00:37:45.342 --> 00:37:48.940
If you see error because you know

NOTE Confidence: 0.9151199

ff708686-ae5f-46b0-934f-6b3250708d55
00:37:49.043 --> 00:37:51.568
that that error comes from what

NOTE Confidence: 0.9151199

0d6103c1-5889-4b8a-9f44-9256cc8098bd
00:37:51.568 --> 00:37:53.704
part we can simply identify the

NOTE Confidence: 0.9151199

a4d72565-1af2-45f0-a8a5-6c2c2e91002f
00:37:53.704 --> 00:37:55.498
root cause of that error,

NOTE Confidence: 0.9151199

3749cfa6-c2f7-4b1c-9b94-4c6cca687337
00:37:55.500 --> 00:37:58.140
and I mean fix that error.

NOTE Confidence: 0.9151199

167ec68b-376b-490d-8630-f0a9b75200ef
00:37:58.140 --> 00:38:00.948
But if you do not do this sub

NOTE Confidence: 0.9151199

a27499ac-c1cf-4e32-a1d8-67e298428482
00:38:00.948 --> 00:38:03.499
tasking or modular programming,

NOTE Confidence: 0.9151199

c7a23fce-9a6a-4509-b598-d3eeee6a445d
00:38:03.500 --> 00:38:06.034
and if all the lines of code

NOTE Confidence: 0.9151199

6fd64f97-aa61-4b88-9747-0c9a36191d4c
00:38:06.034 --> 00:38:08.299
goes to one single file,

NOTE Confidence: 0.9151199

3dd5db93-687d-4362-bcbb-371a0de7a941
00:38:08.300 --> 00:38:10.274
then you're gonna have one millions

NOTE Confidence: 0.9151199

31e002ad-3390-4423-aae1-0110776612a6
00:38:10.274 --> 00:38:12.326
of lines of code and finding

NOTE Confidence: 0.9151199

057cd98b-8384-41d2-a1e8-00fc7b663a2c
00:38:12.326 --> 00:38:14.671
the error which part of the code

NOTE Confidence: 0.9151199

bbba60ce-f999-4831-9ad9-20c1cb3653d8
00:38:14.671 --> 00:38:16.559
actually I mean makes the error

NOTE Confidence: 0.9151199

3263bdee-9750-4bed-9545-b43d8d17808a
00:38:16.559 --> 00:38:18.044
and it's it's very hard.

NOTE Confidence: 0.9151199

7c012dbe-2844-4af7-9129-fa2dfc4f2129
00:38:18.050 --> 00:38:21.930
This is called modular programming.

NOTE Confidence: 0.9151199

7d60129e-bcb1-4635-be97-f23c446c448d
00:38:21.930 --> 00:38:24.660
And basically you subdivide the whole

NOTE Confidence: 0.9151199

a09b1d61-0998-47c4-8d1d-bd92837bf31e
00:38:24.660 --> 00:38:27.791
task into some modules and each module

NOTE Confidence: 0.9151199

2255bff4-bf1f-481b-af68-8f469523907c
00:38:27.791 --> 00:38:30.661
does this specific task and return the

NOTE Confidence: 0.9151199

8fb0083f-6ac2-4d45-aeb4-b75f023c1331
00:38:30.737 --> 00:38:33.760
dissolved and for instance the subtitle.

NOTE Confidence: 0.9151199

bbe0f6a9-698b-43b3-a533-b0a2747eb7ae
00:38:33.760 --> 00:38:35.952
The result of this First off tax goes

NOTE Confidence: 0.9151199

a1a082e8-532c-42bb-8e9b-56f72f7165d4
00:38:35.952 --> 00:38:38.375
to the input of the second sub task.

NOTE Confidence: 0.9151199

0a1b050d-e43c-48d6-865a-1099b34058fb
00:38:38.380 --> 00:38:40.580
The result of the second sub task goes

NOTE Confidence: 0.9151199

e47cf4c6-3151-445d-aad1-06d1f230a91e
00:38:40.580 --> 00:38:43.423
to the third sub tasks and attach it.

NOTE Confidence: 0.9151199

4467d747-048d-4472-9c9e-184b588599fe
00:38:43.423 --> 00:38:48.840
It's called a pipeline of. Subtests?

NOTE Confidence: 0.9151199

3b8c76da-df4d-4afd-a602-08823c6c5cac
00:38:48.840 --> 00:38:51.648
So this is available C program.

NOTE Confidence: 0.9151199

27fd2b8f-653c-4fbd-8bd7-e6913f22dd9e
00:38:51.650 --> 00:38:54.030
So for instance you can see here

NOTE Confidence: 0.9151199

3bcd9ab3-094c-4745-84e1-9d0804c88312
00:38:54.030 --> 00:38:56.677
that I accept and be as a variable,

NOTE Confidence: 0.9151199

1c0de876-3330-481a-8f86-f7833d423d22
00:38:56.680 --> 00:38:57.846
initially 0.

NOTE Confidence: 0.9151199

9c63422c-3973-4c6b-949f-94174fb1a293
00:38:57.846 --> 00:39:00.598
Then I wanted to initialize

NOTE Confidence: 0.9151199

3303fc03-0c7f-4f99-8b96-75e9d7ba70d8
00:39:00.598 --> 00:39:02.688
these variables with the values

NOTE Confidence: 0.9151199

22d48a1e-0e50-45be-a7b1-940ee1865d0e
00:39:02.688 --> 00:39:05.129
that is passed by the shell.

NOTE Confidence: 0.9151199

ca4507c2-6823-4687-946b-64cad68c4844
00:39:05.130 --> 00:39:08.328
But these values are in characters.

NOTE Confidence: 0.9151199

10cf67e4-bc08-4515-92cf-d65ee1b51214
00:39:08.330 --> 00:39:11.242
I have to transfer it to integer

NOTE Confidence: 0.9151199

5761ed84-4c7d-48ee-9222-023a41a88222
00:39:11.242 --> 00:39:13.799
value converted to integer values.

NOTE Confidence: 0.9151199

6c29f66a-1878-43d8-85c2-11acf5544039
00:39:13.800 --> 00:39:16.698
So we can write another function,

NOTE Confidence: 0.9151199

fd2b5ac0-424a-453a-a3cd-b27c62c6a996
00:39:16.700 --> 00:39:19.544
ask you to integer.

NOTE Confidence: 0.9151199

b1ee5e71-60bc-458f-8f40-f3db0babc47a
00:39:19.544 --> 00:39:20.966
Another file,

NOTE Confidence: 0.9151199

ac792add-c9b6-4393-aeda-1a8ca75c31e7
00:39:20.970 --> 00:39:24.597
so here is the new file that I for

NOTE Confidence: 0.9151199

91245bb6-570c-4888-9bb5-8e9d1d551ef7
00:39:24.597 --> 00:39:26.130
instance we write a.

NOTE Confidence: 0.9151199

6cf3a86c-4da7-415d-9d36-d95261e219ae
00:39:26.130 --> 00:39:28.980
Program that does this conversion.

NOTE Confidence: 0.780593655625

6d79815d-37ed-48c5-a83f-34ee0d1aee26
00:39:28.980 --> 00:39:32.156
It accepts the string of characters and then

NOTE Confidence: 0.780593655625

fa955e00-4552-4450-8f1b-9d7ce7f64951
00:39:32.156 --> 00:39:35.709
it does something to convert it to integer.

NOTE Confidence: 0.780593655625

69bab912-981e-4d1e-8925-eca6e18499ab
00:39:35.710 --> 00:39:37.048
And as you can see here,

NOTE Confidence: 0.780593655625

86d475c0-e6a8-4cb7-ad4d-d5870e4795b4
00:39:37.050 --> 00:39:38.762
even this function doesn't

NOTE Confidence: 0.780593655625

a12f1650-2068-4f06-9fad-db02767c5633
00:39:38.762 --> 00:39:40.474
do the actual conversion.

NOTE Confidence: 0.780593655625

046cd1ed-dead-486f-8c91-964f2e60a3fb
00:39:40.480 --> 00:39:42.860
It calls another function to

NOTE Confidence: 0.780593655625

5a5cd942-aeeb-4880-a76d-1cf49ae317ee
00:39:42.860 --> 00:39:44.764
do the actual conversion.

NOTE Confidence: 0.780593655625

e9cf71b6-84f7-4965-8344-aa36463e7b8c
00:39:44.770 --> 00:39:48.459
And then this function does the conversion.

NOTE Confidence: 0.780593655625

6f160dcf-eb7f-439f-a6f9-983acbd3f24e
00:39:48.460 --> 00:39:51.712
When it's done, it returns the

NOTE Confidence: 0.780593655625

32ed9bf9-ae09-429f-aa6c-0328eac26de9
00:39:51.712 --> 00:39:53.338
converted value here.

NOTE Confidence: 0.780593655625

0d89d64f-437d-4681-9dcb-ac7e22c27950
00:39:53.340 --> 00:39:55.684
And then, uh, we may have some lines

NOTE Confidence: 0.780593655625

2e37cad5-bfb3-4001-9f7e-414e39e7bebe
00:39:55.684 --> 00:39:58.276
of code here and then when it's done,

NOTE Confidence: 0.780593655625

1f2eefb1-8a31-4739-8428-88563147675c
00:39:58.280 --> 00:40:00.130
come back to the original.

NOTE Confidence: 0.7686496025

9d47d9e4-39d8-4d1f-b00e-1baed49cccb0
00:40:02.150 --> 00:40:04.698
Point out the function that we did

NOTE Confidence: 0.7686496025

67186406-0081-4235-ac4e-79f81b6f418a
00:40:04.698 --> 00:40:07.645
the call to do the conversion of

NOTE Confidence: 0.7686496025

e55f41aa-5178-4cd8-9012-c23cde0004ca
00:40:07.645 --> 00:40:10.303
the list of characters to integers.

NOTE Confidence: 0.7686496025

b3e9f429-eb19-437d-aa79-175c815bcb73
00:40:10.310 --> 00:40:12.730
So whatever error where is

NOTE Confidence: 0.7686496025

405aa25c-5b87-4775-9ab0-299a8ce10dd8
00:40:12.730 --> 00:40:15.150
it raised by the conversion,

NOTE Confidence: 0.7686496025

1cecca06-4235-41bf-a484-71b578e20cb4
00:40:15.150 --> 00:40:16.510
it's not in my program,

NOTE Confidence: 0.7686496025

0ecb1544-2d85-4417-990c-1e35e34d72cb
00:40:16.510 --> 00:40:19.038
it's in this program or in this program,

NOTE Confidence: 0.7686496025

06fc259e-12dd-4992-9a1f-3942e093bf9f
00:40:19.040 --> 00:40:21.035
so you can simply pinpoint the problem.

NOTE Confidence: 0.741955604285714

706af7f4-ecfe-495b-a5f7-d85eaaa9b502
00:40:23.060 --> 00:40:26.676
So. In this way we call the function

NOTE Confidence: 0.741955604285714

45abb3a7-8efe-4024-a355-27b21d7c1b2e
00:40:26.676 --> 00:40:30.428
or the code that calls another part

NOTE Confidence: 0.741955604285714

6525a61e-c7d7-446b-99dc-90e2f85c523b
00:40:30.428 --> 00:40:34.010
of the code or function caller.

NOTE Confidence: 0.87600733

ea534198-1448-449a-bc13-bcbef7befa4f
00:40:37.360 --> 00:40:39.621
And then the part of the code

NOTE Confidence: 0.87600733

55e97c50-05f3-4de0-98c1-14edef2ee366
00:40:39.621 --> 00:40:41.681
that is called by another part

NOTE Confidence: 0.87600733

7cda5333-4b38-4ed2-a02b-f6f4b14a8130
00:40:41.681 --> 00:40:44.090
of the code is called colleague.

NOTE Confidence: 0.839070396363636

5e52bd19-1d38-47d7-92ee-f71d394e5672
00:40:49.030 --> 00:40:51.328
So you see here that the

NOTE Confidence: 0.839070396363636

1cdb6cf9-def8-491c-bdb7-09ca1efd8a8c
00:40:51.328 --> 00:40:53.470
main program is the color.

NOTE Confidence: 0.839070396363636

9046ade0-e8a3-4d66-8483-f7d9faec2a44
00:40:53.470 --> 00:40:56.428
And the ATI is the colleague.

NOTE Confidence: 0.839070396363636

08c7d60e-a25c-4347-8b23-2969b1bf5558
00:40:56.430 --> 00:41:00.539
Also, the ATI is the color of.

NOTE Confidence: 0.65755054

4e1136dd-87cf-4937-95ae-a098a83c4a42
00:41:02.740 --> 00:41:04.500
This is strange, too long.

NOTE Confidence: 0.65755054

fa659126-9868-417d-acda-2c6f4ffb1b02
00:41:04.500 --> 00:41:09.268
This string too long function and this time.

NOTE Confidence: 0.65755054

bffce2d1-f256-40d6-b540-ba56b760aad1
00:41:09.270 --> 00:41:12.590
This is the call league of each one,

NOTE Confidence: 0.65755054

1c75dde7-722c-4f0b-b835-dfa16484d323
00:41:12.590 --> 00:41:15.986
so a string 2L string too

NOTE Confidence: 0.65755054

eb83e46b-126c-4f29-a977-42dfedb1856e
00:41:15.986 --> 00:41:19.259
long is the quality of oil.

NOTE Confidence: 0.65755054

98892cac-620d-453c-850a-4525ab661e15
00:41:19.260 --> 00:41:21.432
And then the HY is the

NOTE Confidence: 0.65755054

cdb185bd-097c-452d-b1ae-afbc7ae6c711
00:41:21.432 --> 00:41:23.630
colleague of the main program.

NOTE Confidence: 0.89641804

49c3dbac-3cee-4ce5-acce-8f8114175312
00:41:25.770 --> 00:41:26.240
So.

NOTE Confidence: 0.6834125752

00d97f70-9448-40da-8867-629d118ae998
00:41:28.520 --> 00:41:31.408
What is important here?

NOTE Confidence: 0.6834125752

041b795c-1669-4f75-8c41-e0d46efb5da0
00:41:31.408 --> 00:41:34.800
Uh, in this sequence?

NOTE Confidence: 0.6834125752

5dd381fa-7e64-48b3-b1d5-10df9bb06d9a
00:41:34.800 --> 00:41:37.470
The important thing here is this.

NOTE Confidence: 0.6834125752

cef3839a-8730-49f3-805f-440cca1a3d1a
00:41:37.470 --> 00:41:42.806
When we do a call to their colleague.

NOTE Confidence: 0.6834125752

3e00f079-30e1-4255-a0e7-a02e5c3eec1d
00:41:42.810 --> 00:41:45.552
We have to keep track of

NOTE Confidence: 0.6834125752

cc8491b7-a825-464f-af64-e685e4d2c1d4
00:41:45.552 --> 00:41:46.923
their returning point,

NOTE Confidence: 0.6834125752

42abfbe4-24fe-4165-8651-894bf6053245
00:41:46.930 --> 00:41:50.535
otherwise we get lost in a colleague.

NOTE Confidence: 0.6834125752

98479b0c-d987-43b6-a6d3-7c9a6c0aa21d
00:41:50.540 --> 00:41:53.244
So you can see here that when we

NOTE Confidence: 0.6834125752

d62b8f05-8aaf-4373-9149-ed2afb0011eb
00:41:53.244 --> 00:41:56.478
do a call from our main program.

NOTE Confidence: 0.6834125752

de4e838e-dc12-4d6f-9691-ba4533733ff5
00:41:56.480 --> 00:42:00.270
To the calie too I.

NOTE Confidence: 0.6834125752

75d473f9-b1d7-4e2d-961d-190f42866949
00:42:00.270 --> 00:42:03.450
And when this function is done.

NOTE Confidence: 0.6834125752

443f4ecc-ae1c-4165-94ef-06fe2eca67d7
00:42:03.450 --> 00:42:05.816
We have to get back to the

NOTE Confidence: 0.6834125752

c982800e-7ac5-46e8-a9aa-ad23444d88e5
00:42:05.816 --> 00:42:08.018
point that we did the call.

NOTE Confidence: 0.6834125752

3e4ad07d-13a1-4112-861f-9c2cc8dca24c
00:42:08.020 --> 00:42:09.256
But where we?

NOTE Confidence: 0.6834125752

ac9b9ced-5964-4a0f-a5e5-c063e4db6afe
00:42:09.256 --> 00:42:12.631
I mean where we have the address of

NOTE Confidence: 0.6834125752

96f755c1-a31e-4324-b56c-dee5037f7a29
00:42:12.631 --> 00:42:15.375
the opcode that we did the call.

NOTE Confidence: 0.890105343333333

e01c8ec9-5f0a-47bf-adfe-422cf7f49340
00:42:18.160 --> 00:42:22.299
So that's the. Idea behind this

NOTE Confidence: 0.890105343333333

5bbfdb96-7f06-4457-971d-cfd83fcd10e3
00:42:22.299 --> 00:42:26.030
stack so when you start a trip?

NOTE Confidence: 0.890105343333333

2f1cfe6e-0f23-426a-9328-df74b15de359
00:42:26.030 --> 00:42:29.060
And you want to go somewhere.

NOTE Confidence: 0.890105343333333

8bd6690b-f770-4b7c-aaff-a663da24701e
00:42:29.060 --> 00:42:31.940
Uh, it's not like a human individual for our.

NOTE Confidence: 0.890105343333333

3f78dddf-cb5f-4b42-8fa3-034e14837a86
00:42:31.940 --> 00:42:35.066
For the programs, the programs are

NOTE Confidence: 0.890105343333333

2fe01d10-e1f7-4a98-a65f-b3902421c41b
00:42:35.066 --> 00:42:38.529
blind when they go to somewhere.

NOTE Confidence: 0.890105343333333

048dcbb0-8ea0-427c-a59c-b47fd939ee46
00:42:38.530 --> 00:42:40.874
If they want to get back to the

NOTE Confidence: 0.890105343333333

7aefdf12-f3b0-424a-bc6f-b39c83ae9155
00:42:40.874 --> 00:42:43.069
point that they started the trip,

NOTE Confidence: 0.890105343333333

c9567c81-3334-42b9-9d8d-6fe591263635
00:42:43.070 --> 00:42:45.764
they have to have the address

NOTE Confidence: 0.890105343333333

1ee197d3-681f-4f1e-bde9-2c171c192fbb
00:42:45.764 --> 00:42:49.020
of the return point with them.

NOTE Confidence: 0.890105343333333

db89ad8d-cd31-4c4f-93ba-c9f139812ed7
00:42:49.020 --> 00:42:54.130
So the program should have a knapsack.

NOTE Confidence: 0.890105343333333

e0ffb278-6ff1-4191-8aa2-9e0cd1b5f6f2
00:42:54.130 --> 00:42:56.832
And when they start a trip at

NOTE Confidence: 0.890105343333333

c5843c32-cc52-4cd8-81e5-f7657131d919
00:42:56.832 --> 00:42:58.750
first before starting the trip,

NOTE Confidence: 0.890105343333333

9514e4cb-eafb-4fc9-aef0-b9b2094c2bc5
00:42:58.750 --> 00:43:02.075
they have to store the address of

NOTE Confidence: 0.890105343333333

d8a27eee-39da-44c3-b6ef-211773988a93
00:43:02.075 --> 00:43:04.478
the return so the home address.

NOTE Confidence: 0.845057211

db95c9f7-1ec8-4a2e-9fcb-7c9d2663a37b
00:43:08.350 --> 00:43:10.270
And then they start the

NOTE Confidence: 0.845057211

b8d6894d-784a-49a4-8c9c-7d24ca344442
00:43:10.270 --> 00:43:12.190
trip and when they trip.

NOTE Confidence: 0.845057211

88adedb5-1ba1-40d3-b2bc-1431c5ca0334
00:43:12.190 --> 00:43:15.062
Is done, they look at their address that

NOTE Confidence: 0.845057211

6146a406-bdd7-48bf-a609-7002e8a26396
00:43:15.062 --> 00:43:17.938
they have with them and then they came.

NOTE Confidence: 0.845057211

87bca2c7-cff7-49b5-8df5-7b02bc5a3df2
00:43:17.940 --> 00:43:20.410
Get back to the home.

NOTE Confidence: 0.845057211

f649d15d-fac9-441e-9497-7ef01e2e93e4
00:43:20.410 --> 00:43:23.202
Actually, in this movie.

NOTE Confidence: 0.845057211

effe3781-85c3-4148-a8e3-1925d3dc5b6f
00:43:23.202 --> 00:43:26.710
Ah, if you watch the movie.

NOTE Confidence: 0.845057211

88e64388-57c3-496c-9214-1aac86ba19f4
00:43:26.710 --> 00:43:29.146
They I mean, the character couldn't

NOTE Confidence: 0.845057211

42476064-01ef-4b6a-99bd-48c3340fc1fe
00:43:29.146 --> 00:43:32.736
find the path to return to home and etc.

NOTE Confidence: 0.845057211

204f8f0a-af13-4bfa-8b5b-1d690a0657f5
00:43:32.736 --> 00:43:36.544
So if you watch this movie you can

NOTE Confidence: 0.845057211

b9cfe2c9-9e9a-4e7b-be87-8b933feaa179
00:43:36.550 --> 00:43:40.576
understand this topic, I mean better.

NOTE Confidence: 0.845057211

35ac9367-69d0-4c0e-8ac9-99e82e24f892
00:43:40.580 --> 00:43:44.612
So that's the idea of the having is

NOTE Confidence: 0.845057211

70fff835-d85f-4d5b-bd10-9a5dd3045ddb
00:43:44.612 --> 00:43:48.408
knapsack to store the return address.

NOTE Confidence: 0.845057211

0397421f-8c39-48f6-a7c5-6ac2a46cc59d
00:43:48.410 --> 00:43:53.150
So here is an example. So.

NOTE Confidence: 0.845057211

400116df-7bbf-4549-b0e6-bbc5c55df674
00:43:53.150 --> 00:43:55.796
At some point at the first time,

NOTE Confidence: 0.845057211

b6bb423c-4bdc-4ac2-9093-be297699719a
00:43:55.800 --> 00:43:58.020
the processor knows the entry point

NOTE Confidence: 0.845057211

929b0fb7-9922-40e5-8f5c-eb6ed8cd9994
00:43:58.020 --> 00:44:00.649
or the first opcode of your program.

NOTE Confidence: 0.845057211

8fdf4b84-851b-4dc2-8d61-ae78cca3751d
00:44:00.650 --> 00:44:02.762
Inside the code segment.

NOTE Confidence: 0.845057211

f165622b-068d-4eb6-affb-24e4de53b215
00:44:02.762 --> 00:44:05.402
It executes this execute this,

NOTE Confidence: 0.845057211

04612c3b-7b77-4ca9-b0e3-108849f1dcd0
00:44:05.410 --> 00:44:08.980
execute this and then it reaches here.

NOTE Confidence: 0.845057211

cd4c0016-7521-42d3-953a-decee69c226f
00:44:08.980 --> 00:44:10.699
Before executing this,

NOTE Confidence: 0.845057211

e1d9d381-5c07-4951-a5aa-674513eb3cff
00:44:10.699 --> 00:44:14.137
which is jumping to another function,

NOTE Confidence: 0.845057211

41533f73-3029-465f-90bc-2d970ce287b7
00:44:14.140 --> 00:44:16.228
this is the function that we have to jump.

NOTE Confidence: 0.845057211

404fd75d-cbcb-4bac-9e66-82b4d475b32d
00:44:16.230 --> 00:44:18.578
The process should jump.

NOTE Confidence: 0.845057211

a46ab2b5-d75b-41c8-adb8-27df7d62c9e9
00:44:18.580 --> 00:44:20.048
Before doing the jump,

NOTE Confidence: 0.845057211

499fd821-ba13-4d0f-9854-1336c16f5a88
00:44:20.048 --> 00:44:23.139
it is stores the address of the return.

NOTE Confidence: 0.845057211

0c8ada15-c71c-4174-8188-a36fa891976f
00:44:23.140 --> 00:44:25.192
So what would be the return

NOTE Confidence: 0.845057211

1db03013-f690-4d33-a5e8-78410e79a43e
00:44:25.192 --> 00:44:27.090
address right after this opcode?

NOTE Confidence: 0.845057211

c9ac8e35-0035-42d4-939b-0d084b0ea185
00:44:27.090 --> 00:44:30.006
The address of the next statement?

NOTE Confidence: 0.845057211

ac36371d-d86f-4410-ad7c-feecebfd8224
00:44:30.010 --> 00:44:33.646
So before doing the job it is stored the

NOTE Confidence: 0.845057211

b11c4505-2c64-4da2-8e9d-f21a7ca09e3e
00:44:33.646 --> 00:44:36.589
address after return in its knapsack.

NOTE Confidence: 0.845057211

261eb601-6fff-4dd9-8cdf-270d758087b2
00:44:36.590 --> 00:44:38.216
And then it does the job.

NOTE Confidence: 0.822704454

2e7b5aca-9984-4120-939a-06c7cf71f4c6
00:44:41.390 --> 00:44:42.520
When it does the job,

NOTE Confidence: 0.822704454

6082da19-1fc4-46e0-9862-d6d867007ad6
00:44:42.520 --> 00:44:44.310
it goes to this instruction.

NOTE Confidence: 0.822704454

48c0b5f2-a7e1-4262-9acb-ecb71e159e78
00:44:44.310 --> 00:44:47.124
The processor is, I mean execute

NOTE Confidence: 0.822704454

92094413-cef4-4f22-8512-e8421a00c37a
00:44:47.124 --> 00:44:49.470
the whatever instruction is here,

NOTE Confidence: 0.822704454

6ca8b7ae-d259-47ba-ad54-6dfc9b5c9051
00:44:49.470 --> 00:44:52.578
but it is confident that at

NOTE Confidence: 0.822704454

635cfff6-afc8-4673-bcee-b5a53bc3651a
00:44:52.578 --> 00:44:54.650
any point whatever happens,

NOTE Confidence: 0.822704454

d67efa36-92c0-4b2a-922a-190907b58d2d
00:44:54.650 --> 00:44:56.420
it has the address of the

NOTE Confidence: 0.822704454

a69751d5-7937-4b0a-a7e5-15fc861ba1c1
00:44:56.420 --> 00:44:57.931
return point, so it can.

NOTE Confidence: 0.822704454

931af95d-83a8-4a80-bb2d-daabfa6aa361
00:44:57.931 --> 00:45:00.080
The program can simply get back to

NOTE Confidence: 0.822704454

7ab95df3-d375-408c-9153-719dbef03f0c
00:45:00.155 --> 00:45:02.479
the point that that does the call.

NOTE Confidence: 0.806573403076923

bc0fb6d7-df4b-47b7-ae38-116727a16910
00:45:04.750 --> 00:45:07.662
So at this point it does some statement

NOTE Confidence: 0.806573403076923

12d50ece-4404-4b65-83c1-825b5fc3d4e6
00:45:07.662 --> 00:45:10.070
and then reaches another jump.

NOTE Confidence: 0.793328634

a78f5e95-1909-4323-8783-7493cc6dcd54
00:45:12.080 --> 00:45:14.475
Before doing another job to

NOTE Confidence: 0.793328634

a0856d83-fa61-4b0f-88db-ccb246b6da4a
00:45:14.475 --> 00:45:16.870
another part of the code,

NOTE Confidence: 0.793328634

92a8db22-6aa2-4a9f-8fe4-b3ca8b4ea301
00:45:16.870 --> 00:45:20.901
it's first stores the return point or the

NOTE Confidence: 0.793328634

c1482e69-72a9-4bbc-9282-4ebe05df06ca
00:45:20.901 --> 00:45:24.880
opcode right after the upgrade of the car.

NOTE Confidence: 0.793328634

7f76b070-6c05-40eb-b2db-e3ecfca9d4ee
00:45:24.880 --> 00:45:28.116
So it stores the return address, but this

NOTE Confidence: 0.793328634

032a8e11-56fb-4084-8c4d-f5b045bcbb51
00:45:28.116 --> 00:45:30.774
return address is the second address.

NOTE Confidence: 0.793328634

c3b175d7-d0d8-49b8-b912-9603f7b54036
00:45:30.780 --> 00:45:33.800
And it put it on top of this knapsack because

NOTE Confidence: 0.793328634

b9850905-91c4-4af3-93e2-0096012e33df
00:45:33.872 --> 00:45:36.560
in your backpack when you saw something,

NOTE Confidence: 0.793328634

85f373e4-da21-4f41-9242-f5dd5b8379f1
00:45:36.560 --> 00:45:39.424
you put something on top of each other.

NOTE Confidence: 0.793328634

020769d4-65de-45dd-bfca-7cd03eb30ac8
00:45:39.430 --> 00:45:40.780
So here is the same.

NOTE Confidence: 0.793328634

d98afd96-8c0a-4f8a-9cb7-8ac898c30666
00:45:40.780 --> 00:45:41.936
You have an upside,

NOTE Confidence: 0.793328634

fa583e59-4b2f-4587-8d6e-05d9d10ba538
00:45:41.936 --> 00:45:44.332
you just keep the address of the return

NOTE Confidence: 0.793328634

bb646e63-c6c3-4fbd-9de8-ea4929035b40
00:45:44.332 --> 00:45:46.740
so you store the first address and then

NOTE Confidence: 0.793328634

9f5a08d4-f002-4a58-a44f-f1495e2e81c2
00:45:46.800 --> 00:45:49.064
you want to store the second address so

NOTE Confidence: 0.793328634

0edca11e-e22b-44b8-b5f6-5afa5f83abd3
00:45:49.064 --> 00:45:52.048
it goes on top of the previous address.

NOTE Confidence: 0.793328634

3c5324e2-f364-480c-9094-f03ce6319ac5
00:45:52.050 --> 00:45:54.060
And then now you are confident

NOTE Confidence: 0.793328634

a441e49c-44d2-4532-a690-b26c9699c4dc
00:45:54.060 --> 00:45:56.130
that you can do the call.

NOTE Confidence: 0.793328634

4eabe888-12cc-4ae0-b795-042d3318c35b
00:45:56.130 --> 00:45:59.098
You can do the jump without getting lost.

NOTE Confidence: 0.770627114285714

e9c5462e-20ee-4c81-bf7b-a5bfdf8082ed
00:46:01.370 --> 00:46:04.359
And then you go to the college.

NOTE Confidence: 0.770627114285714

e9acc6cc-ab52-4183-9ddb-0522a550adf5
00:46:04.360 --> 00:46:05.656
You do this statement.

NOTE Confidence: 0.770627114285714

9163a48f-75a6-4bc6-91eb-896c0ff4ea3e
00:46:05.656 --> 00:46:08.082
You do the conversion of the ASCII

NOTE Confidence: 0.770627114285714

4664908a-1241-4356-957e-16296f48bb19
00:46:08.082 --> 00:46:10.147
characters to the integer values,

NOTE Confidence: 0.770627114285714

c92ee413-7b8f-4312-8181-a91cff294259
00:46:10.150 --> 00:46:11.551
and you're done.

NOTE Confidence: 0.770627114285714

b22560a2-dd3c-42f1-8799-64ccafc30a92
00:46:11.551 --> 00:46:13.886
Now you want to return.

NOTE Confidence: 0.770627114285714

299628f9-aa46-4fca-a475-33e9d3bfdbf5
00:46:13.890 --> 00:46:15.045
Return to where?

NOTE Confidence: 0.770627114285714

6d3965d9-b43c-4f95-ba3a-6a1f84df15dd
00:46:15.045 --> 00:46:16.970
What part of the code?

NOTE Confidence: 0.770627114285714

08a97331-0763-4051-85f5-5c73bb4e16ce
00:46:16.970 --> 00:46:19.232
You already know. Where is the

NOTE Confidence: 0.770627114285714

5018f793-55bc-4956-ba94-323a925c1038
00:46:19.232 --> 00:46:21.828
address of the return your NAP side.

NOTE Confidence: 0.770627114285714

d5d12121-a5d3-4c37-b561-70b1c5a65ebd
00:46:21.830 --> 00:46:24.590
It is on top of the yarn outside.

NOTE Confidence: 0.770627114285714

b7d18592-0083-4c2f-a186-a5febb9dbb3f
00:46:24.590 --> 00:46:29.090
It's simply pop.

NOTE Confidence: 0.770627114285714

df0358d6-2a75-4313-90f3-8cb280349ee8
00:46:29.090 --> 00:46:32.245
Or restore the topmost address

NOTE Confidence: 0.770627114285714

03e63d0b-73a2-4ce5-b0dd-3e605fa02298
00:46:32.245 --> 00:46:35.020
inside your knapsack and this is the

NOTE Confidence: 0.770627114285714

48b37792-eb40-4c1e-b183-51fbbb314f53
00:46:35.020 --> 00:46:36.550
address of return and you do it.

NOTE Confidence: 0.770627114285714

ad5dec02-931e-44e9-b508-20d12e4d7fa9
00:46:36.550 --> 00:46:37.938
Jump to that location.

NOTE Confidence: 0.776846456

be547cce-1fcb-4121-8478-8d5daee87592
00:46:40.180 --> 00:46:41.140
When I say you do,

NOTE Confidence: 0.776846456

6023384b-5e84-4899-8a11-85521e5e68c0
00:46:41.140 --> 00:46:44.806
I'm saying the processor does this.

NOTE Confidence: 0.776846456

7e0e7d71-cd24-4972-b804-325f53d4f692
00:46:44.810 --> 00:46:47.295
And then it reached the processor goes

NOTE Confidence: 0.776846456

a61eb195-8ff3-42ec-b94f-92fc26fe46c6
00:46:47.295 --> 00:46:49.968
here it does some more opcode here,

NOTE Confidence: 0.776846456

f1f74449-70b7-4366-9a75-90e0f55ec25b
00:46:49.970 --> 00:46:53.560
and when it's done here.

NOTE Confidence: 0.776846456

e8fd74a2-c4ea-4931-af28-2480721feccf
00:46:53.560 --> 00:46:56.250
It should return to the

NOTE Confidence: 0.776846456

dc824cfd-e25b-4029-97cd-eb789656f06d
00:46:56.250 --> 00:46:58.402
color of this function,

NOTE Confidence: 0.776846456

cf9d22a2-0aa6-410b-8a88-9150aeb97fea
00:46:58.410 --> 00:47:02.190
so will the address of the return.

NOTE Confidence: 0.776846456

0003ecb0-be46-4cd1-bf89-5422c29fc28a
00:47:02.190 --> 00:47:05.654
It's already at the topmost of your knapsack,

NOTE Confidence: 0.776846456

8a22a1a9-5314-4073-ae59-40223c64561c
00:47:05.660 --> 00:47:10.238
so it pops. The topmost item.

NOTE Confidence: 0.776846456

0e664d34-a1c2-40b6-b4a2-be458f8ca88a
00:47:10.240 --> 00:47:13.330
And then returns to the point

NOTE Confidence: 0.776846456

d1daf380-d0d9-4312-ae99-db8a0a2475e9
00:47:13.330 --> 00:47:16.030
that does the first call.

NOTE Confidence: 0.776846456

6c65898c-ee77-4923-afde-5559264e6efd
00:47:16.030 --> 00:47:19.340
So you see here the.

NOTE Confidence: 0.776846456

0b81a92e-5804-403e-8571-28f116178de9
00:47:19.340 --> 00:47:23.360
Sequence of color to the colleague.

NOTE Confidence: 0.776846456

58bb40e6-c40f-4d43-8afa-1f86179eee5d
00:47:23.360 --> 00:47:26.590
The more innermost you go.

NOTE Confidence: 0.776846456

96d9a95c-b146-4907-bd2a-553fae5da9f1
00:47:26.590 --> 00:47:28.634
The higher the address

NOTE Confidence: 0.776846456

783f35fa-1066-4297-92b3-9ca76ab1047d
00:47:28.634 --> 00:47:30.678
return address gonna be.

NOTE Confidence: 0.776846456

d629f423-3fc1-4aa8-924a-47a7d4b9e492
00:47:30.680 --> 00:47:35.220
So the return address of the innermost code

NOTE Confidence: 0.776846456

c841abc7-60a3-48c1-aa4a-3ea024c1aa6d
00:47:35.220 --> 00:47:39.300
is in the topmost item of your knapsack.

NOTE Confidence: 0.776846456

59105d62-c2d9-47e8-a544-8e8ff939f280
00:47:39.300 --> 00:47:40.152
And then.

NOTE Confidence: 0.776846456

6c8f500b-690f-4c9a-9d3f-b2d5d05ef928
00:47:40.152 --> 00:47:42.282
The return address of your

NOTE Confidence: 0.776846456

524c6384-32d8-494e-9aed-5b38f42d7e07
00:47:42.282 --> 00:47:44.704
first call is the bottommost

NOTE Confidence: 0.776846456

484e689c-3822-4d51-954a-9edc43be71bd
00:47:44.704 --> 00:47:46.808
item of your knapsack.

NOTE Confidence: 0.800898714

cf656690-649c-49b7-85bb-768dd148e7c4
00:47:51.530 --> 00:47:53.865
And that's the purpose of

NOTE Confidence: 0.800898714

d729ae71-60d9-4910-8984-8254e8a648d9
00:47:53.865 --> 00:47:56.666
the stack part of the, uh,

NOTE Confidence: 0.800898714

d84c1216-cee1-4982-b18a-05402553d35c
00:47:56.666 --> 00:47:58.996
memory layout for your program.

NOTE Confidence: 0.800898714

8226a4a4-b01d-4bd2-87d9-21fdd923d911
00:47:59.000 --> 00:48:00.750
That's why because it's stack,

NOTE Confidence: 0.800898714

35dc5b1d-a109-4001-a6dd-d8c10e28970c
00:48:00.750 --> 00:48:02.340
you already know what this

NOTE Confidence: 0.800898714

db6e71d6-7e47-4d0c-b907-e5b36b0a873d
00:48:02.340 --> 00:48:03.930
is tagged in data structure.

NOTE Confidence: 0.800898714

c4a4236e-435a-4ff7-9bb9-d3a3c9005056
00:48:03.930 --> 00:48:06.570
So basically it's an app side and it

NOTE Confidence: 0.800898714

f7555f00-f10d-4479-a036-5b395522e693
00:48:06.570 --> 00:48:09.247
acts like an app side for a traveler.

NOTE Confidence: 0.800898714

212aefef-fe32-4f4d-ae6d-3f3495c3e7e1
00:48:09.250 --> 00:48:10.078
So a traveler,

NOTE Confidence: 0.800898714

f9ef07a0-cc03-4126-8e2d-2bd514853898
00:48:10.078 --> 00:48:12.437
when it wants to go when it the

NOTE Confidence: 0.800898714

685e5529-be0a-4b24-9cdc-c8187aac6ab6
00:48:12.437 --> 00:48:14.579
traveler wants to go another city,

NOTE Confidence: 0.800898714

4cf44828-50e6-4624-92d8-0b0e9d5bcdc9
00:48:14.580 --> 00:48:17.919
it fears store the address of the return at

NOTE Confidence: 0.800898714

9c92d36e-e942-4650-b0b1-3c26bec318f1
00:48:17.919 --> 00:48:21.845
I mean city and then it goes through a trap.

NOTE Confidence: 0.800898714

f4bfcb09-4709-4d72-b37f-cde204c1fa09
00:48:21.850 --> 00:48:23.170
When the trip is done,

NOTE Confidence: 0.800898714

870a1f7f-bfd2-4e2c-be00-4f7e2ec98c0a
00:48:23.170 --> 00:48:25.698
it look at the knapsack at the top

NOTE Confidence: 0.800898714

efe40fa7-8c7d-43a0-a7a6-022c380730ee
00:48:25.698 --> 00:48:28.362
and sees the return address and it

NOTE Confidence: 0.800898714

0e5d45a3-e27b-4fd1-a2c3-6e5ebdd403f6
00:48:28.362 --> 00:48:30.701
pops the return address and come

NOTE Confidence: 0.800898714

5c5a9813-ec50-474a-a4f8-acfcf3b04f47
00:48:30.701 --> 00:48:33.189
back to the home at at Home City.

NOTE Confidence: 0.800898714

c91f4791-f8c6-46f9-9b57-0536234380c0
00:48:33.190 --> 00:48:37.198
Very similar to a trip for a program.

NOTE Confidence: 0.800898714

987b06b2-4b26-4e88-ba38-e9b62467e68a
00:48:37.200 --> 00:48:42.350
But one very small or subtle

NOTE Confidence: 0.800898714

da81e0c0-9aab-43f7-86dc-817b6cf55a47
00:48:42.350 --> 00:48:45.530
difference here is that the knapsack.

NOTE Confidence: 0.800898714

6a98fa34-e7fa-4ae6-916c-03bcf3d55fb6
00:48:45.530 --> 00:48:48.080
For a program is upside down.

NOTE Confidence: 0.802354571538461

494e519b-beb6-4c4e-9ffa-0093d1974f75
00:48:50.480 --> 00:48:53.196
So it's kind of weird because in

NOTE Confidence: 0.802354571538461

58f8bce8-be60-4b7e-b415-5f14059b0b7b
00:48:53.196 --> 00:48:55.850
real world our knapsack or just.

NOTE Confidence: 0.802354571538461

c11179d9-a9eb-4a90-9ec5-16efd1414d67
00:48:55.850 --> 00:48:57.650
I mean normal like this,

NOTE Confidence: 0.802354571538461

ca930b33-cb57-4fe1-afce-82facbb09e99
00:48:57.650 --> 00:48:59.764
but for the program inside the memory,

NOTE Confidence: 0.802354571538461

2cd50768-76ad-4a12-986e-a672d9bfee68
00:48:59.770 --> 00:49:02.730
the knapsack is upside down.

NOTE Confidence: 0.802354571538461

76db2944-1157-4ed6-833b-2638d7e5b5ee
00:49:02.730 --> 00:49:05.139
So basically the.

NOTE Confidence: 0.626914075

be18acde-d964-4427-b12e-250cfc97c162
00:49:07.580 --> 00:49:10.320
Upper part of the stack

NOTE Confidence: 0.626914075

c21266db-1abe-419d-821a-4f1c054b7a5a
00:49:10.320 --> 00:49:13.060
is the bottom of this.

NOTE Confidence: 0.626914075

f8a81795-4423-4c32-b835-eb1c577aceb6
00:49:13.060 --> 00:49:17.300
Black and then it grows.

NOTE Confidence: 0.626914075

f4b4844e-82f5-4259-90d3-8e2597360488
00:49:17.300 --> 00:49:19.276
In the reverse side,

NOTE Confidence: 0.626914075

d44eea1f-1a7c-4c08-b5b6-f69320ab0157
00:49:19.276 --> 00:49:21.216
by decrementing the

NOTE Confidence: 0.626914075

df6f4e98-5206-46eb-ba3c-1a4f35acd40a
00:49:21.216 --> 00:49:24.108
address of the stack.

NOTE Confidence: 0.801897471428571

8a6a44b1-416f-4aba-bcc9-a63d1c972718
00:49:30.560 --> 00:49:36.286
So basically this stack starts at right.

NOTE Confidence: 0.801897471428571

5563efd8-67e6-46db-8e52-f9e96145b64f
00:49:36.290 --> 00:49:39.692
Before the a copy of the

NOTE Confidence: 0.801897471428571

0dec7e71-f317-48b2-8e14-09c22a2d1ead
00:49:39.692 --> 00:49:40.826
environment variables,

NOTE Confidence: 0.801897471428571

bdc4c0ad-f5ab-4001-bce6-57b6c355980d
00:49:40.830 --> 00:49:43.360
but it doesn't grow upward.

NOTE Confidence: 0.801897471428571

71321f18-6620-411b-984f-2476a92a23f9
00:49:43.360 --> 00:49:45.904
It grows downward.

NOTE Confidence: 0.801897471428571

dc94fe78-e802-40d3-84fe-524f83d764ad
00:49:45.904 --> 00:49:49.296
By Decrementing the addresses.

NOTE Confidence: 0.801897471428571

952f1aae-a414-475e-a0ae-544f8e5eed98
00:49:49.300 --> 00:49:52.346
So far it's minus 2 - 4 -

NOTE Confidence: 0.801897471428571

45ff4e68-fe06-4a51-a718-20a32ad38459
00:49:52.346 --> 00:49:55.604
8 up until it reaches the.

NOTE Confidence: 0.801897471428571

4b4af82a-c934-47b6-86a5-4f93bec17e95
00:49:55.610 --> 00:49:59.298
This point at the end of DBZ segment.

NOTE Confidence: 0.853696026666667

5d1da5f9-7e4d-43c7-8b45-66070ab42604
00:50:02.520 --> 00:50:05.406
One thing happens here is this.

NOTE Confidence: 0.853696026666667

f15f7976-d263-400b-bc43-213d2689bd21
00:50:05.410 --> 00:50:07.192
Called Stack overflow.

NOTE Confidence: 0.853696026666667

bfbe4cf3-7741-4f30-acef-7693f2cc94f0
00:50:07.192 --> 00:50:13.030
What if you do a lot of inner trips?

NOTE Confidence: 0.853696026666667

65b748ff-ccc6-4acd-a5b4-7dbc6345d8ff
00:50:13.030 --> 00:50:16.438
For instance, your main.

NOTE Confidence: 0.853696026666667

fffe5fbe-cb11-4c97-8e36-8e393956f3c2
00:50:16.438 --> 00:50:21.430
Calls F1 function, F1 calls F2 function.

NOTE Confidence: 0.853696026666667

289df6ff-1baf-4b67-a3ca-4a73d0e74687
00:50:21.430 --> 00:50:23.910
F2 calls a free function

NOTE Confidence: 0.853696026666667

a8fc1241-8f5a-4453-98c7-fd27575f1742
00:50:23.910 --> 00:50:26.954
and up until 1,000,000.

NOTE Confidence: 0.853696026666667

e1367b93-0480-4dfd-a78e-e73359aaa5d2
00:50:26.954 --> 00:50:28.242
Something called.

NOTE Confidence: 0.853696026666667

ec12d1b3-ccce-4cf4-8202-0458b92a6a0c
00:50:28.242 --> 00:50:32.106
At each call before the call,

NOTE Confidence: 0.853696026666667

602e7730-3bcf-4c67-b614-5af915c9d3b3
00:50:32.110 --> 00:50:34.918
you have to keep track of the return address.

NOTE Confidence: 0.853696026666667

2c924cef-3764-48b7-9bcf-c6c4cd2b67b2
00:50:34.920 --> 00:50:39.184
So here you have to save one address.

NOTE Confidence: 0.853696026666667

c6d7655b-a867-45e0-9983-8e595d6b27e6
00:50:39.190 --> 00:50:42.090
So if this is your knapsack,

NOTE Confidence: 0.853696026666667

6597db5b-cce0-4685-8035-a7d4414dbd1e
00:50:42.090 --> 00:50:46.270
you have to keep the first address here.

NOTE Confidence: 0.853696026666667

f36bd0dc-8a5e-47fb-adfa-3f76dafada5d
00:50:46.270 --> 00:50:48.439
And then here you have to keep track of

NOTE Confidence: 0.853696026666667

197f0ca7-372c-4b53-b280-152423b0790d
00:50:48.439 --> 00:50:50.666
the return address and here you have to

NOTE Confidence: 0.853696026666667

bf73cda7-2075-4565-816c-dbbaf7629aa4
00:50:50.666 --> 00:50:53.746
keep track of the return address and etc.

NOTE Confidence: 0.853696026666667

d00fdae4-d974-4e81-98ee-df98bda96d53
00:50:53.746 --> 00:50:57.897
At some point your knapsack becomes full.

NOTE Confidence: 0.853696026666667

e67a6e66-b9c9-4859-bd0d-b72e1425169a
00:50:57.900 --> 00:50:59.720
So in the memory layout,

NOTE Confidence: 0.853696026666667

4fd4dff8-52af-4428-b333-95bf9bab7ca5
00:50:59.720 --> 00:51:02.396
it's upside down at some point.

NOTE Confidence: 0.853696026666667

f41df953-a280-4510-9157-2e16c8a1161a
00:51:02.400 --> 00:51:05.403
You put a lot of return address

NOTE Confidence: 0.853696026666667

da1e2e0b-549d-46cc-8a7c-b87719e19658
00:51:05.403 --> 00:51:08.706
again and again up until it reaches

NOTE Confidence: 0.853696026666667

7bd195af-0034-41f4-9c7b-fde24a2fb00e
00:51:08.706 --> 00:51:12.264
the start of the BS segment.

NOTE Confidence: 0.853696026666667

3bd949b8-96ec-48f5-b14b-ba494bfe5fad
00:51:12.270 --> 00:51:16.260
It cannot overlap the BSS segment,

NOTE Confidence: 0.853696026666667

1a451317-86e2-44da-8a37-2f7b5f60ff32
00:51:16.260 --> 00:51:19.704
so it means that you cannot store

NOTE Confidence: 0.853696026666667

612f9d30-6b1f-4d78-9cc1-81415c87af0b
00:51:19.704 --> 00:51:23.088
more return address, so that happens.

NOTE Confidence: 0.853696026666667

38a948d2-26dd-43fd-8329-d65197bd2acb
00:51:23.088 --> 00:51:24.996
It's not overflow.

NOTE Confidence: 0.853696026666667

b6c1f63f-d09f-4d20-9f16-b5d0ca04f5f4
00:51:25.000 --> 00:51:27.317
As a lecture assignment I put a

NOTE Confidence: 0.853696026666667

1a7c53b4-d518-425d-a8bf-358313911b48
00:51:27.317 --> 00:51:29.764
question for you to do more research

NOTE Confidence: 0.853696026666667

8180c890-3a84-42be-a0fe-d0998a71b4db
00:51:29.764 --> 00:51:31.892
about what else can happen in order

NOTE Confidence: 0.853696026666667

6366693d-1a87-4ffb-9a6b-9e878c54560f
00:51:31.892 --> 00:51:34.472
to raise this tag or flow in order to

NOTE Confidence: 0.853696026666667

30f30405-a105-4f59-b0df-a9e1b59a0938
00:51:34.472 --> 00:51:36.689
make this stack of the program full.

NOTE Confidence: 0.826096638947368

281487df-5758-4a5e-8029-9f147e789fab
00:51:39.280 --> 00:51:41.982
Another thing here is that not only

NOTE Confidence: 0.826096638947368

675aadaf-daa6-450a-a8c8-364d41a99eb1
00:51:41.982 --> 00:51:44.547
the return address of the function can

NOTE Confidence: 0.826096638947368

75258458-0614-4e28-92f7-91e96fe47bc0
00:51:44.547 --> 00:51:47.804
be kept in this stack, but also the

NOTE Confidence: 0.826096638947368

e7913454-c26a-416b-bf65-ce6648c178c4
00:51:47.804 --> 00:51:50.972
local variables and the arguments to

NOTE Confidence: 0.826096638947368

63c36405-0195-49a8-a7b0-ef0e268db943
00:51:50.972 --> 00:51:55.088
the functions are stored in this stack.

NOTE Confidence: 0.826096638947368

b149076c-37d4-44f7-bfae-27db5816b516
00:51:55.090 --> 00:52:00.420
By these two type of variables I mean this.

NOTE Confidence: 0.826096638947368

908cd5c3-1c2c-4cc4-af30-5728657826f7
00:52:00.420 --> 00:52:05.124
So here. Except the main man is

NOTE Confidence: 0.826096638947368

96c34132-9373-4032-b714-b8ae6ccf70e5
00:52:05.124 --> 00:52:07.072
exceptional, except the main.

NOTE Confidence: 0.826096638947368

26455650-2dd9-4a05-bddb-a0fe24305c9e
00:52:07.072 --> 00:52:11.760
When you do a call to any other functions,

NOTE Confidence: 0.826096638947368

1904e29f-84a3-4405-8ac3-d8bfaa35fd27
00:52:11.760 --> 00:52:13.074
for instance here,

NOTE Confidence: 0.826096638947368

40fc7e0b-0910-412f-a0e7-be5bdff2f99a
00:52:13.074 --> 00:52:18.089
the ETA I or hear the string too long.

NOTE Confidence: 0.826096638947368

bb2c9f65-a457-4efe-b21c-93c90b4869a0
00:52:18.090 --> 00:52:19.920
Not only you have to keep

NOTE Confidence: 0.826096638947368

fcf2af4e-4be5-40c9-a1d5-ce11c6fe19a7
00:52:19.920 --> 00:52:21.760
track of the return address,

NOTE Confidence: 0.826096638947368

eef3393e-7081-49a1-8a33-3c85bb83b54a
00:52:21.760 --> 00:52:26.488
but also all the arguments to the functions.

NOTE Confidence: 0.826096638947368

97c758b1-37da-4aa9-8f61-461a9198cd5f
00:52:26.490 --> 00:52:29.640
And the local variables to the functions

NOTE Confidence: 0.826096638947368

c4b800a4-5517-4a3c-88b8-3c144cebb3f2
00:52:29.640 --> 00:52:33.239
that you call or is stored in the stack.

NOTE Confidence: 0.826096638947368

8eca1375-dd79-4715-aed3-bf4be0cc0d69
00:52:33.240 --> 00:52:34.014
For instance,

NOTE Confidence: 0.826096638947368

31da4d32-611d-48b8-9aeb-907970eb1ff8
00:52:34.014 --> 00:52:37.110
here this variable is going to be stored

NOTE Confidence: 0.826096638947368

c2e96bcc-9216-437b-b2d7-a7c27e7de179
00:52:37.189 --> 00:52:39.629
at this tag when you called it on.

NOTE Confidence: 0.826096638947368

d1cb856a-f8dc-435c-8a9e-8aab7a5c634f
00:52:39.630 --> 00:52:43.002
Also, when you call the string

NOTE Confidence: 0.826096638947368

57ac7aea-a1e0-4ce6-8e27-b9ec6b2ccf47
00:52:43.002 --> 00:52:46.502
too long before doing the call,

NOTE Confidence: 0.826096638947368

9291b040-ad93-48e5-9dd8-2d98f79f4a6b
00:52:46.502 --> 00:52:49.467
the variables to that function

NOTE Confidence: 0.826096638947368

57583113-2edc-4255-9d7b-5f6786689924
00:52:49.467 --> 00:52:53.135
call gonna be stored in the stack.

NOTE Confidence: 0.826096638947368

5a03bd49-e2e5-4565-a923-663b14a4a98e
00:52:53.140 --> 00:52:55.765
All the local variables of a function

NOTE Confidence: 0.826096638947368

ca509505-e1d7-4a8c-ac24-68b6d48fb966
00:52:55.765 --> 00:52:57.909
and the arguments of a function

NOTE Confidence: 0.826096638947368

4700a316-427b-48a5-bc73-ada7533feebe
00:52:57.909 --> 00:53:00.107
going to be stored in the stack.

NOTE Confidence: 0.826096638947368

fe19823d-ffd3-4d2c-9658-33587a163703
00:53:00.110 --> 00:53:01.818
Except I mean this is just for

NOTE Confidence: 0.826096638947368

eb51881e-a01d-4d8d-ab8b-1b4fe5f0691e
00:53:01.818 --> 00:53:03.688
me that is not in this stack.

NOTE Confidence: 0.826096638947368

25af0dc8-ac33-4fce-bbd7-89ba2a231e6d
00:53:03.690 --> 00:53:05.125
All the other functions going

NOTE Confidence: 0.826096638947368

3cf7596c-8f5a-4809-8220-599021be56e7
00:53:05.125 --> 00:53:06.560
to be in this step.

NOTE Confidence: 0.826096638947368

196fad0e-b652-40af-bc1f-cdc121c5e06b
00:53:06.560 --> 00:53:10.529
Another way to do it to raise the Stack

NOTE Confidence: 0.826096638947368

4db46f8f-4cbb-4cc5-b850-ab507bd04c60
00:53:10.529 --> 00:53:13.768
Overflow is that if a function for

NOTE Confidence: 0.826096638947368

52f6fff2-47a8-49cb-a039-6198800a9338
00:53:13.768 --> 00:53:17.378
instance function F2 is towards a huge

NOTE Confidence: 0.826096638947368

e0d7eac6-c444-4a84-888e-c60e392d6df1
00:53:17.378 --> 00:53:22.140
local variables, for instance an array of.

NOTE Confidence: 0.826096638947368

70bb58f9-f6e4-4dad-a31f-bcd301b71ea6
00:53:22.140 --> 00:53:24.274
Characters all.

NOTE Confidence: 0.826096638947368

41d9acd7-8ee8-4307-abb9-0475cea524fc
00:53:24.274 --> 00:53:26.408
For instance.

NOTE Confidence: 0.826096638947368

1d2d9cf0-6fee-4d82-956a-558016ad0ebb
00:53:26.410 --> 00:53:30.580
10 million points.

NOTE Confidence: 0.826096638947368

352a4233-63fb-44ec-a37a-33a633d021e5
00:53:30.580 --> 00:53:33.052
And if your stack doesn't have

NOTE Confidence: 0.826096638947368

79594ff5-7eb8-4ad6-ac66-43e3028f45a0
00:53:33.052 --> 00:53:35.628
enough time enough space to store

NOTE Confidence: 0.826096638947368

e418e9d0-629c-4b1e-a210-22508066e021
00:53:35.628 --> 00:53:38.288
this area of 10 million bytes,

NOTE Confidence: 0.826096638947368

192165d0-03e3-4700-80fe-f7d9bda62d64
00:53:38.288 --> 00:53:40.428
it raises the stack overflow.

NOTE Confidence: 0.66754851

4be3cfeb-dfda-4f42-abb1-d94fb590abe4
00:53:44.720 --> 00:53:48.710
So before going forward to the

NOTE Confidence: 0.66754851

c71d4d93-04dd-466b-9a74-379f948c61ce
00:53:48.710 --> 00:53:51.315
next segment, which is heap,

NOTE Confidence: 0.66754851

923afa1f-67a5-4f00-af4a-95468dda50e4
00:53:51.315 --> 00:53:54.290
so I'm ready to take your questions.

NOTE Confidence: 0.6787939725

d225e20b-975b-49be-9f0c-59862f38bb56
00:53:57.610 --> 00:53:59.058
Yes, may Sam correctly.

NOTE Confidence: 0.6787939725

d5015c7a-9da0-4946-aac2-06e48b44478c
00:53:59.058 --> 00:54:00.506
First in first out.

NOTE Confidence: 0.6787939725

bb97ad98-5244-4a99-828e-71c0869c8aa5
00:54:00.510 --> 00:54:02.622
That's that's the idea of the

NOTE Confidence: 0.6787939725

242562de-6847-48e5-84a7-8e07535f9dec
00:54:02.622 --> 00:54:04.030
aggressive behavior of the

NOTE Confidence: 0.6787939725

00404193-3fa1-4938-a711-db30496113b0
00:54:04.097 --> 00:54:06.970
knapsack or stack, yeah? Exact.

NOTE Confidence: 0.97061558

5f09b095-da0c-47bb-9073-9d255e41d185
00:54:09.030 --> 00:54:10.040
Any questions?

NOTE Confidence: 0.923419298888889

5fa2536a-00f0-40bd-92b8-d2ffba3ee068
00:54:21.280 --> 00:54:22.785
It's not good that you

NOTE Confidence: 0.923419298888889

ac4083da-6238-4495-9ad8-748098e7a9f7
00:54:22.785 --> 00:54:24.840
don't have any question. So.

NOTE Confidence: 0.724007466

457218c4-97d9-4065-a336-dbf884044a65
00:54:27.760 --> 00:54:29.560
It seems I need you.

NOTE Confidence: 0.724007466

e5d90457-a3aa-491d-823b-bdb36635a866
00:54:29.560 --> 00:54:31.963
I meant to give me some feedback so I

NOTE Confidence: 0.724007466

f642b9e6-4d33-431e-a6ba-e77c0a0e2b00
00:54:31.963 --> 00:54:34.458
can make sure that you are listening.

NOTE Confidence: 0.724007466

0365047e-cf7e-4940-ab12-1c035c8680fb
00:54:34.460 --> 00:54:38.408
So we have one question from Mesa.

NOTE Confidence: 0.724007466

d7bc8641-e18a-48bf-8e56-a9617aa9c1c5
00:54:38.410 --> 00:54:40.750
Depends on the memory exactly.

NOTE Confidence: 0.724007466

229a429b-46aa-4a84-bf11-272b97179728
00:54:40.750 --> 00:54:42.890
Yes, basically let me go

NOTE Confidence: 0.724007466

f054dbc0-43c7-4e55-ac68-53d7ef8a6489
00:54:42.890 --> 00:54:45.030
back to this memory layout.

NOTE Confidence: 0.724007466

d0e2e3d9-839c-42a3-8a59-2b8711ebd43c
00:54:45.030 --> 00:54:48.726
Yeah, so if your memory is just

NOTE Confidence: 0.724007466

da365235-e4bc-448b-ac4c-35a6af8c381c
00:54:48.726 --> 00:54:51.918
limited to one MB of memory,

NOTE Confidence: 0.724007466

045a81b0-bcf8-4595-86bf-fb532769da9a
00:54:51.920 --> 00:54:55.216
so as a result not only your program

NOTE Confidence: 0.724007466

945005e2-31c6-4753-9b2d-a7669cd42f91
00:54:55.216 --> 00:54:58.388
up code cannot be huge programs,

NOTE Confidence: 0.724007466

0b5dbc45-2e43-4d73-a634-41f7bb5066d8
00:54:58.390 --> 00:55:02.709
but also the data segment the stack.

NOTE Confidence: 0.724007466

590791aa-1734-489c-989f-2695e9b7141f
00:55:02.710 --> 00:55:04.960
These are just shrinks based

NOTE Confidence: 0.724007466

f1a333b1-baac-42e2-a812-de9c40669898
00:55:04.960 --> 00:55:07.920
on just this amount of memory.

NOTE Confidence: 0.724007466

3cc71f48-78ea-48ed-b0e3-689a9362b75c
00:55:07.920 --> 00:55:08.877
As a result,

NOTE Confidence: 0.724007466

ba796917-1dd6-4bbb-b4d4-2a2e32d39786
00:55:08.877 --> 00:55:11.540
you can just run a small program files

NOTE Confidence: 0.724007466

4e4d1bd7-7913-4c06-b8d3-e935414ab838
00:55:11.540 --> 00:55:17.210
and your program files can do very, I mean.

NOTE Confidence: 0.724007466

fb429703-492b-4335-8566-6208850933be
00:55:17.210 --> 00:55:20.552
A small number of function calls

NOTE Confidence: 0.724007466

41338f2b-c9f2-44af-8ca3-2438a1120419
00:55:20.552 --> 00:55:24.022
and inner calls and etc. Is huge.

NOTE Confidence: 0.724007466

fde8ac5a-3386-4a9a-977c-af3dde41e09a
00:55:24.022 --> 00:55:26.128
It depends on the memory size.

NOTE Confidence: 0.724007466

b86970bf-d7e1-4464-a808-6b877218a794
00:55:26.130 --> 00:55:27.252
If you have,

NOTE Confidence: 0.724007466

04ad893b-2f91-40bf-ae13-6fefd3da2640
00:55:27.252 --> 00:55:29.496
for instance 4 gigabyte of memory,

NOTE Confidence: 0.724007466

d64c7563-eb16-454b-bf45-f1bd21625f60
00:55:29.500 --> 00:55:32.212
then your program can be huge

NOTE Confidence: 0.724007466

d2b05ccb-c9eb-48fe-9bdb-612256e9a6b6
00:55:32.212 --> 00:55:35.006
Lord and vast amount of, uh,

NOTE Confidence: 0.724007466

c3b285d6-0698-460a-995d-4894906af917
00:55:35.006 --> 00:55:38.086
I mean variables and etc.

NOTE Confidence: 0.738209152857143

c98c4f15-e07e-43b7-9fba-e1b896a0ec99
00:55:46.000 --> 00:55:48.786
Oh, this this sign of this stack?

NOTE Confidence: 0.738209152857143

9fc3e407-8870-414a-82df-66ce3c963bf6
00:55:48.790 --> 00:55:51.471
Actually, I'll show you that we don't

NOTE Confidence: 0.738209152857143

a1b96321-b47b-4cfc-a972-842fb64a1284
00:55:51.471 --> 00:55:54.542
know the size of this tag because that's

NOTE Confidence: 0.738209152857143

cb1b3fd5-e6ef-4ed3-bb20-3052d5ab045b
00:55:54.542 --> 00:55:58.590
a good very good question by May Sam.

NOTE Confidence: 0.738209152857143

d73f52f1-c3a7-43a5-adc6-f1c6ae4027fb
00:55:58.590 --> 00:56:01.128
So that's a very good question.

NOTE Confidence: 0.738209152857143

6ed775ff-c23e-4565-955f-377667695f62
00:56:01.130 --> 00:56:02.750
I'll keep your this question

NOTE Confidence: 0.738209152857143

8873a429-c437-4ce0-9b7e-bd824f8a91a3
00:56:02.750 --> 00:56:04.046
and I'll I'll I'll.

NOTE Confidence: 0.738209152857143

9c0b525b-8034-429c-9837-e2f744ede06d
00:56:04.050 --> 00:56:08.460
I'll be back with these questions that.

NOTE Confidence: 0.738209152857143

961ef56d-9019-4187-a89f-8e0cd76e2516
00:56:08.460 --> 00:56:12.177
We do not know the size of this tag

NOTE Confidence: 0.738209152857143

d15bbd59-beda-4721-8772-2bffb492df67
00:56:12.177 --> 00:56:15.482
and the size of heap in advance.

NOTE Confidence: 0.738209152857143

23fbb98a-79d7-42c3-be3c-c074c7b9f793
00:56:15.482 --> 00:56:20.497
Because at runtime V is stack goes up and

NOTE Confidence: 0.738209152857143

82b9cde6-7cd0-4b30-9daa-bf1cfeb3fc5d
00:56:20.497 --> 00:56:25.105
down based on the number of function calls.

NOTE Confidence: 0.738209152857143

4a18d169-9749-418b-b52d-c4acece12415
00:56:25.110 --> 00:56:27.792
And also the heap that I'm going to explain.

NOTE Confidence: 0.738209152857143

873cae9c-b7f5-418d-8861-f386c634ff7d
00:56:27.800 --> 00:56:30.014
However, the other parts the code

NOTE Confidence: 0.738209152857143

b9cb4d97-69f5-4e68-83ed-2a7ae7b4b170
00:56:30.014 --> 00:56:32.628
segment is the output of your program.

NOTE Confidence: 0.738209152857143

185289f4-43fd-407d-9c93-afd3cfb5787e
00:56:32.630 --> 00:56:35.906
It never grows or shrinks, it is fixed.

NOTE Confidence: 0.738209152857143

86fa8b66-5dd9-4718-abbc-19e820cb2364
00:56:35.906 --> 00:56:37.674
In the other segment,

NOTE Confidence: 0.738209152857143

dc662fc7-9880-4e4b-97fc-59bac2b762c4
00:56:37.680 --> 00:56:39.456
these are the variables that are

NOTE Confidence: 0.738209152857143

525cebaa-99d5-4de5-a25a-42b1ca927f8c
00:56:39.456 --> 00:56:41.160
initialized in your main function,

NOTE Confidence: 0.738209152857143

5a6ce4a0-6692-422f-8933-b1223441b9a5
00:56:41.160 --> 00:56:42.872
so these are fixed.

NOTE Confidence: 0.738209152857143

72bb5627-ec91-4604-9ecb-5ac091d5f4f6
00:56:42.872 --> 00:56:45.012
We cannot add more variables

NOTE Confidence: 0.738209152857143

8d02b276-ee06-4972-897f-7fb24c5672fa
00:56:45.012 --> 00:56:47.579
while your program is inside the

NOTE Confidence: 0.738209152857143

2e0cc1ec-bc28-47de-86d2-ef3b4afe4387
00:56:47.579 --> 00:56:49.639
memory and it is running.

NOTE Confidence: 0.738209152857143

dc3ef0ac-58d2-4ec5-a61b-f94098351a9a
00:56:49.640 --> 00:56:52.279
The same is with the BSS segment.

NOTE Confidence: 0.738209152857143

42332916-75e8-4218-9c56-703914f57fb6
00:56:52.280 --> 00:56:54.812
Also, the shell arguments and the

NOTE Confidence: 0.738209152857143

eff8df8d-dfde-4122-ba9c-856904ff105a
00:56:54.812 --> 00:56:57.320
copy of the environment variables.

NOTE Confidence: 0.738209152857143

135a6978-67ea-4fcc-986d-c1c164d268c8
00:56:57.320 --> 00:57:00.410
These segments are all fixed.

NOTE Confidence: 0.738209152857143

7140b151-c02b-4746-af21-00d47fd6c15d
00:57:00.410 --> 00:57:00.932
However.

NOTE Confidence: 0.738209152857143

59102b44-7685-4b08-a44a-d54821e9626a
00:57:00.932 --> 00:57:04.586
These two part is that and hit

NOTE Confidence: 0.738209152857143

4ae65f7b-15c3-47e3-8185-2cf07cf74532
00:57:04.590 --> 00:57:07.290
the size depends at runtime

NOTE Confidence: 0.738209152857143

c5f9e1bb-c28f-4a29-8a3c-766420e484f8
00:57:07.290 --> 00:57:09.290
and initially they are zero.

NOTE Confidence: 0.738209152857143

38eed136-ba50-4ab6-b1b3-b8b92f22a527
00:57:09.290 --> 00:57:10.940
But when the program runs,

NOTE Confidence: 0.738209152857143

df2b1c46-8d8b-4023-9f53-48a8bc23f593
00:57:10.940 --> 00:57:12.560
they grow and shrinks.

NOTE Confidence: 0.738209152857143

e47898ca-a533-4a69-a4af-5cc08e86415a
00:57:12.560 --> 00:57:15.559
So the size of the stack and

NOTE Confidence: 0.738209152857143

05f27aee-88a0-4324-b752-bfc53200baad
00:57:15.559 --> 00:57:17.487
heap depends on runtime.

NOTE Confidence: 0.738209152857143

171fd3c7-775f-40fe-85d0-4359b8e25202
00:57:17.490 --> 00:57:19.184
I'll explain this a little bit more,

NOTE Confidence: 0.738209152857143

5f6ec208-e3f8-480c-a8ab-83b09bc0a934
00:57:19.190 --> 00:57:21.740
but that's a very good question.

NOTE Confidence: 0.738209152857143

d88694f6-4e86-40e9-9b8f-d6a9dc272130
00:57:21.740 --> 00:57:24.695
So we have another question

NOTE Confidence: 0.738209152857143

b35774e5-589f-48af-a368-87e71510b93e
00:57:24.695 --> 00:57:27.059
from a maid Michelle.

NOTE Confidence: 0.738209152857143

b6342720-0b24-43eb-aa84-edaf3c40e7e2
00:57:27.060 --> 00:57:29.040
Might be 10 address one

NOTE Confidence: 0.738209152857143

9746df02-c583-48fb-9d4f-ffd6710ed8a9
00:57:29.040 --> 00:57:30.624
that actually can address.

NOTE Confidence: 0.738209152857143

359bbaf5-2e0b-4779-8a4f-476acf77a988
00:57:30.630 --> 00:57:32.958
Or is it a pointer that?

NOTE Confidence: 0.738209152857143

91cdaedf-43cf-4b83-b927-c0af25c6a68d
00:57:32.960 --> 00:57:34.055
Oh, that's it?

NOTE Confidence: 0.738209152857143

f2777796-4ddb-4c96-b0a5-88b86e2c53f5
00:57:34.055 --> 00:57:36.245
That's a pointer to the address?

NOTE Confidence: 0.738209152857143

f4b82718-b43b-4d67-a1b5-a3496e9b9fe6
00:57:36.250 --> 00:57:40.597
Oh sorry, that's the actual memory address.

NOTE Confidence: 0.738209152857143

4d33f97c-7d69-4b20-a236-d2618e1b5742
00:57:40.600 --> 00:57:46.837
So if a assuming that these are the opcodes,

NOTE Confidence: 0.738209152857143

6a63f7f0-380d-4a38-a2f6-a74a0343db95
00:57:46.840 --> 00:57:48.400
so for instance,

NOTE Confidence: 0.738209152857143

abe6bd61-23d7-4206-b885-9086799322e9
00:57:48.400 --> 00:57:51.755
this goes to the memory 0000,

NOTE Confidence: 0.738209152857143

6f8a8e81-1eed-4a24-b598-3f546b4a4dff
00:57:51.755 --> 00:57:54.285
the next is 0001,

NOTE Confidence: 0.738209152857143

4fdd0205-b666-4b46-918f-20ca66be9176
00:57:54.285 --> 00:57:55.080
the next is

NOTE Confidence: 0.541742861666667

e248e24e-e33c-41c7-aa2e-7524105d9e88
00:57:57.890 --> 00:58:02.006
00020003. Still no four and etc.

NOTE Confidence: 0.541742861666667

1b56a595-5e11-410b-a08f-f52d6641e349
00:58:02.010 --> 00:58:06.168
So when you do the call to this function.

NOTE Confidence: 0.541742861666667

109cc914-0127-4c06-83e7-356df160191c
00:58:06.170 --> 00:58:09.026
The return address is the OP.

NOTE Confidence: 0.541742861666667

c4e85342-add1-436a-ba7e-2931505a7bcd
00:58:09.030 --> 00:58:11.256
The address of the next opcode,

NOTE Confidence: 0.541742861666667

e52ea15d-d985-4b68-8b5d-25e6569f4ea3
00:58:11.260 --> 00:58:14.858
which is 0004 inside the memory.

NOTE Confidence: 0.541742861666667

acfdcb34-0d3f-40be-862d-3044f081e19b
00:58:14.858 --> 00:58:19.129
So the my return address one is actually.

NOTE Confidence: 0.541742861666667

78f48688-d4f0-4c04-ab51-5dfe0d75f61b
00:58:19.130 --> 00:58:23.980
The value is 0004.

NOTE Confidence: 0.541742861666667

0c732c54-e933-4009-b648-b245677a9b7e
00:58:23.980 --> 00:58:26.890
The actual address of the

NOTE Confidence: 0.541742861666667

fbdc16d2-47fe-4788-8580-e98ef7821ef4
00:58:26.890 --> 00:58:29.218
opcode inside the memory.

NOTE Confidence: 0.541742861666667

345d22fb-decd-429b-9ff4-f2c7888730bc
00:58:29.220 --> 00:58:30.189
Makes sense, Michelle.

NOTE Confidence: 0.8108698

fcde2d5e-ba25-4de9-94db-3f05dac46e12
00:58:34.340 --> 00:58:40.620
Quit. OK. So before I start the next.

NOTE Confidence: 0.8108698

6972c839-e0f9-460a-9587-254c3a87697a
00:58:40.620 --> 00:58:43.621
Part which is about heap. I need you

NOTE Confidence: 0.8108698

311b7b53-b86d-41f0-8dcb-63f6c89f5727
00:58:43.621 --> 00:58:46.123
to send some feedback quickly guys.

NOTE Confidence: 0.8108698

653d9406-4410-4722-86ff-72da291b5087
00:58:46.130 --> 00:58:50.310
We have 44 students. So yeah.

NOTE Confidence: 0.3536173

5f42cddf-3ece-4af9-8c5d-959c5842bab5
00:58:52.350 --> 00:58:58.748
Rollbahn Vivian oil density Layla.

NOTE Confidence: 0.672801170833333

3dfc6bf9-654f-4e73-bb94-e9a110bd9705
00:59:03.020 --> 00:59:05.462
They are Danielle, so so far

NOTE Confidence: 0.672801170833333

65c9a7d6-3c67-416d-b544-2c5b3c40876a
00:59:05.462 --> 00:59:07.929
I think we have this 10.

NOTE Confidence: 0.672801170833333

0c7f3852-17e6-4b29-be26-ca5c2111a686
00:59:07.930 --> 00:59:11.227
I won't continue if I don't receive.

NOTE Confidence: 0.672801170833333

afe2befd-c1bd-4797-9c78-37722cc55028
00:59:11.230 --> 00:59:12.840
I mean at least 30 or 40.

NOTE Confidence: 0.504126771428571

3b88beab-c306-4460-a5c2-58c4d2d216e3
00:59:15.560 --> 00:59:18.927
We have met on Randy markers niter.

NOTE Confidence: 0.7517183825

7b122d81-2ce9-4bc5-a01e-265cd8b6f06f
00:59:22.500 --> 00:59:24.900
John is still sleeping.

NOTE Confidence: 0.78461162

6ca24dc7-a490-4d56-841f-a1be971298c0
00:59:27.900 --> 00:59:30.560
OK, thank you so much.

NOTE Confidence: 0.78461162

93f29be0-3bb6-4f61-9e48-e90a273c853e
00:59:30.560 --> 00:59:36.000
So the next part is about the heap.

NOTE Confidence: 0.78461162

7b5262bf-9a9d-43bd-88e3-6ddaeac75c5c
00:59:36.000 --> 00:59:39.972
HIPAA, as the name says, it's a.

NOTE Confidence: 0.78461162

11cc0838-dc9d-4528-bea0-c80342f379b3
00:59:39.972 --> 00:59:42.676
Part of the memory.

NOTE Confidence: 0.78461162

b15d1eb2-20fd-4cc6-8288-56c178f8bd5a
00:59:42.680 --> 00:59:48.000
That is just. A A vacant space.

NOTE Confidence: 0.78461162

6e25d5bb-cd5f-4f9c-82b7-599356b3d0d0
00:59:48.000 --> 00:59:52.431
4 hour program that can be employed

NOTE Confidence: 0.78461162

37e8fc17-a049-44b8-a58d-983f2d2ca5cc
00:59:52.431 --> 00:59:55.756
by us dynamically or at runtime.

NOTE Confidence: 0.78461162

ed73e537-883f-4390-a10e-31c2b8a3017b
00:59:55.756 --> 01:00:00.189
So so far all our variables are in the

NOTE Confidence: 0.78461162

00237404-baaf-43ae-bfdb-9145858df1c5
01:00:00.189 --> 01:00:03.980
Dallas side segment or in the VSS segment,

NOTE Confidence: 0.78461162

477f5834-55af-4884-b08f-605f409359c9
01:00:03.980 --> 01:00:06.128
or they are in upper memory

NOTE Confidence: 0.78461162

f243312e-0a4e-4e35-8b74-8e0cc0aa85bf
01:00:06.128 --> 01:00:07.560
in the shallow argument,

NOTE Confidence: 0.78461162

ea94d422-4e2c-405e-b8af-43f0abe82c82
01:00:07.560 --> 01:00:11.108
or the environment variables.

NOTE Confidence: 0.78461162

26e46630-12e9-40fb-be09-bc8a8f4c4b66
01:00:11.110 --> 01:00:14.645
The stag did anything inside this tag

NOTE Confidence: 0.78461162

27be7e49-9f11-4a5d-92b4-419703a3549a
01:00:14.645 --> 01:00:17.630
is not controlled by our program.

NOTE Confidence: 0.78461162

06f7d56c-d9b1-48db-9bbd-efc10448a38a
01:00:17.630 --> 01:00:19.130
The uh.

NOTE Confidence: 0.78461162

17403d2b-60d9-4724-8efe-fb206c377f7b
01:00:19.130 --> 01:00:23.630
Colonel, when it does the jumping,

NOTE Confidence: 0.78461162

744044ce-0ee4-4615-a259-e00a61ab29fc
01:00:23.630 --> 01:00:25.652
it pushes the address of the

NOTE Confidence: 0.78461162

d7483bee-cd2b-46d8-9210-1c36b36e49df
01:00:25.652 --> 01:00:27.650
return to this tag and etc.

NOTE Confidence: 0.78461162

87b72469-b19d-468e-9145-1a24b37ba2e0
01:00:27.650 --> 01:00:30.464
So they pushing up the return address

NOTE Confidence: 0.78461162

b8db30a3-f0d6-430f-91b5-69500ad6b492
01:00:30.464 --> 01:00:33.297
and the popping of the return address

NOTE Confidence: 0.78461162

8075bd15-c2e1-404d-bb20-f5da96f3d059
01:00:33.297 --> 01:00:35.619
is all done by the processor.

NOTE Confidence: 0.78461162

399510f6-aaa9-4817-bb4f-bfbe3d0060c8
01:00:35.620 --> 01:00:37.910
We do not push anything.

NOTE Confidence: 0.78461162

c7cd7f7d-464f-4783-8a7d-e1154a297aaf
01:00:37.910 --> 01:00:39.106
I mean by programming.

NOTE Confidence: 0.78461162

f12ef042-117f-415e-bfee-9824e4ae208f
01:00:39.106 --> 01:00:40.900
We do not push anything inside

NOTE Confidence: 0.78461162

6da5943b-55c0-40d0-b28e-6267fe9ab3c1
01:00:40.962 --> 01:00:42.775
this stack or we do not pop

NOTE Confidence: 0.78461162

5f25b1d7-acbc-4d1a-83f3-c0e79fc7144d
01:00:42.775 --> 01:00:43.900
anything from this time.

NOTE Confidence: 0.751717426

1f4e631a-1b5a-4774-aa2d-a729d108359a
01:00:46.190 --> 01:00:48.700
There is only one part.

NOTE Confidence: 0.751717426

64132d68-1cd1-4261-89d0-7fffb234655b
01:00:48.700 --> 01:00:51.010
Of the memory layout that can

NOTE Confidence: 0.751717426

14186ebc-0b3f-4257-a94a-0d1265b42cd5
01:00:51.010 --> 01:00:53.560
be reused by the programmer,

NOTE Confidence: 0.751717426

5b9b2342-553b-4bc7-a0b0-5825d72ff7de
01:00:53.560 --> 01:00:56.688
which is called heap.

NOTE Confidence: 0.751717426

6185739c-ae55-4dac-8629-86e196a7c388
01:00:56.690 --> 01:01:00.086
If at some point at runtime

NOTE Confidence: 0.751717426

fb54ba5d-c3a0-432f-9b61-a438e209ff3d
01:01:00.086 --> 01:01:03.888
you want to allocate a memory

NOTE Confidence: 0.751717426

5a77f56c-0ed4-4f8b-8bd9-9e6784ff5c8a
01:01:03.888 --> 01:01:06.720
location for some purposes.

NOTE Confidence: 0.751717426

04b8e235-46d4-40a1-955f-0f0feefdf151
01:01:06.720 --> 01:01:09.606
This is the space that the

NOTE Confidence: 0.751717426

1b0094bd-bced-48b5-9e4b-a66fbb77e53f
01:01:09.610 --> 01:01:12.810
kernel allows you to use.

NOTE Confidence: 0.751717426

9fc5217f-41cf-44bb-aed2-595c6fc5b642
01:01:12.810 --> 01:01:15.490
Which is called heap.

NOTE Confidence: 0.751717426

3855e8ec-8927-4407-bc99-e942666f546b
01:01:15.490 --> 01:01:19.744
In order to ask the kernel to give

NOTE Confidence: 0.751717426

cf770020-b236-4c28-afd4-6e6167b7c016
01:01:19.744 --> 01:01:23.422
you some additional space for you for

NOTE Confidence: 0.751717426

91a0c04e-1613-4d09-ba20-42df6d0f59f5
01:01:23.422 --> 01:01:25.780
other variables or whatever which is

NOTE Confidence: 0.751717426

699aa2f4-d7b9-49a3-8a59-f97102812ec5
01:01:25.857 --> 01:01:28.479
not already defined in your program.

NOTE Confidence: 0.751717426

8fa82e75-e280-405a-96e8-24bd59e5c37e
01:01:28.480 --> 01:01:30.470
There are some for now.

NOTE Confidence: 0.751717426

cdd41eff-1711-42e7-b49f-a24b1a230b5b
01:01:30.470 --> 01:01:32.000
These are librarything.

NOTE Confidence: 0.751717426

bdb9608f-d78f-4c99-89df-af5d4f46d59c
01:01:32.000 --> 01:01:34.594
These are not system calls.

NOTE Confidence: 0.751717426

c7351920-9e5a-415e-9b66-f897d7124516
01:01:34.594 --> 01:01:37.254
But these library routines does

NOTE Confidence: 0.751717426

64d6032e-6fb9-4785-bfa1-5112b0f37ac3
01:01:37.254 --> 01:01:40.906
system calls to the kernel for you

NOTE Confidence: 0.751717426

23f05028-b4aa-453e-abc5-83c2dabaa440
01:01:40.906 --> 01:01:44.194
in order to allocate some memory

NOTE Confidence: 0.751717426

e72d78c6-bd45-45bd-8ad4-331f29d9f990
01:01:44.194 --> 01:01:48.010
location for anything that you need.

NOTE Confidence: 0.751717426

ba9c817d-7d62-4f95-aa6c-684e2019bc24
01:01:48.010 --> 01:01:49.210
So again, these are.

NOTE Confidence: 0.751717426

7ed83dd3-c558-4bb1-b851-01d54f975bcd
01:01:49.210 --> 01:01:50.710
This is the standard library.

NOTE Confidence: 0.751717426

60c1e772-e680-4a31-97bd-2d5bc20d8ff6
01:01:50.710 --> 01:01:53.055
It's the diaper routine behind the scene.

NOTE Confidence: 0.751717426

5714f32a-4898-4745-a141-2c5f4a1748a8
01:01:53.060 --> 01:01:57.750
This liability does the kernel system called.

NOTE Confidence: 0.751717426

b21d8397-7ad1-4797-863d-ed11bf8d5d1a
01:01:57.750 --> 01:02:01.541
These two a library, I mean functions

NOTE Confidence: 0.751717426

14b95ae6-2384-4712-8df3-497744db6afe
01:02:01.541 --> 01:02:05.567
is called memory allocation or mlo,

NOTE Confidence: 0.751717426

c22c7bc0-aa57-48ab-9044-291e77e92a81
01:02:05.570 --> 01:02:07.832
so you may hear about them

NOTE Confidence: 0.751717426

bb30f357-dd5b-4174-9c59-3b71a2464482
01:02:07.832 --> 01:02:10.187
before and also reallocation.

NOTE Confidence: 0.751717426

333fbb22-655f-4e32-acb5-4ef003092c07
01:02:10.187 --> 01:02:13.482
So reallocation of the memory

NOTE Confidence: 0.751717426

d2ccfd04-49b6-4647-8a93-0cd1941ef77d
01:02:13.482 --> 01:02:16.060
and memory allocation.

NOTE Confidence: 0.751717426

c6c69c57-6ee2-4672-926f-a89ad9b6e25d
01:02:16.060 --> 01:02:19.516
So we will discuss only this one and we

NOTE Confidence: 0.751717426

9b94a1f2-6d86-4f6e-970a-7fb8ac385346
01:02:19.516 --> 01:02:23.226
leave this for you to read in from the book.

NOTE Confidence: 0.751717426

5fb1771e-4906-4e54-aa22-61b110934273
01:02:23.230 --> 01:02:25.260
But the most important one

NOTE Confidence: 0.751717426

1e361dda-d6d0-4a43-a8f8-741f98466f7c
01:02:25.260 --> 01:02:26.884
is the memory allocation.

NOTE Confidence: 0.751717426

d87a85b9-2266-456a-a9f2-ad6b032a8b0f
01:02:26.890 --> 01:02:29.230
At any point inside your program,

NOTE Confidence: 0.751717426

c7a13df2-9cb2-40f0-978e-7f0a6716c251
01:02:29.230 --> 01:02:33.280
you can ask the kernel by using this library

NOTE Confidence: 0.751717426

7e635a22-472c-4c1d-bb1c-100543f31af2
01:02:33.280 --> 01:02:36.769
routine to give you some memory locations.

NOTE Confidence: 0.751717426

72f17223-05bb-4ebd-97d0-46b7dfada2a2
01:02:36.770 --> 01:02:41.009
To do what, I'll I'll show you an example.

NOTE Confidence: 0.751717426

f21686a5-8116-4063-9b05-771d825629e0
01:02:41.010 --> 01:02:43.210
I mean if you slide.

NOTE Confidence: 0.751717426

dab6a830-dd02-4bb2-8c8b-7c509d16bfff
01:02:43.210 --> 01:02:44.086
For instance,

NOTE Confidence: 0.751717426

308cd562-57ce-43fb-95ca-d188aeb4d5ae
01:02:44.086 --> 01:02:48.619
you can say that give me 10 bytes of memory.

NOTE Confidence: 0.751717426

fb78b8b7-f65a-412f-b703-d0ac6304450a
01:02:48.620 --> 01:02:51.931
For what you can use it in

NOTE Confidence: 0.751717426

ee4477e9-71d0-476b-8c7e-348898670cdb
01:02:51.931 --> 01:02:54.450
anything any way you want.

NOTE Confidence: 0.751717426

5f38a014-ad5f-4963-b9d6-aeef2eb890b3
01:02:54.450 --> 01:02:57.348
And this space.

NOTE Confidence: 0.751717426

f4a8e2e2-5c60-494d-9a6d-f1913a576e7c
01:02:57.350 --> 01:03:01.326
Is allocated by the kernel to your program.

NOTE Confidence: 0.751717426

e44b92c2-73b7-4c29-ad70-64c70861a622
01:03:01.330 --> 01:03:04.390
From this part, the heat pump.

NOTE Confidence: 0.751717426

0f687171-fd1d-4942-99c6-c8b8f15de8df
01:03:04.390 --> 01:03:07.190
If you look at this part carefully,

NOTE Confidence: 0.751717426

c4720088-627c-410e-b491-fa343f3f80b2
01:03:07.190 --> 01:03:09.500
it is actually part of this tag,

NOTE Confidence: 0.751717426

9ab6a053-66f2-4aa6-b85e-993f5a305562
01:03:09.500 --> 01:03:12.307
but at the higher part of this

NOTE Confidence: 0.751717426

56af13d4-93ca-453f-b4fa-4d380b16efd4
01:03:12.307 --> 01:03:15.418
tag that is not used right now.

NOTE Confidence: 0.751717426

bd10fc03-f970-491f-8e67-3672e1909dc1
01:03:15.420 --> 01:03:17.320
So again, it's not actually,

NOTE Confidence: 0.751717426

e55802a0-42a2-4c1f-b767-7dbad55f1536
01:03:17.320 --> 01:03:20.676
although inside the memory it is at the

NOTE Confidence: 0.751717426

48d72bf6-7064-4385-98e8-40933f154d0b
01:03:20.676 --> 01:03:25.948
high part of the memory, but it's a.

NOTE Confidence: 0.751717426

bf67adcf-7f37-4039-89d7-a41f472400ce
01:03:25.950 --> 01:03:28.708
Actually it grows in the reverse order,

NOTE Confidence: 0.751717426

bbb4934d-9091-4529-b100-397230d5f739
01:03:28.710 --> 01:03:30.462
so it goes down,

NOTE Confidence: 0.751717426

7f39fffa-a356-4d1f-b5a3-99a81d95bf07
01:03:30.462 --> 01:03:34.490
so this is the highest part of the stack,

NOTE Confidence: 0.751717426

6ec177cd-1523-4045-b54a-5fb9e075e543
01:03:34.490 --> 01:03:37.910
but inside the memory lower part.

NOTE Confidence: 0.751717426

30894e77-b31a-4e54-8a9f-eb5c46a28eda
01:03:37.910 --> 01:03:39.840
So.

NOTE Confidence: 0.751717426

ed1fb280-7246-46b5-b0ca-a4ad84cddfbe
01:03:39.840 --> 01:03:40.780
By assumption,

NOTE Confidence: 0.751717426

756fb303-3114-412d-87f6-d10158b9fd27
01:03:40.780 --> 01:03:43.600
we can say that any program

NOTE Confidence: 0.751717426

806ebf0f-8b8c-4c70-bb34-f87105e4a1ae
01:03:43.600 --> 01:03:46.910
can do some inner calls one or

NOTE Confidence: 0.751717426

d5d0f9a0-973a-485f-b45d-df7a1e9e036a
01:03:46.910 --> 01:03:49.130
two times at most 10 times,

NOTE Confidence: 0.751717426

53c4f469-eb1e-412b-86bd-845e56b79124
01:03:49.130 --> 01:03:51.930
but there is a huge space of

NOTE Confidence: 0.751717426

311ab823-7f72-4f57-86cb-4311769e4e2b
01:03:51.930 --> 01:03:54.350
the stack that is not used,

NOTE Confidence: 0.751717426

c1a23767-c5e3-4623-948d-d9b4181e8291
01:03:54.350 --> 01:03:57.374
so we can use reuse that part of

NOTE Confidence: 0.751717426

67f63679-3767-40c2-bef5-5a2fbdb9b99b
01:03:57.374 --> 01:03:59.930
the stack for other purposes,

NOTE Confidence: 0.751717426

ac4d5609-1163-4cb2-b2b8-8905995496d3
01:03:59.930 --> 01:04:02.865
but from which part from the upper

NOTE Confidence: 0.751717426

f19981ac-4d96-4d86-bc8a-a633a20f76b1
01:04:02.865 --> 01:04:05.490
part of this tag which is inside

NOTE Confidence: 0.751717426

038a650d-e24c-4037-a291-9e6b48ca1f3c
01:04:05.490 --> 01:04:08.227
the memory lower part of the memory?

NOTE Confidence: 0.751717426

3260979b-0af5-4574-bd96-9fe1306fab21
01:04:08.230 --> 01:04:11.440
So the heat starts from lower

NOTE Confidence: 0.751717426

68016d7b-7323-4445-9ac9-89d384c6b1ca
01:04:11.440 --> 01:04:14.860
part and grows toward the upper

NOTE Confidence: 0.751717426

fc690924-df8d-4308-ae6b-bc17e6a43a1b
01:04:14.860 --> 01:04:18.548
part of the memory or lower.

NOTE Confidence: 0.751717426

9eea9eaf-8c8b-4765-96f0-22a58b09a251
01:04:18.550 --> 01:04:21.018
Part of this time.

NOTE Confidence: 0.751717426

3013a9f0-a396-4ae2-8573-50cc9c11fc26
01:04:21.020 --> 01:04:23.463
It's kind of reusing the part of

NOTE Confidence: 0.751717426

75c894f4-e14c-4b94-beea-577a0c3787d8
01:04:23.463 --> 01:04:25.809
this tag that is not used yet.

NOTE Confidence: 0.6683064475

391fa10d-38d3-4fc2-a73a-64c0560124c3
01:04:29.110 --> 01:04:33.960
So what's the, uh? Use case.

NOTE Confidence: 0.6683064475

a645f033-0ba6-4f58-8b13-d4f8c61277d7
01:04:33.960 --> 01:04:38.522
I just try to show you a very I mean a

NOTE Confidence: 0.6683064475

ab44fe1e-5fc3-4ce5-bc66-cbb1c722575e
01:04:38.522 --> 01:04:41.776
beautiful use case of the memory allocation

NOTE Confidence: 0.6683064475

22f6171e-df28-4dea-b965-027b2e5c358b
01:04:41.776 --> 01:04:46.160
and using the heap part of the memory.

NOTE Confidence: 0.6683064475

d5d0586f-5f02-478a-acb3-b2b1b98c515a
01:04:46.160 --> 01:04:49.160
So in a normal program.

NOTE Confidence: 0.6683064475

15d29294-c6ce-45f0-a753-26bd305bdc2e
01:04:49.160 --> 01:04:52.156
The data segment part of your program,

NOTE Confidence: 0.6683064475

82ff40e1-3f39-4bed-aa75-d0be3cc8b1f0
01:04:52.160 --> 01:04:54.638
which is allocated to your variables,

NOTE Confidence: 0.6683064475

14d3cb23-b801-4326-a9a6-c4c6079ada59
01:04:54.640 --> 01:04:56.600
which is initialized and

NOTE Confidence: 0.6683064475

cee112e4-540c-4ece-be75-ff59e695aa3d
01:04:56.600 --> 01:04:59.050
DBSS part of your program.

NOTE Confidence: 0.6683064475

e186d676-fb69-4f07-941c-f5385556613a
01:04:59.050 --> 01:05:01.288
At the time of the programming,

NOTE Confidence: 0.6683064475

82b2c930-c94b-455a-b56a-2efff21a09d6
01:05:01.290 --> 01:05:03.733
it is the size of the memory

NOTE Confidence: 0.6683064475

b4a91145-a891-47f9-87a3-babb3fe85f33
01:05:03.733 --> 01:05:05.100
that is assigned to.

NOTE Confidence: 0.6683064475

48c51131-8212-44fa-8d3d-a68d551ca0bb
01:05:05.100 --> 01:05:07.228
These variables are fixed.

NOTE Confidence: 0.6683064475

0f4efbc8-68c4-4849-9cd8-67fe019cd95a
01:05:07.230 --> 01:05:09.250
When you build your program,

NOTE Confidence: 0.6683064475

10354459-32d2-4e80-aa94-1ff4b402356b
01:05:09.250 --> 01:05:11.670
you cannot add another variable.

NOTE Confidence: 0.6683064475

30818f21-d3e2-41a8-b8b7-8d1373917c05
01:05:11.670 --> 01:05:13.446
For instance variable C.

NOTE Confidence: 0.6683064475

896e76ad-5fbd-4723-8e0c-7990a25421ff
01:05:13.446 --> 01:05:17.101
You cannot increase the size of the result

NOTE Confidence: 0.6683064475

dda4faed-250f-46dc-9d03-89ceec664fe2
01:05:17.101 --> 01:05:20.136
from integer to long integer, it's done,

NOTE Confidence: 0.6683064475

f7a717ed-0a8b-4863-bc11-6cf85c897eed
01:05:20.136 --> 01:05:23.670
you are you built your program and it's done.

NOTE Confidence: 0.6683064475

10e21a92-e62f-4396-8964-2e7ac69786dc
01:05:23.670 --> 01:05:25.850
So during the compile time,

NOTE Confidence: 0.6683064475

3f100807-2e2e-4cd9-bbba-dcf52eafd4c5
01:05:25.850 --> 01:05:27.866
the size of the memory variable

NOTE Confidence: 0.6683064475

66612885-ffac-4525-b49b-874d8142d3af
01:05:27.866 --> 01:05:30.076
and the variables and the memory

NOTE Confidence: 0.6683064475

76a36bbe-8306-4b62-b72e-6c2b1cd9089c
01:05:30.076 --> 01:05:32.458
allocated to these variables are fixed.

NOTE Confidence: 0.6683064475

728956f9-7198-43a3-bcae-9aa0a588ea22
01:05:32.460 --> 01:05:35.085
The only thing that which is dynamic

NOTE Confidence: 0.6683064475

53ec76e9-ee1c-44f9-abe8-65a8bdb3c330
01:05:35.085 --> 01:05:37.748
is the value of these variables.

NOTE Confidence: 0.6683064475

5e2a9d1a-b6f1-444f-81a1-96756e0a5f9c
01:05:37.750 --> 01:05:40.432
For instance, the value of A is initially 0,

NOTE Confidence: 0.6683064475

1765b7d2-53fd-4cd0-a0b6-7467f5c64704
01:05:40.440 --> 01:05:42.984
but at runtime the value would

NOTE Confidence: 0.6683064475

6073f776-9cbe-4580-8cc7-1bb9c7410173
01:05:42.984 --> 01:05:44.358
be 2-3 or whatever.

NOTE Confidence: 0.6683064475

31472f3a-5613-46f3-9bfe-cdce5bdc376d
01:05:44.358 --> 01:05:46.974
So the value of the variables of dynamic

NOTE Confidence: 0.6683064475

1566c20e-6c03-4ed4-b010-8342c1a81146
01:05:46.974 --> 01:05:49.670
but the size of the variable are fixed.

NOTE Confidence: 0.626928767692308

bccab389-3625-440f-8090-6c83034046c6
01:05:51.970 --> 01:05:54.022
But by using the.

NOTE Confidence: 0.626928767692308

f35650e1-d770-42cd-8922-4374d8c3988b
01:05:54.022 --> 01:05:56.074
Memory allocation and the

NOTE Confidence: 0.626928767692308

658382b8-c22b-49c1-86b7-ea8256414c18
01:05:56.074 --> 01:05:58.944
heap are part of your memory.

NOTE Confidence: 0.626928767692308

59adb8c6-4304-4d73-850f-5ab012dc26b5
01:05:58.944 --> 01:06:02.268
You can have a dynamic size

NOTE Confidence: 0.626928767692308

f8042d8a-ed9b-467a-a6a7-635cbbfa48e3
01:06:02.268 --> 01:06:05.170
for your variables at runtime.

NOTE Confidence: 0.939321322

02d9ab8d-e1cb-44be-b356-748f21512186
01:06:07.230 --> 01:06:10.942
So here is an example. What if?

NOTE Confidence: 0.939321322

ef165a05-cd6d-44de-baa5-ca7f6654ac56
01:06:10.942 --> 01:06:16.809
I want to store two large numbers.

NOTE Confidence: 0.939321322

ce5f70f3-9c3a-48d9-bfa5-ec063ffe4eca
01:06:16.810 --> 01:06:19.840
So if I just have two

NOTE Confidence: 0.939321322

39686153-8ba0-4267-baea-e32138f9e9a3
01:06:19.840 --> 01:06:22.378
variables A&B as an integer.

NOTE Confidence: 0.939321322

d7fdf949-beec-4721-b958-6256e03150b5
01:06:22.378 --> 01:06:25.420
The maximum number that I can

NOTE Confidence: 0.939321322

319a97fe-9667-4269-84b6-5997e73a6d1f
01:06:25.528 --> 01:06:28.314
store is if integer is to bite,

NOTE Confidence: 0.939321322

b2e5792d-926e-4ac2-9aef-151118632505
01:06:28.314 --> 01:06:31.400
so each byte going to be 8 bit,

NOTE Confidence: 0.939321322

5b532f58-31e6-43a7-90d4-8e80bff89fd1
01:06:31.400 --> 01:06:35.040
so 2 * 8 bits.

NOTE Confidence: 0.939321322

75118353-38e8-42b3-90d2-48f210ca2342
01:06:35.040 --> 01:06:39.268
We have this 16 bits of storage.

NOTE Confidence: 0.939321322

d98793ca-5ada-4cf9-a308-0752e31ad476
01:06:39.270 --> 01:06:41.802
At most we gonna store 2

NOTE Confidence: 0.939321322

27369343-8753-409a-8b4b-fbd44c993293
01:06:41.802 --> 01:06:45.470
to the power of 16 - 1.

NOTE Confidence: 0.939321322

b12d00ff-6653-4e89-b57d-cf336fb4d472
01:06:45.470 --> 01:06:48.344
So from the number zero up

NOTE Confidence: 0.939321322

71abec18-2052-4b71-b18a-be1a83d9ae84
01:06:48.344 --> 01:06:50.260
until this maximum number.

NOTE Confidence: 0.939321322

c3bae20b-7660-47b9-9363-dfe7211b59aa
01:06:50.260 --> 01:06:51.928
So what is this maximum number?

NOTE Confidence: 0.674722341428571

6dfb8cb3-4d15-473b-b183-5de188342562
01:06:57.640 --> 01:07:04.090
So 2 to the power of 16. Minus one.

NOTE Confidence: 0.674722341428571

e3e113c2-1d0e-4ec9-8f6b-c566a3c42721
01:07:04.090 --> 01:07:06.046
So this is the largest number

NOTE Confidence: 0.674722341428571

0c716142-d886-44cd-b17c-8198e1d4c7ba
01:07:06.046 --> 01:07:08.650
that I can store and give it to

NOTE Confidence: 0.674722341428571

fa7d7f5d-17e1-46cb-87c5-2e3b15e86442
01:07:08.650 --> 01:07:12.088
my program 65 times or something.

NOTE Confidence: 0.674722341428571

4bf44150-aace-401a-b090-3af9b663a508
01:07:12.090 --> 01:07:14.619
So this program.

NOTE Confidence: 0.674722341428571

15b06ff2-0030-4d8b-91dc-f2e4d813b75b
01:07:14.620 --> 01:07:17.608
Only accepts numbers up until the

NOTE Confidence: 0.674722341428571

31733c2d-c0d8-4de2-94c0-3c49f588a6dd
01:07:17.608 --> 01:07:20.030
maximum number is 65,000 something.

NOTE Confidence: 0.756941893636364

44dff3ba-eae5-4548-ac79-a468ee9f0522
01:07:23.630 --> 01:07:26.234
However, what if I want to

NOTE Confidence: 0.756941893636364

c4bc721e-f39e-4915-9288-7d2f67c8ba2c
01:07:26.234 --> 01:07:28.340
store or do addition of,

NOTE Confidence: 0.756941893636364

2d4d6482-0d7e-48e1-9da8-5ec4456db1c4
01:07:28.340 --> 01:07:30.518
for instance, a digit which has.

NOTE Confidence: 0.61026719

9d324bdb-530b-4de4-8df5-64546e6758a1
01:07:32.940 --> 01:07:34.150
50K digits.

NOTE Confidence: 0.871411522

2cdfec2b-5aa8-4d8f-83f6-e3346d786060
01:07:36.310 --> 01:07:39.310
This is the number of.

NOTE Confidence: 0.871411522

24376fc6-ef16-445a-a397-b441712d4a8d
01:07:39.310 --> 01:07:43.198
Digits so we have a number

NOTE Confidence: 0.871411522

3bf4b9f1-7dba-4174-98a7-14aac6302f3a
01:07:43.198 --> 01:07:48.400
which has fifty 500,000 digits.

NOTE Confidence: 0.871411522

c5bceeee-19a9-476b-9c6d-ebb6dffdaca4
01:07:48.400 --> 01:07:52.252
So then I cannot use just a simple integer

NOTE Confidence: 0.871411522

e50d2c66-c720-4bac-8a9b-7870d143c3e8
01:07:52.252 --> 01:07:54.947
variable to store that huge number.

NOTE Confidence: 0.871411522

54789423-fb3c-411c-b150-8e66caf8ce39
01:07:54.950 --> 01:07:59.944
So instead of that I have to ask the.

NOTE Confidence: 0.871411522

7587a8f8-88a6-4e5a-88ed-fc4261f5a18d
01:07:59.944 --> 01:08:03.100
Uh, the Colonel.

NOTE Confidence: 0.871411522

0db51c80-2858-48bf-8db6-8dd7038f0ba4
01:08:03.100 --> 01:08:05.900
Based on the size of the input number,

NOTE Confidence: 0.871411522

76155509-39c0-4936-9d8f-36e6d63618fd
01:08:05.900 --> 01:08:11.220
I need the storage to store that number.

NOTE Confidence: 0.871411522

50eb730c-1ab6-40bc-be3c-6f20e0323293
01:08:11.220 --> 01:08:13.392
So basically I create two variables

NOTE Confidence: 0.871411522

aea6c218-4466-4ab1-9f19-c179710c73be
01:08:13.392 --> 01:08:16.280
just to store the size of the numbers,

NOTE Confidence: 0.871411522

37c90032-2109-4db3-b299-a1e638aff20a
01:08:16.280 --> 01:08:19.479
not the numbers size of the numbers.

NOTE Confidence: 0.871411522

42d18e2e-b722-4bf9-a730-a7e35d66d4f6
01:08:19.480 --> 01:08:22.496
And then this is passed by the user.

NOTE Confidence: 0.871411522

a23f7744-7646-480e-9189-62c9e5dd52c2
01:08:22.500 --> 01:08:24.747
Basically, the user says that I'm going

NOTE Confidence: 0.871411522

4d9a0bfc-2e06-44b1-b477-31935e415184
01:08:24.747 --> 01:08:27.786
to give you a number which has 10 digits

NOTE Confidence: 0.871411522

d460c97e-694a-48ec-954e-1f4e9eef5850
01:08:27.786 --> 01:08:31.480
and another number which has 250 digits.

NOTE Confidence: 0.871411522

b78b222e-9f09-4940-a354-7d74c7e19b1e
01:08:31.480 --> 01:08:35.036
So I transferred it to the integer

NOTE Confidence: 0.871411522

19b999ac-6553-4921-9ac9-ee1143c5c1c2
01:08:35.036 --> 01:08:38.787
values as the size of the numbers.

NOTE Confidence: 0.871411522

b4364c2e-294e-41d0-914d-8ef3a1f65bcd
01:08:38.790 --> 01:08:44.865
And then I asked the Colonel to give me.

NOTE Confidence: 0.871411522

1080e784-33ea-49c4-9b27-3ba9374d47ca
01:08:44.870 --> 01:08:48.450
Integer variables how many

NOTE Confidence: 0.871411522

a9e27c17-a67d-4918-82d4-017824db5cc3
01:08:48.450 --> 01:08:52.030
this amount of integers?

NOTE Confidence: 0.871411522

0914be8a-6555-4514-85da-e2d0791d3de4
01:08:52.030 --> 01:08:55.806
And this is the first address of the

NOTE Confidence: 0.871411522

4510ad9b-062f-4f88-a24e-b0dfa17c6551
01:08:55.806 --> 01:08:58.549
location that is going to store.

NOTE Confidence: 0.871411522

bafb6c74-c83c-45e2-a395-a4764d9425aa
01:08:58.550 --> 01:09:05.319
The digits of the number which and we have

NOTE Confidence: 0.871411522

ec077317-b79a-407e-be3c-56562ce5e0ca
01:09:05.319 --> 01:09:07.230
this amount of digits for that number.

NOTE Confidence: 0.766229651111111

ce59ad82-53eb-435b-81dd-da4ea2df6e7c
01:09:09.960 --> 01:09:14.190
And then here I asked the user to put the

NOTE Confidence: 0.766229651111111

3d46de7c-6ce3-445f-9b7b-90dfb185f006
01:09:14.293 --> 01:09:18.109
digits of that large number one by 1.

NOTE Confidence: 0.766229651111111

6b1dd09c-8937-4ade-b708-1bca6b395d38
01:09:18.110 --> 01:09:20.018
This is for the first number,

NOTE Confidence: 0.766229651111111

5c9d6d5f-c798-43cd-bba2-73680548ac00
01:09:20.020 --> 01:09:22.198
for the second number, the same,

NOTE Confidence: 0.766229651111111

dddee96d-6656-4603-b72b-b4958a712575
01:09:22.200 --> 01:09:27.240
so I need to store integer digits.

NOTE Confidence: 0.766229651111111

a040090b-ecd7-4d49-b142-3897174ec9e4
01:09:27.240 --> 01:09:30.939
How many digits in the amount of size B?

NOTE Confidence: 0.766229651111111

63798acd-bb2c-49d6-861b-dd8cc603ea0b
01:09:30.940 --> 01:09:33.572
And then I asked the Colonel to give

NOTE Confidence: 0.766229651111111

01219ca5-a080-4fa5-ac2d-aefe9ee4f591
01:09:33.572 --> 01:09:36.764
me this amount of memory and B is the

NOTE Confidence: 0.766229651111111

f715420b-2b18-4a2a-8b49-5af1ad6a4530
01:09:36.764 --> 01:09:39.020
address the first location of the

NOTE Confidence: 0.766229651111111

cc7bd2e9-b137-4650-89f2-8218ac1279a0
01:09:39.020 --> 01:09:42.436
memory inside the heap, that is that

NOTE Confidence: 0.766229651111111

0a0a06cc-89ae-49c1-9778-ab68a7de207d
01:09:42.436 --> 01:09:45.606
is going to store this huge number.

NOTE Confidence: 0.766229651111111

ea56c2f4-d0cb-49fe-8d54-ac2367b0c453
01:09:45.606 --> 01:09:48.592
And then I asked the user to put

NOTE Confidence: 0.766229651111111

b4a2e3af-b3fa-4b75-991a-e1c8f5653919
01:09:48.592 --> 01:09:50.818
the digits of the second one.

NOTE Confidence: 0.766229651111111

afdeacc9-b3de-4604-a4a0-1ce2843933d5
01:09:50.820 --> 01:09:53.067
And the right side you can see

NOTE Confidence: 0.766229651111111

f7d2558e-95a3-4a04-85a2-1d7bfab6294f
01:09:53.067 --> 01:09:55.030
the running of this program.

NOTE Confidence: 0.766229651111111

0b483cec-b875-4c96-830d-35fb75f597bf
01:09:55.030 --> 01:09:56.113
So I'm. Basically,

NOTE Confidence: 0.766229651111111

da586f1d-7717-40fe-a741-0262e805a9c0
01:09:56.113 --> 01:09:59.392
I run the program and I saying that I'm

NOTE Confidence: 0.766229651111111

3d2f53ea-7075-46a1-ac8e-1f4dff33442d
01:09:59.392 --> 01:10:02.104
going to give you a number with three

NOTE Confidence: 0.766229651111111

84ac18fc-53b9-41ea-b802-8adc057dbefd
01:10:02.178 --> 01:10:06.118
digits and another number with four digits.

NOTE Confidence: 0.766229651111111

119eaeae-0fb0-4354-8922-1a0ef2f14a86
01:10:06.120 --> 01:10:10.377
So the program here asked me put 3 digits

NOTE Confidence: 0.766229651111111

facdf62e-5b5b-4b7e-b451-dc1c6720bc00
01:10:10.377 --> 01:10:14.084
and then I put digit one digit 3, digit 9.

NOTE Confidence: 0.766229651111111

ff795e8f-cdb5-4c66-bb52-7750b2a40409
01:10:14.084 --> 01:10:18.248
And then it goes to the next 4 loop and

NOTE Confidence: 0.766229651111111

23f1bb48-e4e5-4d17-af21-8aaa71b2ef15
01:10:18.248 --> 01:10:22.680
it asks for four digits 65 and attach.

NOTE Confidence: 0.766229651111111

2252b773-8b8a-4403-8f95-e964ceb03025
01:10:22.680 --> 01:10:24.990
And then simply prints out.

NOTE Confidence: 0.766229651111111

3c0ed5d4-6c84-4ea8-b92d-d51778b5e3f1
01:10:24.990 --> 01:10:27.034
Uh, this plus this,

NOTE Confidence: 0.766229651111111

e9246971-4df5-41ba-ba39-5ef72b1cd0d8
01:10:27.034 --> 01:10:29.589
but this program doesn't doesn't

NOTE Confidence: 0.766229651111111

9a73a48e-b2a0-4f71-b01d-81bdbdbd073c
01:10:29.589 --> 01:10:31.958
do the actual edition.

NOTE Confidence: 0.766229651111111

a1a9d74a-b5b4-4c10-8e22-c63a237910ec
01:10:31.960 --> 01:10:34.330
Because additional large numbers you have

NOTE Confidence: 0.766229651111111

8d4b5650-1bee-4f19-8ba4-273cb7b278e2
01:10:34.330 --> 01:10:37.119
to write the program to the definition,

NOTE Confidence: 0.766229651111111

f7782b64-04ea-4b1e-aeb9-632e481912f2
01:10:37.120 --> 01:10:39.226
so you cannot use this simple

NOTE Confidence: 0.766229651111111

acf0fdd7-27d2-4707-b321-c2101464d9f9
01:10:39.226 --> 01:10:40.630
addition in C program.

NOTE Confidence: 0.766229651111111

85e894b6-9e59-4498-a719-7295871e22d2
01:10:40.630 --> 01:10:42.630
Because the result gonna

NOTE Confidence: 0.766229651111111

1eb9a70b-09f6-4392-96dc-dddb7e123eeb
01:10:42.630 --> 01:10:45.105
be larger than a two byte,

NOTE Confidence: 0.766229651111111

a0181b3e-baf9-4c2d-a7b3-67e9697b2486
01:10:45.105 --> 01:10:47.939
so you have to write your own code

NOTE Confidence: 0.766229651111111

f9007461-4601-4113-8c04-909bf42bf3dc
01:10:47.939 --> 01:10:50.319
to do additional large numbers.

NOTE Confidence: 0.766229651111111

3252d794-9048-4905-bc10-ae01d8201877
01:10:50.320 --> 01:10:53.024
But here I just wanted to showcase that.

NOTE Confidence: 0.766229651111111

d1c7bc51-9451-4b5a-95d9-9d267216b196
01:10:53.030 --> 01:10:56.852
What in what cases you need to

NOTE Confidence: 0.766229651111111

e2e56838-54ce-4e81-8350-93e1bab6fb86
01:10:56.852 --> 01:10:58.490
allocate memory dynamically?

NOTE Confidence: 0.766229651111111

8d79ff91-fc3f-4fbd-82a7-db7b9e8f0255
01:10:58.490 --> 01:11:00.562
So if the user.

NOTE Confidence: 0.766229651111111

c5595e5e-927c-4d32-88f6-c062f60fbda2
01:11:00.562 --> 01:11:01.080
Puts

NOTE Confidence: 0.878943458181818

7bb5eabe-edd2-4f40-b0e0-c8eda71bce56
01:11:03.290 --> 01:11:05.366
I want, for instance the run

NOTE Confidence: 0.878943458181818

acef498d-905b-4b45-8120-549fd9234112
01:11:05.366 --> 01:11:07.390
the program the same program,

NOTE Confidence: 0.878943458181818

19f8bc99-a1d7-4c12-9501-e13a139958ea
01:11:07.390 --> 01:11:09.640
the same program, but this time

NOTE Confidence: 0.878943458181818

6f17ab56-855a-44a7-9bc9-ae578cc26051
01:11:09.640 --> 01:11:12.190
the user says that I'm going to.

NOTE Confidence: 0.878943458181818

9412fbbd-d62f-4d03-a329-357a019719f5
01:11:12.190 --> 01:11:17.509
Give you a number with this amount of digits.

NOTE Confidence: 0.878943458181818

1100ca84-657c-4bab-98d3-0c05f915db8d
01:11:17.510 --> 01:11:18.550
This is not the number.

NOTE Confidence: 0.878943458181818

7ee7168d-5a4e-4038-ac99-6a0aafcdb6de
01:11:18.550 --> 01:11:21.088
This is the number of digits of that number,

NOTE Confidence: 0.878943458181818

66eafb35-f9e3-47ff-92f8-46044ea8ca6d
01:11:21.090 --> 01:11:23.169
so it's going to give you this

NOTE Confidence: 0.878943458181818

61a3b81e-e5f6-4acb-a498-e24016dd8c2e
01:11:23.169 --> 01:11:25.141
huge amount of digits for the

NOTE Confidence: 0.878943458181818

a736f9b0-8027-4d2e-8567-69848f63debc
01:11:25.141 --> 01:11:27.163
first number and this huge amount

NOTE Confidence: 0.878943458181818

150881cb-9443-4494-8002-6b7c8a179f89
01:11:27.163 --> 01:11:29.547
of numbers for the second number.

NOTE Confidence: 0.771791254166667

d6b419d6-7682-4e66-81c5-8f7889ea0e7c
01:11:31.710 --> 01:11:34.590
So then your program dynamically

NOTE Confidence: 0.771791254166667

4fd7bddd-75d7-4010-b35f-f1c80f0bbadd
01:11:34.590 --> 01:11:38.790
asked the kernel to give the program.

NOTE Confidence: 0.773462803846154

00be04c7-264f-4792-bd6f-0f324a961370
01:11:41.180 --> 01:11:44.042
Integer spaces to store the first

NOTE Confidence: 0.773462803846154

75f4bde2-0e8e-4314-a83e-a0d9a086d5d3
01:11:44.042 --> 01:11:47.660
number and to store the second number.

NOTE Confidence: 0.773462803846154

7cc1b5d1-2a42-45d2-adde-82cce9dcdcc7
01:11:47.660 --> 01:11:50.908
So my question from you is that what

NOTE Confidence: 0.773462803846154

2ad6594e-493e-4e0e-ad38-3087c8f46c6c
01:11:50.908 --> 01:11:54.030
happens if I run this program? This way.

NOTE Confidence: 0.960110545

5fff242e-cca1-4c95-96fd-3e4d68ae16b9
01:12:02.330 --> 01:12:03.120
Any idea?

NOTE Confidence: 0.889489311666667

dabedf67-f5eb-4554-9ae2-f6c79cb8c6ab
01:12:07.460 --> 01:12:10.140
So I would suggest you to run this

NOTE Confidence: 0.889489311666667

fd798dd2-03cb-4522-b236-5d1d0b6a0722
01:12:10.140 --> 01:12:11.840
program inside your computer.

NOTE Confidence: 0.889489311666667

007ec8c3-1587-4d15-8ce5-c57bdfc0e116
01:12:11.840 --> 01:12:15.930
At home. I upload the code and

NOTE Confidence: 0.889489311666667

b43bb0be-bead-411a-a3ce-dff75937b85a
01:12:15.930 --> 01:12:18.240
then you can write on your home

NOTE Confidence: 0.889489311666667

a447f903-ea5f-41c9-80d3-1978d8c3f0e5
01:12:18.240 --> 01:12:20.148
computer and see what happens.

NOTE Confidence: 0.770623255714286

3940ab28-3e76-497b-8e11-03c88877211b
01:12:24.250 --> 01:12:28.394
Basically, the kernel tries to give you.

NOTE Confidence: 0.770623255714286

b63fe8bf-d7bf-4d1a-b5e4-d621502f6ca4
01:12:28.400 --> 01:12:30.285
This is space from the

NOTE Confidence: 0.770623255714286

bd6129b9-1034-4edd-870a-81860ce97aa9
01:12:30.285 --> 01:12:32.170
heap part of your program.

NOTE Confidence: 0.770623255714286

da4d8a4e-b96e-49d4-9dd8-a363ea761912
01:12:32.170 --> 01:12:35.636
And the heap grows up until it

NOTE Confidence: 0.770623255714286

618eac7b-1b1b-45f8-bbd8-9e53f10b1d02
01:12:35.636 --> 01:12:38.912
occupies your stack, and then your

NOTE Confidence: 0.770623255714286

2451455c-7a8c-415f-894a-17493ad8f55d
01:12:38.912 --> 01:12:42.139
program cannot do function calls.

NOTE Confidence: 0.770623255714286

71b0cd85-b065-4570-9198-ed54bc9a3876
01:12:42.140 --> 01:12:43.792
So it's a tradeoff.

NOTE Confidence: 0.770623255714286

84ee7073-4ac3-4079-a40a-306220e814af
01:12:43.792 --> 01:12:47.868
So the heap space is kind of a smart way

NOTE Confidence: 0.770623255714286

ceed8737-fe67-481d-8d0c-fa0b1d39f6c4
01:12:47.868 --> 01:12:51.140
to reuse the empty part of the stack,

NOTE Confidence: 0.770623255714286

94d5fef4-09f4-4c9c-ac35-486d86059c1c
01:12:51.140 --> 01:12:54.330
but if you exploit it,

NOTE Confidence: 0.770623255714286

2e266caf-3644-4570-a752-54328f981d12
01:12:54.330 --> 01:12:58.285
I mean without attention to this tag,

NOTE Confidence: 0.770623255714286

c60ce304-e01a-48b6-bc14-01991bb24104
01:12:58.290 --> 01:13:01.770
then you occupy the stack and then you

NOTE Confidence: 0.770623255714286

4ce799b3-bec1-4104-ad9a-f86192c24c75
01:13:01.770 --> 01:13:05.449
cannot do in are calls to the functions.

NOTE Confidence: 0.770623255714286

17b77c19-2983-4224-b41f-16db88e21aff
01:13:05.450 --> 01:13:07.635
You cannot store the return

NOTE Confidence: 0.770623255714286

a29f5d59-7e49-4b8a-999c-4ce1b5f5cd72
01:13:07.635 --> 01:13:09.700
address of the color.

NOTE Confidence: 0.856335774615385

41f454f0-e755-4a85-971e-5bef00d00858
01:13:13.980 --> 01:13:16.892
And we said that this memory allocation

NOTE Confidence: 0.856335774615385

412974b9-409f-4b8b-819e-c30646df8682
01:13:16.892 --> 01:13:19.900
is part of the library routine,

NOTE Confidence: 0.856335774615385

0e16df31-5c71-4f24-9c44-b13ef7ec1b06
01:13:19.900 --> 01:13:22.896
and this liability. Does the system call.

NOTE Confidence: 0.856335774615385

145dbf5a-17f3-4b96-beea-836a7168ee90
01:13:22.900 --> 01:13:24.818
But in this course we said that

NOTE Confidence: 0.856335774615385

8f7240ba-533b-44a6-afab-cf222370bccc
01:13:24.818 --> 01:13:26.323
we just wanted to do with.

NOTE Confidence: 0.856335774615385

17011988-f747-48fa-97ff-6b3b54579337
01:13:26.323 --> 01:13:29.230
You just want to talk to the kernel directly.

NOTE Confidence: 0.856335774615385

7fd6a425-fa54-456f-8da5-0e1d8005fce9
01:13:29.230 --> 01:13:32.100
So is there any system call to

NOTE Confidence: 0.856335774615385

4bdb1033-4572-440a-95d3-2f8cd4aac319
01:13:32.100 --> 01:13:35.167
directly ask the kernel to give us

NOTE Confidence: 0.856335774615385

8674b941-bc13-4c23-aa2d-5cf5e5e8a4d1
01:13:35.167 --> 01:13:37.783
the memory location of the heap?

NOTE Confidence: 0.856335774615385

4bd24bf8-c30e-4f96-8c8c-e9dfe1002110
01:13:37.790 --> 01:13:40.904
Says yes, but the name of these system calls.

NOTE Confidence: 0.856335774615385

d1a66f0c-fc68-4225-898f-658c50d431ec
01:13:40.910 --> 01:13:44.342
I leave it to you as a lecture assignment.

NOTE Confidence: 0.856335774615385

70c209ed-5e42-4530-b21f-5d26b79ffd65
01:13:44.342 --> 01:13:47.750
You can search and see in what.

NOTE Confidence: 0.856335774615385

f1098c5d-868f-4a04-a343-afa997919d72
01:13:47.750 --> 01:13:51.602
LA header file you have the system calls to.

NOTE Confidence: 0.856335774615385

b87e73b8-f655-4688-9cc8-f7c5c48cb86e
01:13:51.610 --> 01:13:53.488
Directly asked the Colonel to give

NOTE Confidence: 0.856335774615385

025abea3-546d-4788-8169-63de655fd70f
01:13:53.488 --> 01:13:55.279
the memory location from the heat.

NOTE Confidence: 0.5668464

7fc44035-4da5-4c77-830e-4fc9e4957c13
01:13:57.830 --> 01:14:03.310
So. And now we are back

NOTE Confidence: 0.5668464

09d63ed9-7764-4f4a-bbf4-9e82b37849d0
01:14:03.310 --> 01:14:05.702
to these Masons question.

NOTE Confidence: 0.5668464

45a63574-9c67-4afc-96f7-e26f5646a417
01:14:05.710 --> 01:14:08.748
There is a command in the shell.

NOTE Confidence: 0.5668464

dd0eae93-13b3-4583-acae-ad4e3b315f00
01:14:08.750 --> 01:14:13.118
Basically gives you the size of its segments.

NOTE Confidence: 0.5668464

2d6779e5-6f0b-43de-a075-6fe519f034fb
01:14:13.120 --> 01:14:15.400
So before running your program,

NOTE Confidence: 0.5668464

9a0b882f-a948-4b2a-b853-ec96772af049
01:14:15.400 --> 01:14:17.720
you can ask the shell what is the

NOTE Confidence: 0.5668464

7c6186eb-4a97-469a-94e4-f98bf7449d97
01:14:17.720 --> 01:14:20.104
size of my program and this program

NOTE Confidence: 0.5668464

b6405031-48fd-4098-ba5d-e0d73214c020
01:14:20.104 --> 01:14:22.480
is the opcode of your program.

NOTE Confidence: 0.5668464

20c1b140-7f25-4960-954f-9a70235c9209
01:14:22.480 --> 01:14:25.280
It's a program file of your program.

NOTE Confidence: 0.5668464

d41305b9-1c80-489a-ae68-587c8677b30b
01:14:25.280 --> 01:14:27.116
And this is the return data.

NOTE Confidence: 0.5668464

ee41c6a7-8102-4b80-81d7-44f5f934186c
01:14:27.120 --> 01:14:29.395
Basically it says that the text segment

NOTE Confidence: 0.5668464

b0066539-d5cd-4dfc-b9f3-38aeae29b1b2
01:14:29.395 --> 01:14:31.617
which is the data segment the S.

NOTE Confidence: 0.5668464

e6e16d21-3f70-4472-9ec6-2359b916f7ef
01:14:31.620 --> 01:14:34.146
This is the size in bytes.

NOTE Confidence: 0.5668464

8f1840f3-4810-4c19-84f2-d8c653518e2a
01:14:34.150 --> 01:14:36.466
The data segment.

NOTE Confidence: 0.5668464

a78d538c-a865-4add-8041-de3afbf79201
01:14:36.466 --> 01:14:38.544
DBSS segments. And.

NOTE Confidence: 0.5668464

3e846c9f-c304-4b42-bb01-5bf559beb09b
01:14:38.544 --> 01:14:42.605
I leave these two for you as a research

NOTE Confidence: 0.5668464

11c0374b-571f-4f8e-b226-23bcd497580e
01:14:42.605 --> 01:14:44.600
topic and this is the file name.

NOTE Confidence: 0.870416349285714

82861a8f-6f4b-42fc-b323-6f4bfe3fe3d7
01:14:46.630 --> 01:14:49.101
But the question is that this info

NOTE Confidence: 0.870416349285714

4c43b7c3-632f-4b3a-8c47-13dd2ba84c9d
01:14:49.101 --> 01:14:52.178
is at the compile time or runtime.

NOTE Confidence: 0.95692915

96e2fd38-a490-46d1-998f-def39726181e
01:14:55.250 --> 01:14:56.040
Any idea?

NOTE Confidence: 0.788995745

5772d5a7-1f58-46f7-a80e-27c8e007379f
01:14:59.510 --> 01:15:01.316
The shell, in order to give

NOTE Confidence: 0.788995745

ff704ee8-52b7-4bf1-9241-bbfbc31cecf5
01:15:01.316 --> 01:15:03.510
you the size of this segment,

NOTE Confidence: 0.788995745

9ad0e39c-118c-4087-8a10-1184f7ff0ca2
01:15:03.510 --> 01:15:07.709
needs to run your program or it already

NOTE Confidence: 0.788995745

f039e9e4-9b58-4fd6-8bcd-ba5b55c67ad4
01:15:07.709 --> 01:15:11.147
knows the size of these segments.

NOTE Confidence: 0.788995745

dd97dc4b-f381-48e5-8b53-eec9ccc353f0
01:15:11.150 --> 01:15:14.160
Correct at compile time because.

NOTE Confidence: 0.788995745

98a77820-6f16-4503-ade3-cd1ba2ebdde6
01:15:14.160 --> 01:15:17.304
The code segment data segment VSS

NOTE Confidence: 0.788995745

a4cd82b0-29aa-4561-9a31-1bcc3279d4bc
01:15:17.304 --> 01:15:20.689
and these parts are all already.

NOTE Confidence: 0.802976528571429

2e70e9c3-e7d9-4087-9e48-09ef894c2611
01:15:22.950 --> 01:15:26.765
Except this part, sorry except this part.

NOTE Confidence: 0.802976528571429

fe034a04-b841-431e-948f-38bac66d480e
01:15:26.770 --> 01:15:30.700
Uh, also including this part,

NOTE Confidence: 0.802976528571429

ff94e9d0-25ed-47dd-8953-353364fdad85
01:15:30.700 --> 01:15:32.782
but definitely for these three parts

NOTE Confidence: 0.802976528571429

ddc118bd-25f8-46dc-b6a6-559825dd13d4
01:15:32.782 --> 01:15:35.431
it is already fixed and it is already

NOTE Confidence: 0.802976528571429

ed0fd906-fd3c-4b79-b4e1-d9a68c7a53f4
01:15:35.431 --> 01:15:37.219
in the output of your program.

NOTE Confidence: 0.802976528571429

23908d5f-4c8f-4940-bae4-02bc5924b115
01:15:37.220 --> 01:15:40.828
That's why it shows you the text size,

NOTE Confidence: 0.802976528571429

c22afe99-6164-4474-a509-dbe538cdc1e6
01:15:40.830 --> 01:15:42.955
data size and size without

NOTE Confidence: 0.802976528571429

af20cd6a-f050-4f48-9a5d-6e2ad9a69919
01:15:42.955 --> 01:15:44.230
running your program.

NOTE Confidence: 0.802976528571429

657f2be9-a853-477e-9cbc-5bf51f910d1d
01:15:44.230 --> 01:15:46.156
So this is the correct answer.

NOTE Confidence: 0.779699544444444

97d436bb-ff90-4f6e-a707-d612198ef470
01:15:48.760 --> 01:15:51.483
But the question is that why the

NOTE Confidence: 0.779699544444444

3d442715-358f-4860-8ef1-66e44e2b4c08
01:15:51.483 --> 01:15:53.681
this command the size command

NOTE Confidence: 0.779699544444444

6880ee1e-94eb-42f5-842b-259ad2ec04f1
01:15:53.681 --> 01:15:56.537
doesn't give info about this stack.

NOTE Confidence: 0.779699544444444

8f56e1e9-67a8-4ae4-9f96-1648c20efc8d
01:15:56.540 --> 01:15:58.490
Doesn't give you the info

NOTE Confidence: 0.779699544444444

1bc765ca-0e7f-4714-a527-f630c8275a61
01:15:58.490 --> 01:16:00.050
about the heap size.

NOTE Confidence: 0.924838175

87989659-b79e-4298-af85-6df599bfd80e
01:16:02.520 --> 01:16:03.330
Any idea?

NOTE Confidence: 0.755491893076923

43b6d59a-8284-4f32-93ab-d6dde26bed55
01:16:09.010 --> 01:16:12.118
Why we don't have columns here

NOTE Confidence: 0.755491893076923

3481ea04-97f0-447d-ba66-2387d47b0fd1
01:16:12.118 --> 01:16:15.488
about this stack size or hip size?

NOTE Confidence: 0.755491893076923

92033f85-f0ca-4901-8f13-7697f0d503f3
01:16:15.490 --> 01:16:17.590
Yes, correctly as I said,

NOTE Confidence: 0.755491893076923

9aeb7180-d121-49d8-8a55-98aeb69be042
01:16:17.590 --> 01:16:20.859
because this stack size is going to

NOTE Confidence: 0.755491893076923

8952a1ce-2597-4e25-8812-a7911b823976
01:16:20.859 --> 01:16:24.060
be determined by the function calls,

NOTE Confidence: 0.755491893076923

6b08cac6-155d-4bcd-a0ce-719136775baa
01:16:24.060 --> 01:16:27.006
which is happening during the runtime.

NOTE Confidence: 0.755491893076923

a3c9a250-5074-455d-ab74-beb1b610baa0
01:16:27.010 --> 01:16:30.514
Also, the heap size is it depends

NOTE Confidence: 0.755491893076923

4cf70ba3-c343-46e6-a8e0-535b228ada83
01:16:30.514 --> 01:16:33.016
on your calling to the kernel

NOTE Confidence: 0.755491893076923

2d17d5ca-06f9-4937-abb1-f2baf5751b59
01:16:33.016 --> 01:16:35.249
asking for memory location,

NOTE Confidence: 0.755491893076923

19540072-eb46-4a27-99f3-343577b54ae1
01:16:35.250 --> 01:16:38.526
so it depends on the runtime

NOTE Confidence: 0.755491893076923

39b2e5e6-1916-44d4-ae85-28c2b3d3e3ed
01:16:38.526 --> 01:16:40.710
execution of your opcode.

NOTE Confidence: 0.755491893076923

7571a585-a6ff-4e47-9abe-62743ac4349c
01:16:40.710 --> 01:16:43.818
So this part.

NOTE Confidence: 0.755491893076923

2045bbab-c06f-4720-8476-f33f29a96f95
01:16:43.820 --> 01:16:45.756
Initially has zero size,

NOTE Confidence: 0.755491893076923

b690a3d0-4619-4f1b-9652-c2dfe7b47e62
01:16:45.756 --> 01:16:48.176
meaning that there is nothing

NOTE Confidence: 0.755491893076923

36b615d8-8510-4f5c-b35e-4cce9985a43e
01:16:48.176 --> 01:16:50.782
allocated to your program and all

NOTE Confidence: 0.755491893076923

9975f797-ab62-4a93-9917-b23cd7e0cbf6
01:16:50.782 --> 01:16:53.210
these spaces are available for you.

NOTE Confidence: 0.755491893076923

886cc251-2e6f-46d8-9f36-1ee8f9188010
01:16:53.210 --> 01:16:56.950
But at runtime, this tax grow downward.

NOTE Confidence: 0.755491893076923

de861a32-8158-4d99-a905-b6ec83cadd3a
01:16:56.950 --> 01:17:01.258
The heap grows upward and then at runtime

NOTE Confidence: 0.755491893076923

1fc0edee-4b29-4bfb-b774-abf71bf644a3
01:17:01.258 --> 01:17:05.308
you know the stack size or the heap sides.

NOTE Confidence: 0.755491893076923

d4abb12d-76bd-4a0f-815a-e5de86dd2960
01:17:05.310 --> 01:17:08.488
And the final thing here is this.

NOTE Confidence: 0.755491893076923

d381a6ad-1764-4735-85b5-8971f158d96a
01:17:08.490 --> 01:17:11.171
When the memory layout of your program

NOTE Confidence: 0.755491893076923

5cf97ee9-e484-441a-8997-64d05973c340
01:17:11.171 --> 01:17:13.848
is ready and your opcode is ready

NOTE Confidence: 0.755491893076923

a808d943-ff5b-4353-8153-5b1290c83e89
01:17:13.848 --> 01:17:16.620
to put the strap inside the memory.

NOTE Confidence: 0.755491893076923

bb376843-ee4b-4f37-a8c5-fad0879b5773
01:17:16.620 --> 01:17:19.970
The kernel assigns an ID.

NOTE Confidence: 0.755491893076923

75953a23-33c8-4d30-92f2-6bffe196e49e
01:17:19.970 --> 01:17:22.770
To your process which call

NOTE Confidence: 0.755491893076923

4d5e35cc-79f9-4d8d-be67-64ba875bd390
01:17:22.770 --> 01:17:25.570
it process identifier or PID.

NOTE Confidence: 0.755491893076923

6ea03165-2cd5-41b2-ad80-b1b77b1cb435
01:17:25.570 --> 01:17:29.182
It isn't a negative number like

NOTE Confidence: 0.755491893076923

13ddb343-7a4e-4e3d-a1a4-63c417015819
01:17:29.182 --> 01:17:30.988
a file descriptor.

NOTE Confidence: 0.755491893076923

02cc8c8c-131a-4506-9b46-dbb42853653f
01:17:30.990 --> 01:17:35.278
It is unique among processes meaning God.

NOTE Confidence: 0.755491893076923

06d04654-228c-47e7-80dc-7008084b9c58
01:17:35.278 --> 01:17:38.141
Old if we assume that there are

NOTE Confidence: 0.755491893076923

65553f19-d539-435a-b3bc-a89ea873fd6c
01:17:38.141 --> 01:17:40.789
multiple processes inside the memory.

NOTE Confidence: 0.755491893076923

974a8d61-51c6-47e5-950c-8722a1d49948
01:17:40.790 --> 01:17:43.226
The PID of this process to

NOTE Confidence: 0.755491893076923

d99cdb34-c690-405f-9224-3a2e0a57bc2d
01:17:43.226 --> 01:17:44.850
your program is unique.

NOTE Confidence: 0.755491893076923

c8d94c16-8d04-436e-b2fe-5ab0ce17f793
01:17:44.850 --> 01:17:46.900
However.

NOTE Confidence: 0.755491893076923

854c0e30-f344-47aa-9768-123791bae40d
01:17:46.900 --> 01:17:49.930
It When you're process terminated,

NOTE Confidence: 0.755491893076923

97c8fc8e-f906-41e2-8266-af9d3abc3762
01:17:49.930 --> 01:17:52.576
the kernel can reuse the PID of

NOTE Confidence: 0.755491893076923

9846297a-3a77-47fa-902e-002760f1b42d
01:17:52.576 --> 01:17:55.050
your program for another process,

NOTE Confidence: 0.755491893076923

15d379a0-a6f1-4ce1-b981-5564c927579a
01:17:55.050 --> 01:17:58.874
so it can be reused as a result.

NOTE Confidence: 0.755491893076923

d169823a-6543-45a9-a783-80ad5a985e6a
01:17:58.880 --> 01:18:03.110
This is incorrectly called identifier.

NOTE Confidence: 0.755491893076923

e3b26297-e261-474a-b601-3588cd48b60a
01:18:03.110 --> 01:18:05.678
So again, it's not an identifier.

NOTE Confidence: 0.755491893076923

263e53ca-033d-40f1-98a8-8399b0147928
01:18:05.680 --> 01:18:10.160
It is incorrectly called identifier.

NOTE Confidence: 0.755491893076923

1d42f496-f652-4719-a8ce-4d854e2de9d7
01:18:10.160 --> 01:18:12.736
Because the kernel reuse the idea of

NOTE Confidence: 0.755491893076923

c5462ec9-3b8d-42ba-aefa-09f4f33b7a93
01:18:12.736 --> 01:18:15.680
your process when the process is terminated,

NOTE Confidence: 0.755491893076923

7ca7cdc7-077e-4fde-9462-8cec2c0d4863
01:18:15.680 --> 01:18:18.516
in order to make it a little

NOTE Confidence: 0.755491893076923

af006753-b309-4a94-b270-2bf08d8a8e9c
01:18:18.516 --> 01:18:20.428
bit close to identifier.

NOTE Confidence: 0.755491893076923

e24ae0a7-3235-4e42-87d0-3fdac97f7fd9
01:18:20.430 --> 01:18:22.030
Something called delay reuse

NOTE Confidence: 0.755491893076923

e75cb0a8-8920-4c42-a054-a5d9b63d041d
01:18:22.030 --> 01:18:24.030
is used by the kernel,

NOTE Confidence: 0.755491893076923

bf1583a4-00fd-44b1-8682-c85196a52085
01:18:24.030 --> 01:18:26.970
meaning that if your program

NOTE Confidence: 0.755491893076923

3e5ae0d7-2e99-4cb8-9b10-29e32b888928
01:18:26.970 --> 01:18:28.734
is assigned vidwans.

NOTE Confidence: 0.755491893076923

1419717d-97a6-4014-8fe3-36241c0ae5ab
01:18:28.740 --> 01:18:30.390
And your program is done.

NOTE Confidence: 0.828375708571429

88f1dc72-e8b9-40bb-82ef-0b92bf097ff1
01:18:33.490 --> 01:18:36.815
Then it takes my son 10 minutes.

NOTE Confidence: 0.828375708571429

a568528e-4c50-44ea-89d9-949e72f9dfb2
01:18:36.820 --> 01:18:39.473
For the kernel and then the kernel

NOTE Confidence: 0.828375708571429

975e8a9c-0d58-4f89-ba10-bcd50e15c8b3
01:18:39.473 --> 01:18:42.278
reuse the one for another process.

NOTE Confidence: 0.828375708571429

16c238a5-da75-48c4-ab8e-1c1086f00861
01:18:42.280 --> 01:18:44.891
It's called delirious just to make sure

NOTE Confidence: 0.828375708571429

8f7e0a60-b819-41b7-baae-10e49a6ba0d5
01:18:44.891 --> 01:18:49.806
that the process ID's are kind of unique.

NOTE Confidence: 0.828375708571429

7fb2edc7-cfdb-41ac-85af-20afb40e3c79
01:18:49.810 --> 01:18:52.920
Even after determination, but again.

NOTE Confidence: 0.828375708571429

1acf4967-2f01-4a2c-810d-3b64f6fcc634
01:18:52.920 --> 01:18:55.615
This is not an identifier for the

NOTE Confidence: 0.828375708571429

41b359e0-cbe2-4069-8d06-f55508c176a2
01:18:55.615 --> 01:18:57.848
whole a lifetime of a program.

NOTE Confidence: 0.736592890769231

9e885944-1be9-4c55-8b32-b8364e8459c1
01:19:01.050 --> 01:19:03.636
And there is a system called

NOTE Confidence: 0.736592890769231

587a7305-8833-465d-912b-c55d1c75c023
01:19:03.636 --> 01:19:07.070
to get the PID of your process.

NOTE Confidence: 0.736592890769231

9bee305b-f90c-42c2-8d1a-8fa8bbf8b125
01:19:07.070 --> 01:19:10.734
You can add any program you can run.

NOTE Confidence: 0.736592890769231

b4cb6e7a-5835-42f4-aa85-cf8332e83047
01:19:10.740 --> 01:19:14.685
You can. It is in the Unix

NOTE Confidence: 0.736592890769231

7f96015a-be80-47c6-9626-89c8cff79ce1
01:19:14.685 --> 01:19:16.076
Standard Library header.

NOTE Confidence: 0.736592890769231

40722fa7-ce31-4765-9543-1a8f12b31072
01:19:16.076 --> 01:19:19.387
Uh, by using this system called you

NOTE Confidence: 0.736592890769231

e6e12567-62f2-4c07-9226-b52dcbfd08df
01:19:19.387 --> 01:19:22.449
can know the PID of your program.

NOTE Confidence: 0.890601789

d47d56ca-b3f6-4a71-9346-3eb957246605
01:19:25.930 --> 01:19:28.050
And we don't have enough

NOTE Confidence: 0.890601789

2fd83d62-43c3-43ff-a0b8-20f248246cc4
01:19:28.050 --> 01:19:30.170
time for the next part.

NOTE Confidence: 0.890601789

487d48f6-8f62-400f-930d-563817bcf6ea
01:19:30.170 --> 01:19:32.920
Uh, which basically the actual

NOTE Confidence: 0.890601789

b084a4b9-16f4-4cb0-a046-6cfe8f02069f
01:19:32.920 --> 01:19:36.395
running of your program and then

NOTE Confidence: 0.890601789

1dae6f7a-0a89-47f9-a370-4f0232d5916f
01:19:36.395 --> 01:19:38.899
followed by the termination.

NOTE Confidence: 0.890601789

9cc293e8-537f-4b75-8c0b-f0c1e791e110
01:19:38.900 --> 01:19:41.588
So we leave it for the next.

NOTE Confidence: 0.890601789

11eb6eeb-03a1-43f0-a1b7-0a698c567d45
01:19:41.590 --> 01:19:44.180
Lecture and.

NOTE Confidence: 0.890601789

b2ade63d-c40d-4ed6-9f2f-4f12c2b854ef
01:19:44.180 --> 01:19:45.996
Thank you so much for your time and

NOTE Confidence: 0.890601789

9902b389-e7e7-4de1-b6e0-18a5a81f5c6b
01:19:45.996 --> 01:19:47.667
I'm ready to take your questions.

NOTE Confidence: 0.533904826

fe08b16f-acc5-4f34-9251-f581853c03c8
01:19:58.080 --> 01:20:01.980
Yes, yeah, actually, uh, the.

NOTE Confidence: 0.416194992

a8b179b9-8b4e-499a-ac0e-fd123c41c4ab
01:20:05.030 --> 01:20:10.172
Mesa asks a heap size for the heap size.

NOTE Confidence: 0.416194992

0a63cd5a-2658-4e0d-856b-7e5666d91753
01:20:10.172 --> 01:20:11.904
There is no address.

NOTE Confidence: 0.416194992

1226a0ca-f968-4d2a-a458-d3c2a755f33f
01:20:11.910 --> 01:20:13.310
Basically, when you allocate

NOTE Confidence: 0.416194992

b6286655-41df-48ad-a7e8-4237c20dae42
01:20:13.310 --> 01:20:15.060
for instance in our program,

NOTE Confidence: 0.416194992

fbe8e958-b28c-4afe-9b48-6595cf7f59cb
01:20:15.060 --> 01:20:18.630
when you let me go back here.

NOTE Confidence: 0.416194992

2456baf2-9baa-461b-b77e-c55cc85d861b
01:20:18.630 --> 01:20:20.996
That here. When you ask the kernel

NOTE Confidence: 0.416194992

0159b0fb-d1aa-45a3-a24d-7b0c758b288c
01:20:20.996 --> 01:20:23.665
to give you this amount of integers.

NOTE Confidence: 0.416194992

e6512e3e-58e5-44a7-971d-dde07b0616f0
01:20:23.665 --> 01:20:26.390
It looks at the heap.

NOTE Confidence: 0.416194992

fa46b71f-ecff-45b5-a9e6-60a14a8ef460
01:20:26.390 --> 01:20:31.480
If he's empty, it allocated.

NOTE Confidence: 0.416194992

46a5919d-0603-48cc-b9cc-5cc917e0cfe7
01:20:31.480 --> 01:20:34.534
Consecutive locations of the heap from

NOTE Confidence: 0.416194992

52ed9d3a-eca7-4461-9d79-80fe48d2fee9
01:20:34.534 --> 01:20:38.686
the start of the heap grows upward.

NOTE Confidence: 0.416194992

f5969bb7-afbb-4f58-ac96-61f4796c00ba
01:20:38.686 --> 01:20:41.978
This amount of integers.

NOTE Confidence: 0.416194992

619f8e7f-a220-4fdc-9b6c-7fa6f75e0ebf
01:20:41.980 --> 01:20:44.068
And then it returns the address

NOTE Confidence: 0.416194992

1826636e-9490-498a-9d7c-4e56e87b8f7e
01:20:44.068 --> 01:20:45.460
of the first location,

NOTE Confidence: 0.416194992

93e5301e-672f-46c0-8a88-a14f80068a61
01:20:45.460 --> 01:20:47.368
for instance 00 FF.

NOTE Confidence: 0.867212183333333

0a837273-a7a1-4fc5-8354-0f16efc33bba
01:20:49.650 --> 01:20:52.818
The next number here is this,

NOTE Confidence: 0.867212183333333

f3e47c6d-b28a-4b77-be4f-15d64a885f46
01:20:52.820 --> 01:20:56.348
so from the last allocated memory

NOTE Confidence: 0.867212183333333

fcd4f8ca-b5d6-4247-b2df-3347a6ecb8b8
01:20:56.350 --> 01:21:00.518
it is start to grow upward and then.

NOTE Confidence: 0.867212183333333

e22677d9-7aee-4bfd-b3f7-1b6a2cdf1397
01:21:00.520 --> 01:21:02.200
It allocates this amount of

NOTE Confidence: 0.867212183333333

4d76b4e7-0c5f-4c46-a480-af9be1c1e16b
01:21:02.200 --> 01:21:03.880
memory to the second number,

NOTE Confidence: 0.867212183333333

e34975dc-ddc6-43a4-ac3d-21a7a1062c5b
01:21:03.880 --> 01:21:07.648
and it returns the address of the first

NOTE Confidence: 0.867212183333333

32872a28-e6fb-44f6-89c3-e063604e377a
01:21:07.650 --> 01:21:10.590
memory location for the second number.

NOTE Confidence: 0.867212183333333

518b1d1a-f946-48fa-aa53-12c71256e55b
01:21:10.590 --> 01:21:14.550
So for instance it returns 0FF.

NOTE Confidence: 0.867212183333333

f728fbb0-9cfd-4738-b66e-9314427bcbb2
01:21:14.550 --> 01:21:18.702
F. So basically there is

NOTE Confidence: 0.867212183333333

fe7029bd-4f1a-45e2-8a57-db7f44717d45
01:21:18.702 --> 01:21:21.992
no pointer for the heap.

NOTE Confidence: 0.867212183333333

d4fff127-cc3c-4be9-b313-56f58d97c927
01:21:22.000 --> 01:21:24.868
The heap is allocated and deallocated.

NOTE Confidence: 0.867212183333333

3687bae6-faec-40be-84ef-52f384ad07f2
01:21:24.870 --> 01:21:27.582
Memory location is returned by the

NOTE Confidence: 0.867212183333333

982720de-3fef-4f8c-98ce-09953281a09d
01:21:27.582 --> 01:21:30.300
first address of the allocated.

NOTE Confidence: 0.867212183333333

6c9e69ce-6ccc-4896-8dbd-598e66ff7bbb
01:21:30.300 --> 01:21:34.273
Pause. But food is stack in order to

NOTE Confidence: 0.867212183333333

59c10972-328a-483b-b50a-18ad06062718
01:21:34.273 --> 01:21:36.740
keep track of the top of this time,

NOTE Confidence: 0.867212183333333

391cc92d-6cf2-4afb-b26f-2ba5d6ebb313
01:21:36.740 --> 01:21:40.068
there is a pointer called the stack pointer.

NOTE Confidence: 0.867212183333333

9c3b2cec-8211-421a-968c-ac26a7e1580f
01:21:40.070 --> 01:21:43.798
This is that pointer is inside the processor.

NOTE Confidence: 0.867212183333333

3460736a-b809-47f6-96a5-474b3681a2cf
01:21:43.800 --> 01:21:47.970
And knows what is the location

NOTE Confidence: 0.867212183333333

41a83e9b-0a22-4a1a-9a15-e6e2a2fdd9ff
01:21:47.970 --> 01:21:52.500
of the topmost item in this time.

NOTE Confidence: 0.867212183333333

8ac16d52-3be7-4a7e-bca3-a8e0e26b0b31
01:21:52.500 --> 01:21:53.844
And the stack.

NOTE Confidence: 0.867212183333333

a2fe6fdd-6eb8-40fb-95ed-0a26538bacc8
01:21:53.844 --> 01:21:54.292
Actually,

NOTE Confidence: 0.867212183333333

77ead405-8e2d-4992-8f46-09a74b66d3f5
01:21:54.292 --> 01:21:56.532
this type pointer decremented in

NOTE Confidence: 0.867212183333333

61ab0332-a6dd-4b04-b673-ee7dd1cbc7d6
01:21:56.532 --> 01:21:58.828
order to show that what is the.

NOTE Confidence: 0.867212183333333

aa901307-d5e4-480d-9e1d-babb098649c5
01:21:58.830 --> 01:22:02.286
Top most part of the stem.

NOTE Confidence: 0.867212183333333

0b956c38-cf9a-4258-a72b-664ed7839dd8
01:22:02.290 --> 01:22:02.820
Next test.

NOTE Confidence: 0.90440267625

f9923c60-f8b3-4d58-a681-39e96a651668
01:22:05.500 --> 01:22:07.999
Yeah, so basically he doesn't have any

NOTE Confidence: 0.90440267625

e02f61ef-a79c-47e4-8bd1-929b55d9a4be
01:22:07.999 --> 01:22:10.225
pointer, but the stack half pointer

NOTE Confidence: 0.90440267625

1de59dc6-55e0-4985-8d55-fb77929e3bb2
01:22:10.225 --> 01:22:12.361
because they stack should know what

NOTE Confidence: 0.90440267625

efc16b8b-7227-429d-9dd0-73ba10aa5e40
01:22:12.361 --> 01:22:14.529
item is the topmost item of the stack.

NOTE Confidence: 0.841321565833333

b72cd233-179a-40f2-bc91-a952dca6a6fe
01:22:19.800 --> 01:22:20.640
Thank you, Danielle.

NOTE Confidence: 0.841321565833333

2b3235d1-0fa1-45d8-a83a-bbd2444d55cd
01:22:20.640 --> 01:22:23.200
Thank you for coming and have a great day.

NOTE Confidence: 0.841321565833333

bff2f9d5-b5e7-45fd-b4dc-9ebd500b5b42
01:22:23.200 --> 01:22:25.720
Uh, I'll be in the office,

NOTE Confidence: 0.841321565833333

358f6a2a-94f7-4e73-ba85-61393b5ec67c
01:22:25.720 --> 01:22:28.078
uh, if you have any question,

NOTE Confidence: 0.841321565833333

572a5217-fce8-4beb-b0b1-67155b1fc060
01:22:28.080 --> 01:22:30.530
I'm ready to take your question there

NOTE Confidence: 0.841321565833333

0b3661e3-3d95-4440-a5db-5b0be30bb772
01:22:30.530 --> 01:22:33.659
so we have one question from Sooraj.

NOTE Confidence: 0.841321565833333

a477427a-7076-4b31-ad6f-a7e7b30d02be
01:22:33.660 --> 01:22:37.188
I just called the Mac and used the

NOTE Confidence: 0.841321565833333

8754fba5-332c-48eb-b2f6-f5b5dc62fd52
01:22:37.188 --> 01:22:40.698
terminal for some of the lab 06 command.

NOTE Confidence: 0.841321565833333

f89a5243-89ca-41f1-bb8c-901bc75ada55
01:22:40.700 --> 01:22:42.565
They need admin access to

NOTE Confidence: 0.841321565833333

182caa8b-8a94-42ff-bd1d-9e99909389fb
01:22:42.565 --> 01:22:44.850
do step four of the lab.

NOTE Confidence: 0.4481883425

7e25c9a5-7316-46cb-9343-8baa7538e90b
01:22:47.890 --> 01:22:54.991
Lab 06 let me. I believe, uh.

NOTE Confidence: 0.4481883425

54b2450b-0ded-44e6-9552-98eaa3b9b9b0
01:22:54.991 --> 01:22:58.459
You don't need any.

NOTE Confidence: 0.4481883425

ea2f8cf4-7968-4557-a07c-72a0cea5ea02
01:22:58.460 --> 01:23:00.932
Kind of admin privileges

NOTE Confidence: 0.4481883425

f990b2fb-612c-4f17-80e9-b5b492fa4229
01:23:00.932 --> 01:23:04.022
even inside the new machine.

NOTE Confidence: 0.4481883425

cb72f435-67f4-42ab-ac4f-6dcbdb4526e1
01:23:04.030 --> 01:23:05.470
So let me go back.

NOTE Confidence: 0.6666280145

788a2d00-40b4-40f6-bbbd-53e0b26278a7
01:23:07.500 --> 01:23:12.000
Oh wait, a second. I just have to. Stop.

